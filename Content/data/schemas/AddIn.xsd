<?xml version="1.0" encoding="utf-8"?>
<!-- SharpDevelop .addin schema -->
<!--
	This schema is not used for validation (it does not cover custom doozers),
	but to provide XML completion in XML editors.
	Parts of the file are automatically generated by Tools/BuildAddInDocumentation.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.icsharpcode.net/2005/addin" xmlns="http://www.icsharpcode.net/2005/addin">
	<xs:complexType name="AddIn">
		<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element name="BitmapResources">
				<xs:complexType>
					<xs:choice minOccurs="1" maxOccurs="1">
						<xs:element name="Identity">
							<xs:complexType>
								<xs:attribute name="file" type="xs:string" use="required" />
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="StringResources">
				<xs:complexType>
					<xs:choice minOccurs="1" maxOccurs="1">
						<xs:element name="Identity">
							<xs:complexType>
								<xs:attribute name="file" type="xs:string" use="required" />
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="Manifest">
				<xs:complexType>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Identity">
							<xs:complexType>
								<xs:attribute name="name" type="xs:string" use="required" />
								<xs:attribute name="version" type="xs:string" use="optional" />
							</xs:complexType>
						</xs:element>
						<xs:element name="Dependency" type="AddInReference" />
						<xs:element name="Conflict" type="AddInReference" />
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element ref="Path" />
			<xs:element name="Runtime">
				<xs:complexType>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Import" type="Import" />
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="Include">
				<xs:complexType>
					<xs:attribute name="file" type="xs:string" use="required" />
				</xs:complexType>
			</xs:element>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="author" type="xs:string" use="required" />
		<xs:attribute name="copyright" type="xs:string" use="optional" />
		<xs:attribute name="url" type="xs:anyURI" use="optional" />
		<xs:attribute name="description" type="xs:string" use="optional" />
	</xs:complexType>
	<xs:element name="AddIn" type="AddIn" />
	<xs:complexType name="AddInReference">
		<xs:attribute name="addin" type="xs:string" use="required" />
		<xs:attribute name="version" type="xs:string" use="optional" />
	</xs:complexType>
	<xs:complexType name="Import">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="Doozer" type="CustomDoozerOrCondition" minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="ConditionEvaluator" type="CustomDoozerOrCondition" minOccurs="0" maxOccurs="unbounded" />
		</xs:choice>
		<xs:attribute name="assembly" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="CustomDoozerOrCondition">
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="class" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="Path">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="Condition" />
			<xs:element ref="ComplexCondition" />
			<!-- !!! INSERT DOOZER LIST !!! -->
			<xs:element ref="Class" />
			<xs:element ref="CodeCompletionBinding" />
			<xs:element ref="CustomProperty" />
			<xs:element ref="CustomTool" />
			<xs:element ref="Debugger" />
			<xs:element ref="DialogPanel" />
			<xs:element ref="Directory" />
			<xs:element ref="DisplayBinding" />
			<xs:element ref="EditAction" />
			<xs:element ref="FileFilter" />
			<xs:element ref="Icon" />
			<xs:element ref="Include" />
			<xs:element ref="LanguageBinding" />
			<xs:element ref="MenuItem" />
			<xs:element ref="Pad" />
			<xs:element ref="Parser" />
			<xs:element ref="ProjectContentRegistry" />
			<xs:element ref="SchemeExtension" />
			<xs:element ref="String" />
			<xs:element ref="SyntaxMode" />
			<xs:element ref="TaskBoundAdditionalLogger" />
			<xs:element ref="ToolbarItem" />
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required" />
	</xs:complexType>
	<xs:element name="Path" type="Path" />
	<xs:complexType name="Condition">
		<xs:complexContent>
			<xs:extension base="Path">
				<xs:attribute name="action" use="optional">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Exclude" />
							<xs:enumeration value="Disable" />
							<xs:enumeration value="Nothing" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<!-- !!! INSERT CONDITION ATTRIBUTES !!! -->
				<xs:attribute name="activeextension" type="xs:string" use="optional" />
				<xs:attribute name="activeproject" type="xs:string" use="optional" />
				<xs:attribute name="activewindow" type="xs:string" use="optional" />
				<xs:attribute name="comparisonType" type="xs:string" use="optional" />
				<xs:attribute name="debuggersupports" type="xs:string" use="optional" />
				<xs:attribute name="equals" type="xs:string" use="optional" />
				<xs:attribute name="itemType" type="xs:string" use="optional" />
				<xs:attribute name="openwindow" type="xs:string" use="optional" />
				<xs:attribute name="options" type="xs:string" use="optional" />
				<xs:attribute name="property" type="xs:string" use="optional" />
				<xs:attribute name="string" type="xs:string" use="optional" />
				<xs:attribute name="supports" type="xs:string" use="optional" />
				<xs:attribute name="textcontent" type="xs:string" use="optional" />
				<xs:attribute name="urlRegex" type="xs:string" use="optional" />
				<xs:attribute name="value" type="xs:string" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Condition" type="Condition">
		<xs:annotation>
			<xs:documentation>
			A Condition can disable or exclude items in the AddInTree.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ComplexCondition">
		<xs:choice maxOccurs="unbounded">
			<xs:element ref="And" />
			<xs:element ref="Or" />
			<xs:element ref="Not" />
			<!-- !!! INSERT DOOZER LIST !!! -->
			<xs:element ref="Class" />
			<xs:element ref="CodeCompletionBinding" />
			<xs:element ref="CustomProperty" />
			<xs:element ref="CustomTool" />
			<xs:element ref="Debugger" />
			<xs:element ref="DialogPanel" />
			<xs:element ref="Directory" />
			<xs:element ref="DisplayBinding" />
			<xs:element ref="EditAction" />
			<xs:element ref="FileFilter" />
			<xs:element ref="Icon" />
			<xs:element ref="Include" />
			<xs:element ref="LanguageBinding" />
			<xs:element ref="MenuItem" />
			<xs:element ref="Pad" />
			<xs:element ref="Parser" />
			<xs:element ref="ProjectContentRegistry" />
			<xs:element ref="SchemeExtension" />
			<xs:element ref="String" />
			<xs:element ref="SyntaxMode" />
			<xs:element ref="TaskBoundAdditionalLogger" />
			<xs:element ref="ToolbarItem" />
		</xs:choice>
		<xs:attribute name="action" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="Exclude" />
					<xs:enumeration value="Disable" />
					<xs:enumeration value="Nothing" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="ComplexCondition" type="ComplexCondition">
		<xs:annotation>
			<xs:documentation>
			A Condition that combines multiple conditions with the operators And, Or and Not.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ComplexConditionBody">
		<xs:choice maxOccurs="unbounded">
			<xs:element ref="Condition" />
			<xs:element ref="And" />
			<xs:element ref="Not" />
			<xs:element ref="Or" />
		</xs:choice>
	</xs:complexType>
	<xs:element name="Not" type="ComplexConditionBody" />
	<xs:element name="And" type="ComplexConditionBody" />
	<xs:element name="Or" type="ComplexConditionBody" />
	<xs:complexType name="AbstractCodon" abstract="true">
		<xs:attribute name="id" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				The name used to identify the codon in the AddInTree.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="insertbefore" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
				The id of another codon in the same path. This codon will be placed before the other codon.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="insertafter" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
				The id of another codon in the same path. This codon will be placed after the other codon.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- everything below the line "doozer start" is replaced by the "BuildAddinDocumentation" tool -->
	<!-- !!! DOOZER START !!! -->
	<xs:complexType name="Class">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The fully qualified type name of the class to create an instace of.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Class" type="Class">
		<xs:annotation>
			<xs:documentation>
			Creates object instances by invocating a type's parameterless constructor
			via System.Reflection.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CodeCompletionBinding">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the ICodeCompletionBinding class (normally deriving from DefaultCodeCompletionBinding).
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="extensions" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			List of semicolon-separated entries of the file extensions handled by the binding.
			If no extensions attribute is specified, the binding is activated in all files.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="CodeCompletionBinding" type="CodeCompletionBinding">
		<xs:annotation>
			<xs:documentation>
			Creates code completion bindings that manage code completion for one language.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CustomProperty">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="name" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The name of the MSBuild meta data.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="displayName" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The display name of the property.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="description" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The description text for the property.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="runCustomTool" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Boolean property specifying whether the custom tool should be run when the property value is changed
			by the user. Default: false.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="CustomProperty" type="CustomProperty">
		<xs:annotation>
			<xs:documentation>
			Creates a custom property for project items.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CustomTool">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="id" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			ID used to identify the custom tool.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the ICustomTool class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="fileNamePattern" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Regular expression that specifies the file names for which the custom tool
			can be used. Example: "\.res(x|ources)$"
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="CustomTool" type="CustomTool">
		<xs:annotation>
			<xs:documentation>
			Creates CustomToolDescriptor objects.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Debugger">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IDebugger class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportsStart" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies if the debugger supports the 'Start' command. Default: true
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportsStartWithoutDebugger" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies if the debugger supports the 'StartWithoutDebugger' command. Default: true
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportsStop" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies if the debugger supports the 'Stop' (kill running process) command. Default: true
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportsStepping" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies if the debugger supports stepping. Default: false
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportsExecutionControl" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies if the debugger supports execution control (break, resume). Default: false
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Debugger" type="Debugger">
		<xs:annotation>
			<xs:documentation>
			Creates debuggers.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="DialogPanel">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element ref="ComplexCondition" />
					<xs:element ref="Condition" />
					<xs:element ref="DialogPanel" />
					<xs:element ref="Include" />
				</xs:choice>
				<xs:attribute name="class" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IDialogPanel class. Optional if the page has subpages.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="label" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Caption of the dialog panel.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="DialogPanel" type="DialogPanel">
		<xs:annotation>
			<xs:documentation>
			Creates DefaultDialogPanelDescriptor objects that are used in option dialogs.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Directory">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="path" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Path relative to the directory which contains the .addin file defining the codon.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Directory" type="Directory">
		<xs:annotation>
			<xs:documentation>
			Creates path names using a relative to the folder containing the addin file.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="DisplayBinding">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IDisplayBinding or ISecondaryDisplayBinding class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="title" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Title of the display binding to use in the "Open With" dialog.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" use="optional">
					<xs:annotation>
						<xs:documentation>
			Type of the display binding (either "Primary" or "Secondary"). Default: "Primary".
			</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Primary" />
							<xs:enumeration value="Secondary" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="fileNamePattern" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Regular expression that specifies the file names for which the display binding
			will be used. Example: "\.res(x|ources)$"
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="DisplayBinding" type="DisplayBinding">
		<xs:annotation>
			<xs:documentation>
			Creates DisplayBindingDescriptor objects.
			Primary display bindings can provide editors for additional file types
			(like the ResourceEditor), secondary display bindings can add tabs to
			existing display bindings (like the form designer).
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="EditAction">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="keys" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Comma-separated list of keyboard shortcuts that activate the edit action.
			E.g. "Control|C,Control|Insert"
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IEditAction class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="EditAction" type="EditAction">
		<xs:annotation>
			<xs:documentation>
			Creates IEditAction objects for the text editor.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="FileFilter">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="name" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The name of the file filter entry.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="extensions" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The extensions associated with this file filter entry.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="FileFilter" type="FileFilter">
		<xs:annotation>
			<xs:documentation>
			Creates file filter entries for OpenFileDialogs or SaveFileDialogs.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Icon">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="resource" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The name of a bitmap resource in the resource service.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="language" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			This attribute is specified when a project icon association should be created.
			It specifies the language of the project types that use the icon.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="extensions" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			This attribute is specified when a file icon association should be created.
			It specifies the semicolon-separated list of file types that use the icon.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Icon" type="Icon">
		<xs:annotation>
			<xs:documentation>
			Creates associations between file types or node types in the project browser and
			icons in the resource service.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Include">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="item" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			When this attribute is used, the include doozer builds the item that is at the
			addin tree location specified by this attribute.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="path" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			When this attribute is used, the include doozer builds all items inside the
			path addin tree location specified by this attribute and returns an
			IBuildItemsModifier which includes all items in the output list.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Include" type="Include">
		<xs:annotation>
			<xs:documentation>
			Includes one or multiple items from another location in the addin tree.
			You can use the attribute "item" (to include a single item) OR the
			attribute "path" (to include all items from the target path).
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="LanguageBinding">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="guid" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Project type GUID of the project used by MsBuild.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="supportedextensions" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Semicolon-separated list of file extensions that are compilable files in the project. (e.g. ".boo")
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="projectfileextension" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			File extension of project files. (e.g. ".booproj")
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the ILanguageBinding class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="LanguageBinding" type="LanguageBinding">
		<xs:annotation>
			<xs:documentation>
			Creates LanguageBindingDescriptor objects for the project service.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="MenuItem">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element ref="ComplexCondition" />
					<xs:element ref="Condition" />
					<xs:element ref="MenuItem" />
					<xs:element ref="Include" />
				</xs:choice>
				<xs:attribute name="label" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Label of the menu item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" use="optional">
					<xs:annotation>
						<xs:documentation>
			This attribute must be one of these values:
			Separator, CheckBox, Item=Command, Menu (=with subitems),
			Builder (=class implementing ISubmenuBuilder).
			Default: Command.
			</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Separator" />
							<xs:enumeration value="CheckBox" />
							<xs:enumeration value="Item" />
							<xs:enumeration value="Command" />
							<xs:enumeration value="Menu" />
							<xs:enumeration value="Builder" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="loadclasslazy" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Only for the type "Item"/"Command".
			When set to false, the command class is loaded
			immediately instead of the usual lazy-loading.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="icon" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Icon of the menu item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Command class that is run when item is clicked.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="link" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Only for the type "Item"/"Command". Opens a webpage instead of running a command when
			clicking the item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="shortcut" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Shortcut that activates the command (e.g. "Control|S").
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="MenuItem" type="MenuItem">
		<xs:annotation>
			<xs:documentation>
			Creates menu items from a location in the addin tree.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Pad">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			IPadContent class that is loaded when the pad content is shown for the first time.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="title" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Title of the pad that is shown in the user interface.
			Should be a resource string, e.g. "${res:AddIns.HtmlHelp2.Contents}"
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="icon" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies the name of the icon resource used for the pad.
			Pad icon resources must be registered with the ResourceService before the
			workbench is loaded!
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="category" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Category of the pad. It is possible to create menu items that automatically
			contain show commands for all pads in a certain category.
			Pads in the category "Main" will show up in the "View" menu, the category
			"Tools" in the "View -&gt; Tools" menu, the category "Debugger" in the
			"View -&gt; Debugger" menu.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="shortcut" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Shortcut that activates the 'Show pad' command (e.g. "Control|Alt|T").
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Pad" type="Pad">
		<xs:annotation>
			<xs:documentation>
			Creates PadDescriptor objects for SharpDevelop pads.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="Parser">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="supportedextensions" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Semicolon-separated list of file extensions for which the parser is used. (e.g. ".boo")
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="projectfileextension" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			File extension of project files. (e.g. ".booproj")
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IParser class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Parser" type="Parser">
		<xs:annotation>
			<xs:documentation>
			Creates ParserDescriptor objects for the parsing service.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ProjectContentRegistry">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the ProjectContentRegistry class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ProjectContentRegistry" type="ProjectContentRegistry">
		<xs:annotation>
			<xs:documentation>
			Creates ProjectContentRegistryDescriptor objects for the parsing service.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="SchemeExtension">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="scheme" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies the name of the protocol the extension handles. (e.g. 'ms-help' or 'startpage')
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the ISchemeExtension class (normally deriving from DefaultSchemeExtension).
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="SchemeExtension" type="SchemeExtension">
		<xs:annotation>
			<xs:documentation>
			Creates browser scheme extensions that can intercept calls on one protocol.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="String">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="text" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			The string to return.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="String" type="String">
		<xs:annotation>
			<xs:documentation>
			Creates a string.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="SyntaxMode">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="name" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the language for which the syntax mode is used.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="extensions" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Semicolon-separated list of file extensions for which the syntax mode is used.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="resource" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Fully qualified name of the resource file.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="SyntaxMode" type="SyntaxMode">
		<xs:annotation>
			<xs:documentation>
			Creates AddInTreeSyntaxMode objects that wrap a .xshd syntax mode stored as resource in the
			addin assembly.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="TaskBoundAdditionalLogger">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:attribute name="class" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Name of the IMSBuildAdditionalLogger class.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="taskname" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Specifies the name of the MSBuild task that must be running for
			this logger to be active.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TaskBoundAdditionalLogger" type="TaskBoundAdditionalLogger">
		<xs:annotation>
			<xs:documentation>
			Creates IMSBuildAdditionalLogger objects that are only
			activated when a specific MSBuild task is running.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ToolbarItem">
		<xs:complexContent>
			<xs:extension base="AbstractCodon">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element ref="ComplexCondition" />
					<xs:element ref="Condition" />
					<xs:element ref="MenuItem" />
					<xs:element ref="Include" />
				</xs:choice>
				<xs:attribute name="label" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Label of the tool bar item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="icon" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Icon of the tool bar item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" use="optional">
					<xs:annotation>
						<xs:documentation>
			This attribute must be one of these values:
			Separator, CheckBox, Item, ComboBox, DropDownButton
			</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Separator" />
							<xs:enumeration value="CheckBox" />
							<xs:enumeration value="Item" />
							<xs:enumeration value="ComboBox" />
							<xs:enumeration value="DropDownButton" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="loadclasslazy" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Only for the type "Item". When set to false, the command class is loaded
			immediately instead of the usual lazy-loading.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="tooltip" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Tooltip of the tool bar item.
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="class" use="optional" type="xs:string">
					<xs:annotation>
						<xs:documentation>
			Command class that is run when item is clicked; or class that manages
			the ComboBox/DropDownButton. Required for everything except "Separator".
			</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ToolbarItem" type="ToolbarItem">
		<xs:annotation>
			<xs:documentation>
			Creates tool bar items from a location in the addin tree.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
</xs:schema>