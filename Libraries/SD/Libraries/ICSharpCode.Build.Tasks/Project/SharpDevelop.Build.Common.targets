<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- Base file for compilers in custom backend bindinds -->

    <UsingTask TaskName="Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName" AssemblyName="Microsoft.Build.Tasks, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>

    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(SharpDevelopBuildBinPath)\SharpDevelop.Build.Common.targets</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
    </PropertyGroup>
    <Target
        Name="CreateManifestResourceNames"
        Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''"
        DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

        <!-- Create the target resource names for non-culture resx files. -->
        <CreateVisualBasicManifestResourceName Condition="'@(ResxWithNoCulture)'!=''"
              ResourceFiles="@(ResxWithNoCulture)"
              RootNamespace="$(RootNamespace)">

            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName"/>

        </CreateVisualBasicManifestResourceName>

        <!-- Create the target resource names for culture resx files. -->
        <CreateVisualBasicManifestResourceName  Condition="'@(ResxWithCulture)'!=''"
              ResourceFiles="@(ResxWithCulture)"
              RootNamespace="$(RootNamespace)">

            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName"/>

        </CreateVisualBasicManifestResourceName>

        <!-- Create the target resource names for non-culture non-resx files. -->
        <CreateVisualBasicManifestResourceName  Condition="'@(NonResxWithNoCulture)'!=''"
              ResourceFiles="@(NonResxWithNoCulture)"
              RootNamespace="$(RootNamespace)">

            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture"/>

        </CreateVisualBasicManifestResourceName>

        <!-- Create the target resource names for culture non-resx files. -->
        <CreateVisualBasicManifestResourceName  Condition="'@(NonResxWithCulture)'!=''"
              ResourceFiles="@(NonResxWithCulture)"
              RootNamespace="$(RootNamespace)">

            <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture"/>

        </CreateVisualBasicManifestResourceName>
    </Target>

    <PropertyGroup>
        <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
        <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
        <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>

        <!-- Provide a facility to override UseHostCompilerIfAvailable-->
        <UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>
    </PropertyGroup>

    <ItemGroup>
        <DocFileItem Include="$(IntermediateOutputPath)$(DocumentationFile)"  Condition="'$(DocumentationFile)'!=''">
            <InProject>false</InProject>
        </DocFileItem>
    </ItemGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
    </PropertyGroup>

    <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

</Project>
