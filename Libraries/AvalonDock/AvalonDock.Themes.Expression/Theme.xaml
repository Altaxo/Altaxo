<!--************************************************************************
   AvalonDock

   Copyright (C) 2007-2013 Xceed Software Inc.

   This program is provided to you under the terms of the Microsoft Public
   License (Ms-PL) as published at https://opensource.org/licenses/MS-PL
 ************************************************************************-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:localThemes="clr-namespace:AvalonDock.Themes"
    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock"
    xmlns:sys="clr-namespace:System.Windows;assembly=PresentationCore"
    xmlns:avalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
    xmlns:avalonDockLayout="clr-namespace:AvalonDock.Layout;assembly=AvalonDock"
    xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
    xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
    xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
    xmlns:localControls="clr-namespace:AvalonDock.Themes.Controls"

    >

    <avalonDockConverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <avalonDockConverters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
    <avalonDockConverters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter"/>
    <avalonDockConverters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter"/>
    <avalonDockConverters:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
    <avalonDockConverters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter"/>
    <avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter"/>
    <avalonDockConverters:HideCommandLayoutItemFromLayoutModelConverter x:Key="HideCommandLayoutItemFromLayoutModelConverter"/>
    <avalonDockConverters:AutoHideCommandLayoutItemFromLayoutModelConverter x:Key="AutoHideCommandLayoutItemFromLayoutModelConverter"/>

    <Style x:Key="AvalonDock_Expression_ToolButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <Style x:Key="AvalonDock_Expression_ButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DocumentPaneControlStyle-->
    <Style x:Key="AvalonDock_Expression_DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor8}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <Border Background="Transparent" Grid.RowSpan="2"/>
                        <Grid  Panel.ZIndex="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,0,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                            <avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                Focusable="False"
                                VerticalAlignment="Center"
                                Grid.Column="1">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx
                                        ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style TargetType="{x:Type avalonDockControls:MenuItemEx}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Image Source="/AvalonDock.Themes.Expression;component/Images/PinMenu.png"/>
                            </avalonDockControls:DropDownButton>
                        </Grid>
                        <Border x:Name="ContentPanel" 
                                VerticalAlignment="Stretch" 
                                HorizontalAlignment="Stretch"  
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle"
                                CornerRadius="3"
                                Padding="0,1,0,2">
                            <ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" 
                                              Margin="0,2,0,2"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Image Source="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Image Source="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}"/>
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Padding" Value="2,0,2,0"/>
                    <Setter Property="Margin" Value="2,0,2,0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border x:Name="Bd" 
							              BorderBrush="{TemplateBinding BorderBrush}"
                                          CornerRadius="2,2,0,0"
							              Background="{TemplateBinding Background}" 
							              Padding="{TemplateBinding Padding}">
                                        <ContentPresenter 
								            x:Name="Content" 
								            ContentSource="Header" 
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected"
								            Value="true">
                                        <Setter Property="Background"
									        Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                                        <Setter Property="Margin" Value="-1,0,-1,-4"/>
                                        <Setter Property="Margin" TargetName="Content" Value="0,0,0,3"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_Expression_BaseColor13}"/>
                                        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor9}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--AnchorablePaneControlStyle-->
    <Style x:Key="AvalonDock_Expression_AnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
        <Setter Property="TabStripPlacement" Value="Bottom"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor8}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <Border Background="Transparent" Grid.RowSpan="2"/>

                        <Border x:Name="Header">
                            <avalonDockControls:AnchorablePaneTitle Model="{Binding Model.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Border>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="48"/>
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:AnchorablePaneTabPanel x:Name="HeaderPanel" Margin="0,2,0,0" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </Grid>

                        <Border x:Name="ContentPanel" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" 
                                Grid.Column="0" 
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1" 
                                Padding="1"
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Header"/>
                        </MultiDataTrigger>                        
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}"/>
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Margin" Value="0,0,-10,0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="22"/>
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="Bd" 
							              BorderBrush="{TemplateBinding BorderBrush}"
                                          CornerRadius="3,0,0,0"
							              Background="{TemplateBinding Background}" 
							              Padding="{TemplateBinding Padding}">
                                        <ContentPresenter 
								            x:Name="Content" 
								            ContentSource="Header" 
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>

                                    <localControls:SplineBorder
                                        Stroke="{TemplateBinding Background}"
           							    Fill="{TemplateBinding Background}" 
                                        Grid.Column="1"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected"
								        Value="true">
                                            <Setter Property="Background"
									    Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                                            <Setter Property="Panel.ZIndex" 
                                        Value="1" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" Value="1">
                                        <Setter Property="IsHitTestVisible" Value="False" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="avalonDockControls:AnchorablePaneTitle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2,2,0,0"
                            Padding="0,4,0,4">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                VerticalAlignment="Center"
                                Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                Focusable="False"
                                Grid.Column="1"
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <Image x:Name="PART_ImgMenuPin" Source="/AvalonDock.Themes.Expression;component/Images/PinMenu.png"/>
                            </avalonDockControls:DropDownButton>

                            <Button x:Name="PART_AutoHidePin" 
                                Grid.Column="2" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Visibility.Hidden}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                                <Image x:Name="PART_ImgAutoHidePin" Source="/AvalonDock.Themes.Expression;component/Images/PinAutoHide.png"/>
                            </Button>

                            <Button x:Name="PART_HidePin" 
                                Grid.Column="3" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                    >
                                <Image x:Name="PART_ImgHidePin" Source="/AvalonDock.Themes.Expression;component/Images/PinClose.png"/>
                            </Button>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor5}"/>
                        </Trigger>                        
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="LayoutTransform" TargetName="PART_AutoHidePin">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgMenuPin" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgMenuPin" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_AutoHidePin" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgAutoHidePin" Value="/AvalonDock.Themes.Expression;component/Images/PinAutoHide_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_HidePin" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgHidePin" Value="/AvalonDock.Themes.Expression;component/Images/PinClose_Light.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorSideTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel 
                        MinWidth="4"
                        MinHeight="4"
                        Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={StaticResource AnchorSideToOrientationConverter}}"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorGroupTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.LayoutTransform>
                <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Model.Parent.Side, Converter={StaticResource AnchorSideToAngleConverter}}"/>
            </ItemsControl.LayoutTransform>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
        <Border 
            x:Name="Bd"
            Background="{DynamicResource AvalonDock_Expression_BaseColor4}"
            CornerRadius="3,3,0,0"
            Margin="0,4,2,0"
            Padding="2">
                <ContentPresenter 
                    TextElement.Foreground="{DynamicResource AvalonDock_Expression_BaseColor2}"
                    Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                    ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                    ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Side" Value="Right">
                <Setter Property="CornerRadius" Value="0,0,3,3" TargetName="Bd"/>
                <Setter Property="Margin" Value="0,0,2,4" TargetName="Bd"/>
            </Trigger>
            <Trigger Property="Side" Value="Bottom">
                <Setter Property="CornerRadius" Value="3,3,0,0" TargetName="Bd"/>
                <Setter Property="Margin" Value="2,4,0,0" TargetName="Bd"/>
            </Trigger>
            <Trigger Property="Side" Value="Top">
                <Setter Property="CornerRadius" Value="0,0,3,3" TargetName="Bd"/>
                <Setter Property="Margin" Value="0,0,2,4" TargetName="Bd"/>
            </Trigger>            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="Selector.IsSelected" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor10}" TargetName="Bd"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
                    <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
                        <Path x:Name="PART_PreviewBox" Fill="AliceBlue" StrokeThickness="2" Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Grid x:Name="PART_DockingManagerDropTargets" >
                            <Border x:Name="PART_DockingManagerDropTargetLeft" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="10"/>
                            <Border x:Name="PART_DockingManagerDropTargetRight" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="10"/>
                            <Border x:Name="PART_DockingManagerDropTargetBottom" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="10"/>
                            <Border x:Name="PART_DockingManagerDropTargetTop" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="10"/>
                        </Grid>
                        <Grid x:Name="PART_AnchorablePaneDropTargets">
                            <Border x:Name="PART_AnchorablePaneDropTargetLeft" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="10" Margin="10,0,0,0"/>
                            <Border x:Name="PART_AnchorablePaneDropTargetRight" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="10" Margin="0,0,10,0"/>
                            <Border x:Name="PART_AnchorablePaneDropTargetBottom" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="10" Margin="0,10,0,0"/>
                            <Border x:Name="PART_AnchorablePaneDropTargetTop" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="10" Margin="0,0,0,10"/>
                            <Border x:Name="PART_AnchorablePaneDropTargetInto" VerticalAlignment="Center" HorizontalAlignment="Center" Width="0" Height="0"/>
                        </Grid>
                        <Grid x:Name="PART_DocumentPaneDropTargets">
                            <Border x:Name="PART_DocumentPaneDropTargetLeft" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="10" Margin="10,0,0,0"/>
                            <Border x:Name="PART_DocumentPaneDropTargetRight" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="10" Margin="0,0,10,0"/>
                            <Border x:Name="PART_DocumentPaneDropTargetBottom" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="10" Margin="0,10,0,0"/>
                            <Border x:Name="PART_DocumentPaneDropTargetTop" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="10" Margin="0,0,0,10"/>
                            <Border x:Name="PART_DocumentPaneDropTargetInto" VerticalAlignment="Center" HorizontalAlignment="Center" Width="0" Height="0"/>
                        </Grid>

                        <Grid x:Name="PART_DocumentPaneFullDropTargets">
                            <Border x:Name="PART_DocumentPaneFullDropTargetLeft" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="10" Margin="15,0,0,0"/>
                            <Border x:Name="PART_DocumentPaneFullDropTargetRight" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="10" Margin="0,0,15,0"/>
                            <Border x:Name="PART_DocumentPaneFullDropTargetBottom" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="10" Margin="0,15,0,0"/>
                            <Border x:Name="PART_DocumentPaneFullDropTargetTop" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="10" Margin="0,0,0,15"/>
                            <Border x:Name="PART_DocumentPaneFullDropTargetInto" VerticalAlignment="Center" HorizontalAlignment="Center" Width="0" Height="0"/>

                            <Border x:Name="PART_DocumentPaneDropTargetLeftAsAnchorablePane" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="15"/>
                            <Border x:Name="PART_DocumentPaneDropTargetRightAsAnchorablePane" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="15"/>
                            <Border x:Name="PART_DocumentPaneDropTargetBottomAsAnchorablePane" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Height="15"/>
                            <Border x:Name="PART_DocumentPaneDropTargetTopAsAnchorablePane" VerticalAlignment="Top" HorizontalAlignment="Stretch" Height="15"/>

                        </Grid>

                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AvalonDock_Expression_DocumentHeaderTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_AnchorableHeaderTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Image x:Name="icon" Source="{Binding IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform"/>
            <TextBlock x:Name="title" Margin="4,0,0,0" Text="{Binding Title}" TextTrimming="CharacterEllipsis" Grid.Column="1"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                <Setter Property="Margin" Value="0" TargetName="title"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_DocumentTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_AnchorableTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_IconContentTemplate">
        <Image Source="{Binding IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform"/>
    </DataTemplate>

    <ContextMenu x:Key="AvalonDock_Expression_AnchorableContextMenu">
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" 
                Command="{Binding Path=FloatCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" 
                Command="{Binding Path=DockCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" 
                Command="{Binding Path=DockAsDocumentCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" 
                Command="{Binding Path=AutoHideCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" 
                Command="{Binding Path=CloseCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
    </ContextMenu>

    <ContextMenu x:Key="AvalonDock_Expression_DocumentContextMenu">
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Close}" 
                  Command="{Binding Path=CloseCommand}"
                  Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" 
                Command="{Binding Path=CloseAllButThisCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Float}" 
                Command="{Binding Path=FloatCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" 
                Command="{Binding Path=DockAsDocumentCommand}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}" 
                Command="{Binding Path=NewHorizontalTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
            <Image Source="/AvalonDock;component/Themes/Aero/Images/HTabGroup.png" Stretch="Uniform" Width="14"/>
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}" 
                Command="{Binding Path=NewVerticalTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
            <Image Source="/AvalonDock;component/Themes/Aero/Images/VTabGroup.png" Stretch="Uniform" Width="14"/>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}" 
                Command="{Binding Path=MoveToNextTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
        <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}" 
                Command="{Binding Path=MoveToPreviousTabGroupCommand}"
                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"/>
    </ContextMenu>

    <!--DockingManager-->
    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor1}"/>
        <Setter Property="DocumentPaneControlStyle" Value="{StaticResource AvalonDock_Expression_DocumentPaneControlStyle}"/>
        <Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AvalonDock_Expression_AnchorablePaneControlStyle}"/>
        <Setter Property="AnchorSideTemplate" Value="{StaticResource AvalonDock_Expression_AnchorSideTemplate}"/>
        <Setter Property="AnchorGroupTemplate" Value="{StaticResource AvalonDock_Expression_AnchorGroupTemplate}"/>
        <Setter Property="AnchorTemplate" Value="{StaticResource AvalonDock_Expression_AnchorTemplate}"/>
        <Setter Property="DocumentHeaderTemplate" Value="{StaticResource AvalonDock_Expression_DocumentHeaderTemplate}"/>
        <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AvalonDock_Expression_AnchorableHeaderTemplate}"/>
        <Setter Property="DocumentTitleTemplate" Value="{StaticResource AvalonDock_Expression_DocumentTitleTemplate}"/>
        <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AvalonDock_Expression_AnchorableTitleTemplate}"/>
        <Setter Property="AnchorableContextMenu" Value="{StaticResource AvalonDock_Expression_AnchorableContextMenu}"/>
        <Setter Property="DocumentContextMenu" Value="{StaticResource AvalonDock_Expression_DocumentContextMenu}"/>
        <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource AvalonDock_Expression_DocumentHeaderTemplate}"/>
        <Setter Property="IconContentTemplate" Value="{StaticResource AvalonDock_Expression_IconContentTemplate}"/>
        <Setter Property="GridSplitterWidth" Value="4"/>
        <Setter Property="GridSplitterHeight" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0"/>
                            <ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2"/>
                            <ContentPresenter 
                                x:Name="PART_AutoHideArea"
                                Content="{TemplateBinding AutoHideWindow}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--LayoutGridResizerControl-->
    <Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!--<ContentPresenter Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                          ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                          ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                    <avalonDockControls:DropDownControlArea 
                            DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
                            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}" >
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0,2,0,1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="2" Background="Transparent"/>
                                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                              ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                              ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                                <!-- Close button should be moved out to the container style -->
                                <Button 
                                    x:Name="DocumentCloseButton" 
                                    Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Grid.Column="1" 
                                    Margin="1,-5,-3,-6" 
                                    Visibility="Hidden" 
                                    Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}">
                                    <Image x:Name="PART_ImgPinClose" 
                                           Source="/AvalonDock.Themes.Expression;component/Images/PinClose.png"/>
                                </Button>
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=CanClose}" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="DocumentCloseButton"  />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="DocumentCloseButton" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinClose" Value="/AvalonDock.Themes.Expression;component/Images/PinClose_Light.png"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
                    <avalonDockControls:DropDownControlArea 
                            DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}"
                            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                          ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                          ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                                <avalonDockControls:DropDownControlArea 
                                    DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                    DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}"/>

                                <Button x:Name="PART_HidePin" 
                                                Grid.Column="1" 
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                VerticalAlignment="Center"
                                                HorizontalAlignment="Center"
                                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}">
                                    <Image x:Name="PART_ImgHidePin" Source="/AvalonDock.Themes.Expression;component/Images/PinClose.png"/>
                                </Button>

                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsSelected}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_HidePin"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_HidePin"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_HidePin" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgHidePin" Value="/AvalonDock.Themes.Expression;component/Images/PinClose_Light.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border 
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <!--<ContentPresenter 
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                />-->
                            <!--
                              Added ContentTemplate and ContentTemplateSelector 
                              https://github.com/xceedsoftware/wpftoolkit/issues/1525
                            -->
                            <ContentPresenter 
                                Grid.Row="1"
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                              />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_Expression_BaseColor10}"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
                    ResizeBorderThickness="10"
                    CaptionHeight="18"
                    CornerRadius="0"
                    GlassFrameThickness="0"
                    ShowSystemMenu="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder" 
                                BorderThickness="1" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Margin="3">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="18"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Header"
                                        Padding="2,0,2,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Content="{Binding Model.RootDocument, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>


                                        <avalonDockControls:DropDownButton
                                            x:Name="ContextMenuDropdownButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                            Focusable="False"
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            VerticalContentAlignment="Center"
                                            HorizontalContentAlignment="Center"
                                            DropDownContextMenu="{Binding Model.Root.Manager.DocumentContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            DropDownContextMenuDataContext="{Binding Path=RootDocumentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Document_CxMenu_Hint}">
                                            <Image x:Name="PART_ImgPinMenu" Stretch="None" Source="/AvalonDock.Themes.Expression;component/Images/PinMenu.png" Width="13"/>
                                        </avalonDockControls:DropDownButton>

                                        <Button 
                                            x:Name="PART_PinMaximize"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                            Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                            Grid.Column="2">
                                            <Image x:Name="PART_ImgPinMaximize" Source="/AvalonDock.Themes.Expression;component/Images/PinMaximize.png" Width="13" />
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinRestore"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                            Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                            Grid.Column="2">
                                            <Image x:Name="PART_ImgPinRestore" Source="/AvalonDock.Themes.Expression;component/Images/PinRestore.png" Width="13" />
                                        </Button>

                                        <Button 
                                            x:Name="PART_PinClose"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                            Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Command="{Binding Path=RootDocumentLayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                                            Grid.Column="3">
                                            <Image x:Name="PART_ImgPinClose" Source="/AvalonDock.Themes.Expression;component/Images/PinClose.png" Width="13" />
                                        </Button>
                                    </Grid>
                                </Border>
                                <ContentPresenter Content="{TemplateBinding Content}" Grid.Row="1"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Padding" Value="3" TargetName="WindowBorder"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsActive}" Value="true">
                            <Setter Property="Background"
									        Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="ContextMenuDropdownButton" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinMenu" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="ContextMenuDropdownButton" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinMenu" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinMaximize" Value="/AvalonDock.Themes.Expression;component/Images/PinMaximize_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinRestore" Value="/AvalonDock.Themes.Expression;component/Images/PinRestore_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinClose" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinClose" Value="/AvalonDock.Themes.Expression;component/Images/PinClose_Light.png"/>
                        </Trigger>                        

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor1}"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
                    ResizeBorderThickness="10"
                    CaptionHeight="13"
                    CornerRadius="0"
                    GlassFrameThickness="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder" 
                                BorderThickness="2"
                                Padding="3"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor10}">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!--<Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="16"/>
                                </Grid.ColumnDefinitions>-->
                                <ContentPresenter
                                    Content="{TemplateBinding Content}" Grid.Row="1" Grid.ColumnSpan="4"/>
                                <Button 
                                            x:Name="PART_PinMaximize"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Right"
                                            VerticalContentAlignment="Center"
                                            HorizontalContentAlignment="Center"
                                            Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                            Grid.Column="2"
                                    Panel.ZIndex="100">
                                    <Image x:Name="PART_ImgPinMaximize" Source="/AvalonDock.Themes.Expression;component/Images/PinMaximize.png" Width="13"/>
                                </Button>
                                <Button 
                                            x:Name="PART_PinRestore"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Focusable="False"
                                            Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}"
                                            Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Right"
                                            Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                            ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                            Grid.Column="2">
                                    <Image  x:Name="PART_ImgPinRestore" Source="/AvalonDock.Themes.Expression;component/Images/PinRestore.png" Width="13"/>
                                </Button>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Padding" Value="5" TargetName="WindowBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinMaximize" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinMaximize" Value="/AvalonDock.Themes.Expression;component/Images/PinMaximize_Light.png"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_PinRestore" Value="True">
                            <Setter Property="Source" TargetName="PART_ImgPinRestore" Value="/AvalonDock.Themes.Expression;component/Images/PinRestore_Light.png"/>
                        </Trigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor5}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
        <Setter Property="AnchorableStyle">
            <Setter.Value>
                <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                                <Border 
                                    x:Name="Bd"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <avalonDockControls:DropDownButton
                                                x:Name="MenuDropDownButton"
                                                VerticalAlignment="Center"
                                                Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                                Focusable="False"
                                                Grid.Column="1"
                                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                                <Image x:Name="PART_ImgMenuPin" Source="/AvalonDock.Themes.Expression;component/Images/PinMenu.png"/>
                                            </avalonDockControls:DropDownButton>

                                            <Button x:Name="PART_AutoHidePin" 
                                                Grid.Column="2" 
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                VerticalAlignment="Center"
                                                HorizontalAlignment="Center"
                                                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Visibility.Hidden}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                                                <Image x:Name="PART_ImgAutoHidePin" Source="/AvalonDock.Themes.Expression;component/Images/PinAutoHide.png"/>
                                                <Button.LayoutTransform>
                                                    <RotateTransform Angle="90"/>
                                                </Button.LayoutTransform>
                                            </Button>

                                            <Button x:Name="PART_HidePin" 
                                                Grid.Column="3" 
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                VerticalAlignment="Center"
                                                HorizontalAlignment="Center"
                                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                                    >
                                                <Image x:Name="PART_ImgHidePin" Source="/AvalonDock.Themes.Expression;component/Images/PinClose.png"/>
                                            </Button>

                                            <Grid SnapsToDevicePixels="true" Margin="0,2,0,0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="22"/>
                                                </Grid.ColumnDefinitions>
                                                <Border
                                                    x:Name="intBd"
							                          BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor8}"
                                                      CornerRadius="3,0,0,0"
							                          Background="{DynamicResource AvalonDock_Expression_BaseColor8}" 
							                          Padding="2">
                                                    <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                                          ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                                          ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                                                </Border>
                                                <localControls:SplineBorder
                                                    x:Name="intSplineBorder"
                                                    Stroke="{DynamicResource AvalonDock_Expression_BaseColor8}"
           							                Fill="{DynamicResource AvalonDock_Expression_BaseColor8}" 
                                                    Grid.Column="1"/>
                                                <avalonDockControls:DropDownControlArea 
                                                        DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                        DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            </Grid>
                                        </Grid>
                                        <ContentPresenter 
                                            Grid.Row="1"
                                            FlowDirection="{TemplateBinding FlowDirection}"
                                            Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>


                                        <!--<ContentPresenter 
                                            Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                            ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                            ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                            Grid.Row="1"/>-->

                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                                        <Setter Property="Source" TargetName="PART_ImgMenuPin" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                                        <Setter Property="Source" TargetName="PART_ImgMenuPin" Value="/AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" SourceName="PART_AutoHidePin" Value="True">
                                        <Setter Property="Source" TargetName="PART_ImgAutoHidePin" Value="/AvalonDock.Themes.Expression;component/Images/PinAutoHide_Light.png"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" SourceName="PART_HidePin" Value="True">
                                        <Setter Property="Source" TargetName="PART_ImgHidePin" Value="/AvalonDock.Themes.Expression;component/Images/PinClose_Light.png"/>
                                    </Trigger>

                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="AvalonDock_Expression_NavigatorWindowListBoxItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle RadiusY="2" RadiusX="2" Stroke="#8E6EA6F5" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="AvalonDock_Expression_NavigatorWindowListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="FocusVisualStyle" Value="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemFocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="0" SnapsToDevicePixels="true">
                        <Border x:Name="InnerBorder" BorderThickness="0" CornerRadius="1">
                            <ContentPresenter Grid.RowSpan="2" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_NavigatorWindowListBoxItemHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_NavigatorWindowListBoxItemSelectedFill}"/>
                            <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor13}"/>
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}"/>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome
                    ResizeBorderThickness="10"
                    CaptionHeight="16"
                    CornerRadius="0"
                    GlassFrameThickness="4"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
                    <Grid>
                        <Border x:Name="WindowBorder" 
                                BorderThickness="1"
                                CornerRadius="0"
                                Background="{DynamicResource AvalonDock_Expression_BaseColor13}"
                                BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor10}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="54"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Grid Margin="5">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Image 
                                            Source="{Binding SelectedDocument.LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}"
                                            Stretch="None"
                                            Visibility="{Binding SelectedDocument.LayoutElement.IconSource, Converter={StaticResource BoolToVisibilityConverter} }"/>
                                        <TextBlock x:Name="selectedElementTitle"
                                                   Text="{Binding SelectedDocument.LayoutElement.Title}"
                                                   TextTrimming="CharacterEllipsis"
                                                   Grid.Column="1"
                                                   VerticalAlignment="Center"
                                                   FontWeight="Bold"
                                                   Margin="4,0,0,0"/>
                                    </Grid>
                                    <TextBlock x:Name="selectedElementDescription"
                                               Text="{Binding SelectedDocument.LayoutElement.Description}"
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Center"/>
                                </Grid>

                                <Border Grid.Row="1" 
                                        BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor4}"
                                        BorderThickness="1"
                                        Background="{DynamicResource AvalonDock_Expression_BaseColor4}"
                                        MinHeight="200" >
                                    <Grid  Margin="5">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Text="Active Tool Windows" FontWeight="Bold" Margin="0,3,0,4"/>
                                            <ListBox x:Name="PART_AnchorableListBox"
                                                     Grid.Row="1" 
                                                     ItemsSource="{Binding Anchorables}"
                                                     SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}" 
                                                     ItemContainerStyle="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemStyle}"
                                                     Background="Transparent" 
                                                     BorderThickness="0"
                                                     MaxHeight="400">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Margin="0,2,0,2">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16"/>
                                                                <ColumnDefinition Width="150"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Image Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="None"/>
                                                            <TextBlock Text="{Binding LayoutElement.Title}" TextTrimming="CharacterEllipsis" Grid.Column="1" Margin="4,0,0,0"/>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </Grid>
                                        <Grid Grid.Column="1" Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <TextBlock Text="Active Files" FontWeight="Bold" Margin="0,3,0,4"/>
                                            <ListBox 
                                                x:Name="PART_DocumentListBox"
                                                Grid.Row="1" 
                                                ItemsSource="{Binding Documents}" 
                                                SelectedItem="{Binding SelectedDocument, Mode=TwoWay}" 
                                                ItemContainerStyle="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemStyle}"
                                                Background="Transparent" 
                                                BorderThickness="0" 
                                                MaxHeight="400">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Margin="0,2,0,2">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16"/>
                                                                <ColumnDefinition Width="150"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Image Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="None"/>
                                                            <TextBlock Text="{Binding LayoutElement.Title}" TextTrimming="CharacterEllipsis" Grid.Column="1" Margin="4,0,0,0"/>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                                <ListBox.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <WrapPanel Orientation="Vertical"/>
                                                    </ItemsPanelTemplate>
                                                </ListBox.ItemsPanel>
                                            </ListBox>
                                        </Grid>
                                    </Grid>
                                </Border>

                                <Grid Grid.Row="2" Margin="5">
                                    <TextBlock Text="{Binding SelectedDocument.LayoutElement.ToolTip}" VerticalAlignment="Center"/>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
							Property="SelectedDocument"
							Value="{x:Null}">
                            <Setter
								Property="Text"
								Value="{Binding SelectedAnchorable.LayoutElement.Title}"
								TargetName="selectedElementTitle" />
                            <Setter
								Property="Text"
								Value="{x:Null}"
								TargetName="selectedElementDescription" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
      Re-styling this in AvalonDock since the menu on the drop-down button for more documents is otherwise black
      BugFix for Issue http://avalondock.codeplex.com/workitem/15743
      -->
    <Style TargetType="{x:Type avalonDockControls:ContextMenuEx}" BasedOn="{StaticResource {x:Type ContextMenu}}" />

</ResourceDictionary>
