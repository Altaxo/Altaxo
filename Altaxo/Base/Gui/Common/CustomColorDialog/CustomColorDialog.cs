#region Copyright
/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2007 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using System.Text;
using System.Runtime.InteropServices;
using System.Drawing;
using System.Diagnostics;

using System.Windows.Forms;
	

namespace Altaxo.Gui.Common
{
	/// <summary>
	/// Summary description for CustomColorDialog.
	/// </summary>
	public class CustomColorDialog : IDisposable
	{
		// the CHOOSECOLOR structure, used to control the appearance and behaviour of the OpenFileDialog
		private ChooseColor							_cc;
		// the slider control to change the alpha values
		private AlphaSlider							_sliderAlpha;
		// the textbox to show current alpha value
		private TextBox								_textAlpha;
		// the panel to contain the slider and text box
		private Panel								_panelAlpha;
		// final color value
		private System.Drawing.Color _color;

		/// <summary>
		/// Sets up the data structures necessary to display the CustomColorDialog
		/// </summary>
		public CustomColorDialog( IntPtr	handle )
		{
			// create the ChooseColor structure to pass to WinAPI
			_cc.lStructSize = Marshal.SizeOf( _cc );
			_cc.lpfnHook = new CCHookProc(MyHookProc);								//hook function 
			_cc.Flags = ChooseColorFlags.FullOpen | ChooseColorFlags.EnableHook;	//enable hook
			_cc.hwndOwner = handle;													//set the owner window
			Int32	temp = 0;
			IntPtr CustColor = Marshal.AllocCoTaskMem( 16 * Marshal.SizeOf(temp));	

			//fill in the value to load custom colors with these values
			_cc.lpCustColors = CustColor;											//set the custom color buffer


			// create the container window to keep the alpha slider and text box controls
			_panelAlpha = new Panel();
			_sliderAlpha = new AlphaSlider();
			_textAlpha	= new TextBox();

			_panelAlpha.Controls.Add( _sliderAlpha );
			_panelAlpha.Controls.Add( _textAlpha );

			_panelAlpha.BorderStyle = BorderStyle.None;
			_panelAlpha.Width = 25;
			_panelAlpha.Height = 268;

			_sliderAlpha.Height = 240;
			_sliderAlpha.Dock = DockStyle.Fill;

			_textAlpha.Height = 50;
			_textAlpha.Width  = 10;
			_textAlpha.Dock = DockStyle.Bottom;

		}

		/// <summary>
		/// The finalizer will release the unmanaged memory, if I should forget to call Dispose
		/// </summary>
		~CustomColorDialog()
		{
			Dispose( false );
		}

		/// <summary>
		/// Display the ChooseColor dialog and allow user interaction
		/// </summary>
		/// <returns>true if the user clicked OK, false if they clicked cancel (or close)</returns>
		public bool Show()
		{
			return NativeMethods.ChooseColor( ref _cc );
		}

		/// <summary>
		/// The hook procedure for window messages generated by the FileOpenDialog
		/// </summary>
		/// <param name="hWnd">the handle of the window at which this message is targeted</param>
		/// <param name="msg">the message identifier</param>
		/// <param name="wParam">message-specific parameter data</param>
		/// <param name="lParam">mess-specific parameter data</param>
		/// <returns></returns>

		
		public IntPtr MyHookProc( IntPtr hWnd, UInt16 msg, Int32 wParam, Int32 lParam )
		{
			// return if invalid window
			if (hWnd == IntPtr.Zero)
				return IntPtr.Zero;

			//the message passed by AlphaSlider control
			if( msg == 0x5050 )
			{
				//update the text box value
				Trace.WriteLine(wParam);
				_textAlpha.Text = wParam.ToString();
			}
				

			//this is total hack
			//I could not find the message posted by ChooColor dialog when user presses OK
			//this I found the last message sent and using it
			//TODO: find the correct message as documented i.e. COLOROKSTRING 
			if( msg == 0xC072 /*==COLOROKSTRING*/)
			{
				//get the current ChooseColor structure
				IntPtr ipNotify = new IntPtr( lParam );
				ChooseColor cc = (ChooseColor)Marshal.PtrToStructure( ipNotify, typeof(ChooseColor) );
				IntPtr hWndParent = NativeMethods.GetParent( hWnd );

				//extract the RGB values from structure
				int R = (char )(cc.rgbResult);
				int G = (char )(((int)(cc.rgbResult)) >> 8);
				int B = (char )(cc.rgbResult >> 16);

				//the typecase problem 
				//TODO: write the C# version of GetRValue, GetGValue, GetBValue
				if( R > 256 )
					R = R/257;

				if( G > 256 )
					G /= 257;

				//get the alpha value from slider control
				_color = Color.FromArgb(_sliderAlpha.Value,R, G, B);
				Trace.WriteLine(_color);
			}

			// Behaviour is dependant on the message received
			switch( msg )
			{
					// We're not interested in every possible message; just return a NULL for those we don't care about
				default:
				{
					return IntPtr.Zero;
				}
			

				// WM_INITDIALOG - at this point the ChooseColorDialog exists, so we pull the user-supplied control
				// into the FileOpenDialog now, using the SetParent API.
				case WindowMessage.InitDialog:
				{
					//set the parent window of slider control to recieve change in value messages
					_sliderAlpha.SetParent(hWnd);

					//increase the width of the default dialog box
					//place the slider and text box controls on the right most
					POINT topLeft = new POINT();
					POINT bottomRight = new POINT();
					IntPtr ipNotify = new IntPtr( lParam );
					ChooseColor cc = (ChooseColor)Marshal.PtrToStructure( ipNotify, typeof(ChooseColor) );
					IntPtr hWndParent = NativeMethods.GetParent( hWnd );
					NativeMethods.SetParent( _panelAlpha.Handle, hWnd);
					RECT rc = new RECT();
					NativeMethods.GetWindowRect( hWnd, ref rc );
					topLeft.X = rc.right;
					topLeft.Y = rc.top;
					NativeMethods.ScreenToClient( hWnd, ref topLeft );
					bottomRight.X = rc.right;
					bottomRight.Y = rc.bottom;
					NativeMethods.ScreenToClient( hWnd, ref bottomRight );

					Rectangle rcClient = _panelAlpha.ClientRectangle;
					NativeMethods.MoveWindow( hWnd, rc.left, rc.top, bottomRight.X+rcClient.Width+10, bottomRight.Y+28, true );
					
					return IntPtr.Zero;
				}
					// WM_SIZE - the OpenFileDialog has been resized, so we'll resize the content and user-supplied
					// panel to fit nicely
				case WindowMessage.Size:
				{
					PlaceCustomControls( hWnd );
					return IntPtr.Zero;
				}

			}
		}

		/// <summary>
		/// Layout the content of the ChooseColorDialog, according to the overall size of the dialog
		/// </summary>
		/// <param name="hWnd">handle of window that received the WM_SIZE message</param>
		private void PlaceCustomControls( IntPtr hWnd )
		{
			IntPtr hWndParent = NativeMethods.GetParent( hWnd );
			NativeMethods.SetParent( _panelAlpha.Handle, hWnd);
			RECT rc = new RECT();
			NativeMethods.GetWindowRect( hWnd, ref rc );
			POINT topLeft;
			topLeft.X = rc.right;
			topLeft.Y = rc.top;
			NativeMethods.ScreenToClient( hWnd, ref topLeft );
			POINT bottomRight;
			bottomRight.X = rc.right;
			bottomRight.Y = rc.bottom;
			NativeMethods.ScreenToClient( hWnd, ref bottomRight );

			Rectangle rcClient = _panelAlpha.ClientRectangle;// .ClientRectangle();

			NativeMethods.MoveWindow( _panelAlpha.Handle, rc.right-rc.left-rcClient.Width-10, 0, rcClient.Width, rcClient.Height, true );
		}

		/// <summary>
		/// returns the path currently selected by the user inside the OpenFileDialog
		/// </summary>
		public System.Drawing.Color SelectedColor
		{
			get
			{
				return _color;//Marshal.PtrToStringUni( _fileNameBuffer );
			}
		}

		public System.Drawing.Color IntialColor
		{
			get
			{
				return IntialColor;
			}
			set
			{
				IntialColor = value;
			}
		}

		#region IDisposable Members

		public void Dispose()
		{
			Dispose( true );
		}

		/// <summary>
		/// Free any unamanged memory used by this instance of OpenFileDialog
		/// </summary>
		/// <param name="disposing">true if called by Dispose, false otherwise</param>
		public void Dispose( bool disposing )
		{
			if( disposing )
			{
				GC.SuppressFinalize( this );
			}

		}

		#endregion
	}
}
