<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="General.PolynomialFit.Description" xml:space="preserve">
    <value>This implements a polynomial fit. Please use the polynomial fit from the analysis menu instead of this unless you need to set some parameters fixed. The fit function is defined as:
$$
y(x) = a_0 + a_1 x + a_2 x^2 + ... + a_n x^n
$$
in which x is the independent variable, y is the dependent variable, and $ a_0 ... a_n $ are the parameters.</value>
  </data>
  <data name="IndependentVariable.FrequencyAsOmega" xml:space="preserve">
    <value>with the frequency $f$ being the independent variable  ($\omega = 2 \pi f$ is calculated from $f$), </value>
  </data>
  <data name="IndependentVariable.Omega" xml:space="preserve">
    <value>with the circular frequency $\omega$  being the independent variable, </value>
  </data>
  <data name="Materials.VogelFulcherLaw" xml:space="preserve">
    <value># Arrhenius law

The Arrhenius law describes the dependence of (chemical) reaction rates on the temperature.  
The function is defined as:
$$
y(T) = y_0 \exp\left(\frac{-E_a}{k T})
$$
in which $y$ is the reaction rate (dependent variable), $T$ is the absolute (!) temperature (independent variable), and $k$ is a constant, usually the Boltzmann constant, but it depends on the options you choose for the fit (see below).

The parameters are: 
- $y_0$ is the reaction rate in the limit $T\rightarrow\infty$
- $E_a$ is the activation energy.

Please note that for large temperature intervals, the reaction rate can vary over some orders of magnitude. This will lead to a poor fit, because the data points with small values of the reaction rate then contribute too little to the fit. 

In order to get a good fit nevertheless, it is neccessary  that you logarithmize your data points before they get fitted, and choose the `DecadicLogarithm` dependent variable option on this fit.

*Options for the independent variable x*:
- Kelvin: x is $T$ in Kelvin
- AsInverseKelvin: x is $\frac{1}{T}$
- DegreeCelsius: x is in °C
- DegreeFahrenheit: x is in °F


*Options for the dependent variable y*:
- Original: the original value of $y$ (the rate)
- Inverse:  the inverse of the rate, i.e. $\frac{1}{y}$
- Negative: the negative rate $-y$
- DecadicLogarithm: $\log_{10}(y)$
- NegativeDecadicLogarithm: $-\log_{10}(y)$
- NaturalLogarithm: $\ln(y)$
- NegativeNaturalLogarithm: $-\ln(y)$



*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..</value>
  </data>
  <data name="Relaxation.DielectricSusceptibility.Introduction" xml:space="preserve">
    <value>This implements the dielectric susceptibility function</value>
  </data>
  <data name="Relaxation.Generic.Modulus.Formula" xml:space="preserve">
    <value>$$
M' + i M'' = M_{0}+(M_{\infty}-M_{0})\int_0^{\infty}\exp(-i \omega t')\frac{d\Phi(t)}{dt}dt'

$$

or with flow term (for $\eta=0$ the two equations are equivalent):

$$
M' + i M'' = \frac{1}{\frac{1}{M_{0}+(M_{\infty}-M_{0})\int_0^{\infty}\exp(-i \omega t')\frac{d\Phi(t)}{dt}dt'}-\frac{i\eta}{\omega}}

$$</value>
  </data>
  <data name="Relaxation.HavriliakNegami.Modulus.Formula" xml:space="preserve">
    <value>
$$
M' - i M'' = M_{\infty} + (M_{0}-M_{\infty})\frac{1}{(1+(i \tau \omega)^{\alpha})^{\gamma}} 
$$

or with a flow term (both equations are equivalent if $\eta=0$) :

$$
M' - i M'' = \frac{1}{\frac{1}{M_{\infty} + (M_{0}-M_{\infty})\frac{1}{(1+(i \tau \omega)^{\alpha})^{\gamma}} } + \frac{i \eta}{\omega}}
$$
</value>
  </data>
  <data name="Relaxation.HavriliakNegamiSusceptibility.Dielectrics.Formula" xml:space="preserve">
    <value>
$$
\varepsilon' - i \varepsilon'' = \varepsilon_{\infty} + \frac{\Delta\varepsilon}{(1+(i \tau \omega)^{\alpha})^{\gamma}} - \frac{i \sigma}{\omega \varepsilon_0}
$$
</value>
  </data>
  <data name="Relaxation.HavriliakNegamiSusceptibility.Dielectrics.Quantities" xml:space="preserve">
    <value> and $\varepsilon'$ and $\varepsilon''$ being the dependent variables, namely the real and negative imaginary part of the dielectric function.

The parameters are:

- $\varepsilon_{\infty}$: high frequency dielectric value (permittivity)
- $\Delta\varepsilon$: step height of dielectric function
- $\tau$: retardation time
- $\alpha$, $\gamma$: shape exponents
- $\sigma$: specific electrical conductivity [S/m]</value>
  </data>
  <data name="Relaxation.HavriliakNegamiSusceptibility.General.Formula" xml:space="preserve">
    <value>
$$
\chi' - i \chi'' = \chi_{\infty} + \frac{\Delta\chi}{(1+(i \tau \omega)^{\alpha})^{\gamma}} - \frac{i \eta}{\omega }
$$
</value>
  </data>
  <data name="Relaxation.HavriliakNegamiSusceptibility.General.Quantities" xml:space="preserve">
    <value> and $\chi'$ and $\chi''$ being the dependent variables, namely the real and negative imaginary part of the dynamic susceptibility.

The parameters are:

- $\chi_{\infty}$: high frequency susceptibility value
- $\Delta\chi$: step height of susceptibility function
- $\tau$: retardation time
- $\alpha$, $\gamma$: shape exponents
- $\eta$: generalized flow term, e.g. inverse (!) viscosity</value>
  </data>
  <data name="Relaxation.HavriliakNegamiSusceptibility.Introduction" xml:space="preserve">
    <value>This implements the Havriliak-Negami function
</value>
  </data>
  <data name="Relaxation.KohlrauschKernel.Formula" xml:space="preserve">
    <value>
$$
\Phi(t) = \exp\left(-(\frac{t}{\tau})^{\beta})
$$
</value>
  </data>
  <data name="Relaxation.KohlrauschSusceptibility.General.Formula" xml:space="preserve">
    <value>
$$
\chi' - i \chi'' = \chi_{\infty} + \Delta\chi \int_0^{\infty} \exp(- i \omega t') \frac{d\Phi}{d t} dt' - \frac{i \eta}{\omega}
$$
</value>
  </data>
  <data name="Relaxation.KohlrauschSusceptibility.Part2" xml:space="preserve">
    <value>
based on the Fourier transform of the (derivative of the) Kohlrausch function:
</value>
  </data>
  <data name="Relaxation.KohlrauschSusceptibility.Part3" xml:space="preserve">
    <value> and $\chi'$ and $\chi''$ being the dependent variables, namely the real and negative imaginary part of the dynamic susceptibility.

The parameters are:

- $\chi_{\infty}$ : high frequency susceptibility value
- $\Delta\chi$ : step height of the susceptibility function
- $\tau$ : retardation time
- $\beta$ : shape exponent ($ 0 &lt; \beta \le 1 $)
- $\eta$ : generalized flow term, for instance inverse (!) viscosity</value>
  </data>
  <data name="Relaxation.ModulusRelaxation.Introduction" xml:space="preserve">
    <value>This function models the complex dynamic modulus in dependence on the frequency as:
</value>
  </data>
  <data name="Relaxation.ModulusRelaxation.Part3" xml:space="preserve">
    <value>and $M'$ and $M''$ being the dependent variables, namely the real and imaginary part of the complex dynamic modulus.

The parameters are:

- $M_0$: low frequency modulus limit
- $M_{\infty}$: high frequency modulus limit
- $\tau$: relaxation time
- $\beta$: shape exponent ($ 0&lt;\beta\le 1 $)
- $\eta$: generalized flow term, for instance inverse (!) viscosity</value>
  </data>
  <data name="Relaxation.ModulusRetardation.HavriliakNegami.Formula" xml:space="preserve">
    <value>
$$
M' - i M'' = \frac{1}{\frac{1}{M_{\infty}} + (\frac{1}{M_{0}}-\frac{1}{M_{\infty}}) \frac{1}{(1+(i \tau \omega)^{\alpha})^{\gamma}} - \frac{i \eta}{\omega }}
$$
</value>
  </data>
  <data name="Relaxation.ModulusRetardation.Introduction" xml:space="preserve">
    <value>This implements the modulus function as the scaled inverse of the generic susceptibility:
</value>
  </data>
  <data name="Relaxation.ModulusRetardation.Part3" xml:space="preserve">
    <value> and $M'$ and $M''$ being the dependent variables, namely the real and imaginary part of the dynamic modulus.

The parameters are:

- $M_0$: low frequency modulus limit
- $M_{\infty}$: high frequency modulus limit
- $\tau$: retardation time (not relaxation time!)
- $\beta$: shape exponent ($ 0&lt;\beta\le 1 $)
- $\eta$: generalized flow term, for instance inverse (!) viscosity</value>
  </data>
  <data name="Relaxation.Susceptibility.Dielectrics.Formula" xml:space="preserve">
    <value>
$$
\varepsilon' - i \varepsilon'' = \varepsilon_{\infty} + \Delta\varepsilon \int_0^{\infty} \exp(- i \omega t') \frac{d\Phi}{d t} dt' - \frac{i \sigma}{\varepsilon_0 \omega}
$$
</value>
  </data>
  <data name="Relaxation.Susceptibility.Introduction" xml:space="preserve">
    <value>This implements the susceptibility function:
</value>
  </data>
  <data name="Retardation.Generic.Modulus.Formula" xml:space="preserve">
    <value>
$$
M' + i M'' = \frac{1}{\frac{1}{M_{\infty}}+(\frac{1}{M_{0}}-\frac{1}{M_{\infty}})\int_0^{\infty}\exp(-i \omega t')\frac{d\Phi(t)}{dt}dt'-\frac{i\eta}{\omega}}

$$
</value>
  </data>
  <data name="Transitions.FermiDiracTransition.Core" xml:space="preserve">
    <value># Fermi-Dirac transition

The core of the Fermi-Dirac transition is the following function, defined in the interval [0, 1], which assumes the value of 1 for $p=0$ and 0 for $p=1$:

$$
  f(p) = \frac{\exp((1-p_c)/w)) - \exp((p-p_c)/w)}{\exp((1-p_c)/w) - \exp((0-p_c)/w)} \times
  \frac{1 + \exp((0-p_c)/w)}{1 + \exp((p-p_c)/w)}
$$

in which:

- $p_c$ : location of the transition (0..1)
- $w$ : width parameter

It is used e.g. to model the percolation behavior of electrical resistivity in dependence on the concentration $p$ and the critical concentration $p_c$.</value>
  </data>
  <data name="Transitions.FermiDiracTransition.Linear" xml:space="preserve">
    <value>## Linearly scaled transition

The core function is used to model the linearly scaled transition:

$$
g(p) = y_1 + (y_0 -y_1) \times f(p)
$$

which assumes a value of $y_0$ for $p=0$ and $y_1$ for $p=1$.</value>
  </data>
  <data name="Transitions.FermiDiracTransition.Logarithmic" xml:space="preserve">
    <value>## Logarithmically scaled transition

The core function is used to model the logarithmically scaled transition:

$$
g(p) = y_0^{f(p)} \times y_1^{1-f(p)}
$$

which assumes a value of $y_0$ for $p=0$ and $y_1$ for $p=1$.</value>
  </data>
  <data name="Transitions.GeneralEffectiveMedium.Core" xml:space="preserve">
    <value># General effective medium transition

This transition models e.g. the electrical conductivity of conductive particles embedded in a matrix, but is valid for general percolation problems.

The function, which evaluates the property $y$ of the resulting compound is given implicitly by the following equation:

$$
  (1-p) \frac{y_{0}^{1/s} - y^{1/s}}{y_{0}^{1/s} + A y^{1/s}} +
  p \frac{y_{1}^{1/t} - y^{1/t}}{y_{1}^{1/t} + A y^{1/t}} = 0
$$

in which:
- $A = (1-p_c)/p_c)$
- $p_c$ : critical percolation threshold (location of the transition (0..1))
- $p$ : volume concentration of the filler particles (0..1)
- $s, t$ : exponents
- $y_{0}$ : property of the matrix (e.g. electrical conductivity of the matrix)
- $y_{1}$ : property of the filler particles (e.g. electrical conductivity of the filler)
- $y$ : resulting property of the compound (e.g. electrical conductivity of the matrix with filler particles)

The equation has the following properties, which match the percolation theory for concentrations below and above the percolation threshold:

- $y = y_0$ for $p=0$ 
- $y \approx y_0 \left ( \frac{p_c-p}{p_c} \right )^{-s}$ for $p &lt; p_c$
- $y = y_1$ for $p=1$
- $y \approx y_1 \left ( \frac{p-p_c}{1-p_c} \right )^{t}$ for $p &gt; p_c$

In contrast to the separate percolation equations below and above the percolation threshold, the general effective medium transition avoids the divergence near the percolation threshold, and provides a smooth transition between the two equations.</value>
  </data>
  <data name="Transitions.GeneralEffectiveMedium.Log10" xml:space="preserve">
    <value>## Logarithmically scaled transition

Instead of returning $y$ as described above, the function will return $\log_{10}(y)$.</value>
  </data>
  <data name="Transitions.SmoothedPercolation.Core" xml:space="preserve">
    <value># Smoothed percolation

The base of this function are the two percolation equations valid below and above the percolation threshold $p_c$ :

- $y \approx y_0 \left ( \frac{p_c-p}{p_c} \right )^{-s}$ for $p &lt; p_c$ (left side equation)

- $y \approx y_1 \left ( \frac{p-p_c}{1-p_c} \right )^{t}$ for $p &gt; p_c$ (right side equation)

in which:
- $p_c$ : critical percolation threshold (location of the transition (0..1))
- $p$ : volume concentration of the filler particles (0..1)
- $s, t$ : exponents ($s&gt;0$, $t&gt;0$)
- $y_{0}$ : property of the matrix (e.g. electrical conductivity of the matrix, $y_0&gt;0)$)
- $y_{1}$ : property of the filler particles (e.g. electrical conductivity of the filler, $y_1&gt;0$)
- $y$ : resulting property of the compound (e.g. electrical conductivity of the matrix with filler particles)


Because both equations diverge at $p=p_c$, we need to smooth that location.
For this we use somewhat stricter boundaries:

- Calculate the approximate logarithmic step height of the transition by
$$
\ln(y_h/y_l) = \ln(y_1/y_0) - s - t
$$

- Find a $p_1 &lt; p_c$ such that the quotient of the function values of right side and left side approximately match this step height:

$$
 \ln \left ( \frac{ y_1 \left ( \frac{p_2-p_c}{1-p_c} \right )^{t} }{ y_0 \left ( \frac{p_c-p_1}{p_c} \right )^{-s}} \right ) \approx \ln(y_h/y_l)
$$

in which $p_2 = p_c + (p_c-p_1)\frac{t}{s}$ (obviously: $p_2&gt;p_c$).


The value of $p_1$ is then used as the upper boundary of the left side percolation equation:

$y \approx y_0 \left ( \frac{p_c-p}{p_c} \right )^{-s}$ for $p &lt; p_1$


and the value of $p_2$ is used as the lower boundary of the right side percolation equation:

$y \approx y_1 \left ( \frac{p-p_c}{1-p_c} \right )^{t}$ for $p &gt; p_2$

In the interval between $p_1$ and $p_2$, the function values are approximated by a logarithmic function:

$\ln(y) = \ln(y_1) + (\ln(y_2)-\ln(y_1))\frac{p-p_1}{p_2-p_1}$

in which 

- $y_1$ value of $y$ as evaluated by the left side equation at $p=p_1$
- $y_2$ value of $y$ as evaluated by the right side equation at $p=p_2$</value>
  </data>
  <data name="Material.ArrheniusLawRate" xml:space="preserve">
    <value># Arrhenius law (rate)

This Arrhenius law describes the temperature dependence of e.g. reaction rates, typical frequencies, e.g. quantities that increase with increasing temperature.  
The function is defined as:
$$
y(T) = y_0 \exp\left(\frac{-E_a}{k T})
$$
in which $y$ is the reaction rate (dependent variable), $T$ is the absolute (!) temperature (independent variable), and $k$ is a constant, usually the Boltzmann constant, but it depends on the options you choose for the fit (see below).

The parameters are: 
- $y_0$ is the reaction rate in the limit $T\rightarrow\infty$
- $E_a$ is the activation energy.

Please note that for large temperature intervals, the y-value can vary over some orders of magnitude. This will lead to a poor fit, because the data points with small values of the reaction rate then contribute too little to the fit. 

In order to get a good fit nevertheless, it is neccessary  that you logarithmize your data points before they get fitted, and choose the `DecadicLogarithm` dependent variable option on this fit.

*Options for the independent variable x*:
- Kelvin: x is $T$ in Kelvin
- AsInverseKelvin: x is $\frac{1}{T}$
- DegreeCelsius: x is in °C
- DegreeFahrenheit: x is in °F
  
  

*Options for the dependent variable y*:
- Original: the original value of $y$ (the rate)
- Inverse:  the inverse of the rate, i.e. $\frac{1}{y}$
- Negative: the negative rate $-y$
- DecadicLogarithm: $\log_{10}(y)$
- NegativeDecadicLogarithm: $-\log_{10}(y)$
- NaturalLogarithm: $\ln(y)$
- NegativeNaturalLogarithm: $-\ln(y)$

  
  
*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..
  
^^^
![](res:Altaxo.Calc.FitFunctions.Material.ArrheniusLawRate.Fig1.png)
^^^ Fig. 1: Typical plot of an Arrhenius diagram (reaction rate by the inverse temperature). Here the parameters are $y_0=10^{12} s^{-1}$ and $E_a=80000$ J/mol. Please note that if you choose the x-axis to be $ 1/T $ instead of T and the y-axis to be logarithmic, as in this example, the curve becomes a straight line. You can even include the "right" temperatures in °C by adding a second axis at the bottom, with inverse tick spacing and the transformation $x'=-273.15+x$.</value>
  </data>
  <data name="General.ExponentialDecay" xml:space="preserve">
    <value># ExponentialDecay

This function evaluates an exponential decay with one or multiple terms according to

$$
y(x) = y_0 + a_0 \exp\left(\frac{-x}{\tau_0}\right ) + ... + a_{n-1} \exp\left(\frac{-x}{\tau_{n-1}} \right )
$$

in which:

- $y_0$ is the value of the base line (value of y for $x\rightarrow \infty$ )
- $a_0$ .. $a_{n-1}$ are the prefactors of the exponential decay terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty \leq x \leq \infty$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.ExponentialDecay.Fig1.png)
^^^ Fig. 1: Exponential decay with $y_0=1$, $a_0=3$, and $\tau_0=4$.



</value>
  </data>
  <data name="General.ExponentialEquilibration" xml:space="preserve">
    <value># ExponentialEquilibration

This function evaluates an exponential equilibration process with one or multiple terms according to

$$
y(x) = y_0 + a_0 \left [ 1-\exp\left(\frac{-(x-x_0)}{\tau_0}\right ) \right ] + ... + a_{n-1} \left [ 1- \exp\left(\frac{-(x-x_0)}{\tau_{n-1}} \right ) \right ]  | (x &gt; x_0)
$$

and

$$
y(x) = y_0 | (x \leq x_0)
$$

in which:

- $y_0$ is the starting value (and the value for $x \leq x_0$)
- $x_0$ is the starting point of the equilibration process
- $a_0$ .. $a_{n-1}$ are the prefactors of the exponential equilibration terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty \leq x \leq \infty$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.ExponentialEquilibration.Fig1.png)
^^^ Fig. 1: Exponential equilibration with $y_0=1$, $a_0=3$, $x_0=2$ and $\tau_0=4$.
</value>
  </data>
  <data name="General.ExponentialGrowth" xml:space="preserve">
    <value># Exponential growth

This function evaluates an exponential growth with one or multiple terms according to

$$
y(x) = y_0 + a_0 \exp\left(\frac{x}{\tau_0}\right ) + ... + a_{n-1} \exp\left(\frac{x}{\tau_{n-1}} \right )
$$

in which:

- $y_0$ is the value of the base line (value of y for $x\rightarrow {-\infty}$ )
- $a_0$ .. $a_{n-1}$ are the prefactors of the exponential terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty \leq x \leq \infty$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.ExponentialGrowth.Fig1.png)
^^^ Fig. 1: Exponential growth with $y_0=100$, $a_0=3$ and $\tau_0=4$.
</value>
  </data>
  <data name="General.Polynomial" xml:space="preserve">
    <value># Polynomial

This function evaluates an polynomial with one or multiple terms, and both positive and negative exponents, according to

$$
y(x) = a_0 + a_1 x^1 + ... + a_n x^n + b_1 x^{-1} + ... + b_m x^{-m}
$$

in which:

- $a_0 ... a_n$ are the polynomial coefficients for positive exponents $ 0...n $
- $b_1$ ... $b_{m}$ are the polynomial coefficients for negative exponents $-1 .. -m$
- $n$ is the order of the polynom for positive exponents
- $m$ is the order of the polynom for negative exponents

The polynomial orders $n$ and $m$ can be changed by double-clicking on the fit function. The default value is $n=2$ and $m=0$. If some of the terms are not needed, set their corresponding coefficients fixed to zero.

The domain of the function is $-\infty \leq x \leq \infty$. If $m \neq 0$, $x=0$ is excluded.

^^^
![](res:Altaxo.Calc.FitFunctions.General.Polynomial.Fig1.png)
^^^ Fig. 1: Polynomial ($n=3$, $m=0$) with $a_0=1$, $a_1=0$, $a_2=2$ and $a_3=-0.125$.



</value>
  </data>
  <data name="General.PowerLawPrefactor" xml:space="preserve">
    <value># Power law (with pre-factors)

This function evaluates a power law with one or multiple terms according to

$$
y(x) = y_0 + a_0 x^{k_0} + ... + a_{n-1} x^{k_{n-1}}
$$

in which:

- $y_0$ is the value of the base line (value of y for $x=0$ )
- $a_0$ .. $a_{n-1}$ are the pre-factors of the terms
- $k_0$ ... $k_{n-1}$ are the exponents
- $n$ is the number of  terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$. Strictly speaking, the function is a power law only if $y_0=0$ and $n=1$.

The domain of the function is $ 0 \leq x &lt; \infty $ if all $k_0..k_{n-1}$ are positive, or $ 0 &lt; x &lt; \infty $ if some of the exponents are negative.

&gt; **Note:**  
Even if you set the exponents fixed to integer values, the domain of the function is not extended to the full range! Use `Polynomial` instead.

^^^
![](res:Altaxo.Calc.FitFunctions.General.PowerLawPrefactor.Fig2.png)
^^^ Fig. 1: Power law with $y_0=0$, $a_0=3$ and $k_0=2.5$ with linear x- and y-axes.

^^^
![](res:Altaxo.Calc.FitFunctions.General.PowerLawPrefactor.Fig1.png)
^^^ Fig. 2: Power law with the same parameters $y_0=0$, $a_0=3$ and $k_0=2.5$ in a double-logarithmic plot.
</value>
  </data>
  <data name="General.PowerLawRatio" xml:space="preserve">
    <value># Power law (with ratios)

This function evaluates a power law with one or multiple terms according to

$$
y(x) = y_0 +  \left ( \frac{x}{a_0} \right ) ^{k_0} + ... +  \left ( \frac{x}{a_{n-1}} \right )^{k_{n-1}}
$$

in which:

- $y_0$ is the value of the base line (value of y for $x=0$ )
- $a_0$ .. $a_{n-1}$ are the denominators of the terms
- $k_0$ ... $k_{n-1}$ are the exponents
- $n$ is the number of  terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$. Strictly speaking, the function is a power law only if $y_0=0$ and $n=1$.

The domain of the function is $ 0 \leq x &lt; \infty $ if all $k_0..k_{n-1}$ and all $a_0..a_{n-1}$ are positive, $-\infty &lt; x \leq 0$ if all $k_0..k_{n-1}$ are positive and all $a_0..a_{n-1}$ are negative, and, if some of the exponents are negative, the  value $x=0$ is not included.

^^^
![](res:Altaxo.Calc.FitFunctions.General.PowerLawRatio.Fig2.png)
^^^ Fig. 1: Power law (ratio) with $y_0=0$, $a_0=3$ and $k_0=-0.5$ with linear x- and y-axes.

^^^
![](res:Altaxo.Calc.FitFunctions.General.PowerLawRatio.Fig1.png)
^^^ Fig. 2: Power law (ratio) with the same parameters $y_0=0$, $a_0=3$ and $k_0=-0.5$ in a double-logarithmic plot.
</value>
  </data>
  <data name="General.Rational" xml:space="preserve">
    <value># Rational

This function evaluates a rational polynom with one or multiple terms in the nominator and in the denominator according to

$$
y(x) = \frac{a_0 + a_1 x + ... + a_{n} x^{n}}{1 + b_1 x + .. + b_{m} x^{m}}
$$

in which:

- $a_0$ .. $a_{n}$ are the coefficients of the nominator polynom
- $b_1$ .. $b_{m}$ are the coefficients of the denominator polynom
- $n$ is the polynomial order of the nominator polynom
- $m$ is the polynomial order of the denominator polynom

In order to avoid covariance between the 0th order coefficients $a_0$ and $b_0$, in this formula $b_0$ is set to $b_0=1$. Please use `RationalInverse` if a free value of $b_0$ is preferred.

The polynomial orders $n$ and $m$ can be changed by double-clicking on the fit function. The default value is $n=1$ and $m=1$.

The domain of the function is $ -\infty &lt; x &lt; \infty $, with some points (poles) excluded, at which the denominator becomes zero.

^^^
![](res:Altaxo.Calc.FitFunctions.General.Rational.Fig1.png)
^^^ Fig. 1: Rational $\frac{2+x}{1+2x}$, i.e. with $n=m=1$, $a_0=2$, $a_1=1$ and $b_1=2$.

---</value>
  </data>
  <data name="General.RationalInverse" xml:space="preserve">
    <value># RationalInverse

This function evaluates a rational polynom with one or multiple terms in the nominator and in the denominator according to

$$
y(x) = \frac{1 + a_1 x + ... + a_{n} x^{n}}{b_0 + b_1 x + .. + b_{m} x^{m}}
$$

in which:

- $a_1$ .. $a_{n}$ are the coefficients of the nominator polynom
- $b_0$ .. $b_{m}$ are the coefficients of the denominator polynom
- $n$ is the polynomial order of the nominator polynom
- $m$ is the polynomial order of the denominator polynom

In order to avoid covariance between the 0^th^ order coefficients $a_0$ and $b_0$, in this formula $a_0$ is set to $a_0=1$. Please use `Rational` if a free value of $a_0$ is preferred.

The polynomial orders $n$ and $m$ can be changed by double-clicking on the fit function. The default value is $n=0$ and $m=1$.

The domain of the function is $ -\infty &lt; x &lt; \infty $, with some points (poles) excluded, at which the denominator becomes zero.

^^^
![](res:Altaxo.Calc.FitFunctions.General.RationalInverse.Fig1.png)
^^^ Fig. 1: RationalInverse $\frac{1+3x}{-2+x}$, i.e. with $n=m=1$, $a_1=3$, $b_0=-2$ and $b_1=1$.

---</value>
  </data>
  <data name="General.StretchedExponentialDecay" xml:space="preserve">
    <value># Stretched exponential decay
(also known as **Kohlrausch decay**)

This function evaluates a stretched exponential decay process starting at $x=x_0$ with one or multiple terms according to

$$
y(x) = y_0 + a_0 \exp\left(-(\frac{x-x_0}{\tau_0})^{\beta_0} \right ) + ... + a_{n-1} \exp\left(-(\frac{x-x_0}{\tau_{n-1}})^{\beta_{n-1}} \right )   | (x &gt; x_0)
$$

and

$$
y(x) = y_0 + \sum_{0}^{n-1} a_i  | (x \leq x_0)
$$

in which:

- $x_0$ is the starting point of the decay process. If this value is known, you should enter the value and set this parameter to fixed.
- $y_0$ is the value for $x \rightarrow \infty$
- $a_0$ .. $a_{n-1}$ are the pre-factors of the exponential terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $\beta_0$ ... $\beta_{n-1}$ are the exponents, usually in the range $ 0 &lt; \beta \leq 1 $
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty &lt; x &lt; \infty$. The function values are set to constant for $x&lt;x_0$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.StretchedExponentialDecay.Fig1.png)
^^^ Fig. 1: Stretched exponential decay with $x_0=0$, $y_0=1$, $a_0=3$, $\tau_0=4$, and $\beta=0.5$ (green) in comparison to a 'normal' exponential decay function with the same parameters (grey). Note that the 'normal' exponential decay has varying function values both for $x&lt;0$ and $x&gt;0$, whereas the stretched exponential decay is constant for $x&lt;x_0$.
---
</value>
  </data>
  <data name="General.StretchedExponentialEquilibration" xml:space="preserve">
    <value># Stretched exponential equilibration

This function evaluates a stretched exponential equilibration process with one or multiple terms according to

$$
y(x) = y_0 + a_0 \left [ 1-\exp\left(-(\frac{x-x_0}{\tau_0})^{\beta_0} \right ) \right ] + ... + a_{n-1} \left [ 1- \exp\left(-(\frac{x-x_0}{\tau_{n-1}})^{\beta_{n-1}} \right ) \right ]  | (x &gt; x_0)
$$

and

$$
y(x) = y_0 | (x \leq x_0)
$$

in which:

- $x_0$ is the starting point of the equilibration process. If this value is known, you should enter the value and set this parameter to fixed.
- $y_0$ is the starting value (and the value for $x \leq x_0$)
- $a_0$ .. $a_{n-1}$ are the pre-factors of the exponential equilibration terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $\beta_0$ ... $\beta_{n-1}$ are the exponents, usually in the range $ 0 &lt; \beta \leq 1 $
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty &lt; x &lt; \infty$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.StretchedExponentialEquilibration.Fig1.png)
^^^ Fig. 1: Stretched exponential equilibration with  $x_0=2$, $y_0=1$, $a_0=3$, $\tau_0=4$, and $\beta=0.5$ (green) in comparison to a 'normal' exponential equilibration function with the same parameters (grey).
---
</value>
  </data>
  <data name="General.StretchedExponentialGrowth" xml:space="preserve">
    <value># Stretched exponential growth

This function evaluates a stretched exponential growth process starting at $x=x_0$ with one or multiple terms according to

$$
y(x) = y_0 + a_0 \exp\left((\frac{x-x_0}{\tau_0})^{\beta_0} \right ) + ... + a_{n-1} \exp\left((\frac{x-x_0}{\tau_{n-1}})^{\beta_{n-1}} \right )   | (x &gt; x_0)
$$

and

$$
y(x) = y_0 + \sum_{0}^{n-1} a_i  | (x \leq x_0)
$$

in which:

- $x_0$ is the starting point of the growth process. If this value is known, you should enter the value and set this parameter to fixed.
- $y_0$ is an offset value
- $a_0$ .. $a_{n-1}$ are the pre-factors of the exponential terms
- $\tau_0$ ... $\tau_{n-1}$ are the characteristic times
- $\beta_0$ ... $\beta_{n-1}$ are the exponents, usually in the range $ 0 &lt; \beta \leq 1 $
- $n$ is the number of exponential terms

The number of terms $n$ can be changed by double-clicking on the fit function. The default value is $n=1$.

The domain of the function is $-\infty &lt; x &lt; \infty$. The function values are set to constant for $x&lt;x_0$.

^^^
![](res:Altaxo.Calc.FitFunctions.General.StretchedExponentialGrowth.Fig1.png)
^^^ Fig. 1: Stretched exponential growth with $x_0=0$, $y_0=-2$, $a_0=3$, $\tau_0=4$, and $\beta=0.5$ (green) in comparison to a 'normal' exponential growth function with the same parameters (grey). Note that the 'normal' exponential growth has varying function values both for $x&lt;0$ and $x&gt;0$, whereas the stretched exponential growth is constant for $x&lt;x_0$.
---
</value>
  </data>
  <data name="Materials.ArrheniusLawRate" xml:space="preserve">
    <value># Arrhenius law (rate)

This Arrhenius law describes the temperature dependence of e.g. reaction rates, typical frequencies, e.g. quantities that increase with increasing temperature.  
The function is defined as:
$$
y(T) = y_0 \exp\left(\frac{-E_a}{k T})
$$
in which $y$ is the reaction rate (dependent variable), $T$ is the absolute (!) temperature (independent variable), and $k$ is a constant, usually the Boltzmann constant, but it depends on the options you choose for the fit (see below).

The parameters are: 
- $y_0$ is the reaction rate in the limit $T\rightarrow\infty$
- $E_a$ is the activation energy.

Please note that for large temperature intervals, the y-value can vary over some orders of magnitude. This will lead to a poor fit, because the data points with small values of the reaction rate then contribute too little to the fit. 

In order to get a good fit nevertheless, it is neccessary  that you logarithmize your data points before they get fitted, and choose the `DecadicLogarithm` dependent variable option on this fit.

*Options for the independent variable x*:
- Kelvin: x is $T$ in Kelvin
- AsInverseKelvin: x is $\frac{1}{T}$
- DegreeCelsius: x is in °C
- DegreeFahrenheit: x is in °F
  
  

*Options for the dependent variable y*:
- Original: the original value of $y$ (the rate)
- Inverse:  the inverse of the rate, i.e. $\frac{1}{y}$
- Negative: the negative rate $-y$
- DecadicLogarithm: $\log_{10}(y)$
- NegativeDecadicLogarithm: $-\log_{10}(y)$
- NaturalLogarithm: $\ln(y)$
- NegativeNaturalLogarithm: $-\ln(y)$

  
  
*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.ArrheniusLawRate.Fig1.png)
^^^ Fig. 1: Typical plot of an Arrhenius diagram (reaction rate by the inverse temperature). Here the parameters are $y_0=10^{12} s^{-1}$ and $E_a=80$ kJ/mol. Please note that if you choose the x-axis to be $ 1/T $ instead of T and the y-axis to be logarithmic, as in this example, the curve becomes a straight line. You can even include the "right" temperatures in °C by adding a second axis at the bottom, with inverse tick spacing and the transformation $x'=-273.15+x$.</value>
  </data>
  <data name="Materials.ArrheniusLawTime" xml:space="preserve">
    <value># Arrhenius law (time)

This Arrhenius law describes the temperature dependence of e.g. relaxation or retardation times, or viscosities, e.g. quantities that decrease with increasing temperature.  
The function is defined as:
$$
y(T) = y_0 \exp\left(\frac{E_a}{k T})
$$
in which $y$ is the relaxation or retardation time or viscosity (dependent variable), $T$ is the absolute (!) temperature (independent variable), and $k$ is a constant, usually the Boltzmann constant, but it depends on the options you choose for the fit (see below).

The parameters are: 
- $y_0$ is the relaxation or retardation time or viscosity in the limit $T\rightarrow\infty$
- $E_a$ is the activation energy.

Please note that for large temperature intervals, the y-value can vary over some orders of magnitude. This will lead to a poor fit, because the data points with small values of the reaction rate then contribute too little to the fit. 

In order to get a good fit nevertheless, it is neccessary  that you logarithmize your data points before they get fitted, and choose the `DecadicLogarithm` dependent variable option on this fit.

*Options for the independent variable x*:
- Kelvin: x is $T$ in Kelvin
- AsInverseKelvin: x is $\frac{1}{T}$
- DegreeCelsius: x is in °C
- DegreeFahrenheit: x is in °F
  
  

*Options for the dependent variable y*:
- Original: the original value of $y$ (the rate)
- Inverse:  the inverse of the rate, i.e. $\frac{1}{y}$
- Negative: the negative rate $-y$
- DecadicLogarithm: $\log_{10}(y)$
- NegativeDecadicLogarithm: $-\log_{10}(y)$
- NaturalLogarithm: $\ln(y)$
- NegativeNaturalLogarithm: $-\ln(y)$

  
  
*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.ArrheniusLawTime.Fig1.png)
^^^ Fig. 1: Typical plot of an Arrhenius diagram (viscosity by the inverse temperature). Here the parameters are $y_0=10^{-10}$ and $E_a=80$ kJ/mol. Please note that if you choose the x-axis to be $ 1/T $ instead of T and the y-axis to be logarithmic, as in this example, the curve becomes a straight line. You can even include the "right" temperatures in °C by adding a second axis at the bottom, with inverse tick spacing and the transformation $x'=-273.15+x$.
---</value>
  </data>
  <data name="Materials.VogelFulcherLawRate" xml:space="preserve">
    <value># Vogel-Fulcher law (rate, mobility)

The Vogel-Fulcher law describes the dependence of reaction rates, mobilities, viscosities and relaxation times on the temperature for materials like glasses and polymers for temperatures in the vicinity of the glass transition temperature and in any case above the so-called Vogel temperature $T_0$.

This variant of the Vogel-Fulcher law is especially suited to describe the temperature dependence of rates, mobilities, diffusion coefficients etc., i.e. **quantities which increase with increasing temperatures**. in glasses at temperatures above $T_0$.

The function is defined as:
$$
y(T) = y_0 \exp\left(-\frac{B}{T-T_0})
$$

in which $y$ is the  rate, mobility, etc. (dependent variable), $T$ is the  temperature (independent variable), $T_0$ is the so-called Vogel temperature, and $B$ is a broadness parameter.

&gt; **Note:**
The function above is designed for reaction rates, mobilities, etc., i.e. for quantities, which increase with increasing temperature. But quantities like viscosity, relaxation times decrease with increasing temperature. To fit those quantities, please use `VogelFulcherLaw (Time)`, or use this function with a negative value for $B$.  


The parameters are: 
- $y_0$ is the reaction rate, mobility, ..., etc. in the limit $T\rightarrow\infty$
- $T_0$ is the Vogel-Temperature. The formula is only valid for temperatures $T&gt;T_0$. At the Vogel temperature, reaction rates, mobilities, etc., converge to zero.
- $B$ changes the slope of the curve.

Please note that for large temperature intervals, the function value can vary over many orders of magnitude. This will lead to a poor fit, because the data points with small values then contribute too little to the fit. 

In order to get a good fit nevertheless, it is necessary  that you logarithmize your data points before they get fitted. In order to do this, choose the `DecadicLogarithm` or `NaturalLogarithm` transformation for both the transformation of your data and for the transformation of the fit output $y$.

*Options for the independent variable $T$*:
- Kelvin: Your x-values are absolute temperatures in Kelvin
- AsInverseKelvin: your x-values are inverse temperatures $\frac{1}{T}$
- DegreeCelsius: your x-values are given as temperatures in °C
- DegreeFahrenheit: your x-values are given as temperatures in °F


*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.VogelFulcherLawRate.Fig2.png)
^^^ Fig. 1: Vogel-Fulcher law (e.g. reaction rate by temperature). Here the parameters are $y_0=10^{10}$, $T_0$=120°C and $B$=1000 K.

  
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.VogelFulcherLawRate.Fig1.png)
^^^ Fig. 2: Vogel-Fulcher law plotted in an Arrhenius diagram (e.g. reaction rate versus inverse temperature). The parameters are $y_0=10^{10}$, $T_0$=120°C and $B$=1000 K.

---</value>
  </data>
  <data name="Materials.VogelFulcherLawTime" xml:space="preserve">
    <value># Vogel-Fulcher law (relaxation times, viscosities)

The Vogel-Fulcher law describes the dependence of reaction rates, mobilities, viscosities and relaxation times on the temperature for materials like glasses and polymers for temperatures in the vicinity of the glass transition temperature and in any case above the so-called Vogel temperature $T_0$.

This variant of the Vogel-Fulcher law is especially suited to describe the temperature dependence of relaxation times, viscosities, etc., i.e. **quantities which decrease with increasing temperatures**. in glasses at temperatures above $T_0$.

The function is defined as:
$$
y(T) = y_0 \exp\left(\frac{B}{T-T_0})
$$

in which $y$ is the  relaxation time, viscosity, etc. (dependent variable), $T$ is the  temperature (independent variable), $T_0$ is the so-called Vogel temperature, and $B$ is a broadness parameter.

&gt; **Note:**
The function above is designed for relaxation times, viscosities, etc, i.e. for quantities, which decrease with increasing temperature. But quantities like reaction rates, mobilities, etc., increase with increasing temperature. To fit those quantities, please use `VogelFulcherLawRate`, or use this function with a negative value for $B$. 


The parameters are: 
- $y_0$ is the relaxation time, viscosity, ..., etc. in the limit $T\rightarrow\infty$
- $T_0$ is the Vogel-Temperature. The formula is only valid for temperatures $T&gt;T_0$. At the Vogel temperature, relaxation times, viscosities, etc., converge to infinity.
- $B$ changes the slope of the curve.

Please note that for large temperature intervals, the function value can vary over many orders of magnitude. This will lead to a poor fit, because the data points with small values then contribute too little to the fit. 

In order to get a good fit nevertheless, it is necessary  that you logarithmize your data points before they get fitted. In order to do this, choose the `DecadicLogarithm` or `NaturalLogarithm` transformation for both the transformation of your data and for the transformation of the fit output $y$.

*Options for the independent variable $T$*:
- Kelvin: Your x-values are absolute temperatures in Kelvin
- AsInverseKelvin: your x-values are inverse temperatures $\frac{1}{T}$
- DegreeCelsius: your x-values are given as temperatures in °C
- DegreeFahrenheit: your x-values are given as temperatures in °F


*Option for parameters*:
- ParameterEnergyRepresentation
  - Joule: $E_a$ is in Joule
  - JoulePerMole: $E_a$ is in Joule per mole
  - ElectronVolt: $E_a$ is in eV (electron volt)
  - kWh, calorie, calorie per mole and more..
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.VogelFulcherLawTime.Fig2.png)
^^^ Fig. 1: Vogel-Fulcher law (e.g. relaxation time by temperature). Here the parameters are $y_0=10^{-10}$, $T_0$=120°C and $B$=1000 K.

  
  
^^^
![](res:Altaxo.Calc.FitFunctions.Materials.VogelFulcherLawTime.Fig1.png)
^^^ Fig. 2: Vogel-Fulcher law plotted in an Arrhenius diagram (e.g. relaxation time versus inverse temperature). The parameters are $y_0=10^{-10}$, $T_0$=120°C and $B$=1000 K.

---</value>
  </data>
  <data name="Probability.CauchyAmplitude" xml:space="preserve">
    <value># CauchyAmplitude

This function evaluates a sum of Cauchy (Lorentzian) terms, plus a background polynomial with one or multiple terms, according to

$$
y(x) = \frac{a_0}{1+ \left ( \frac{x-x_{c0}}{w_0} \right )^2 } + ... + \frac{a_{n-1}}{1+ \left ( \frac{x-x_{cn-1}}{w_{n-1}} \right )^2 } + b_0 + b_1 x^1 + ... + b_m x^m 
$$

in which:

- $a_0 ... a_{n-1}$ are the amplitudes (heights) of the Cauchy terms

- $x_{c0} ... x_{cn-1}$ are the locations of the Cauchy terms

- $w_0 ... w_{n-1}$ are the half widths of half maximum (HWHM) of the Cauchy terms

- $b_0 ... b_m$ are the coefficients of the background polynomial of order  $m$

- $n$ is the number of Cauchy terms ($n \geq 1$)
- $m$ is the order of the background polynomial (set $m=-1$ to disable the background polynomial)

The number of Cauchy terms $n$ and the order of the background polynomial $m$ can be changed by double-clicking on the fit function. The default values are $n=1$ and $m=0$. 

The domain of the function is $-\infty \leq x \leq \infty$. 

^^^
![](res:Altaxo.Calc.FitFunctions.Probability.CauchyAmplitude.Fig1.png)
^^^ Fig. 1: CauchyAmplitude ($n=1$, $m=0$) with $a_0=5$, $x_{c0}=7$, $w_0=3$ and $b_0=1$.
---
References:
[Cauchy distribution at Wikipedia](https://en.wikipedia.org/wiki/Cauchy_distribution)




</value>
  </data>
  <data name="Probability.CauchyArea" xml:space="preserve">
    <value># CauchyArea

This function evaluates a sum of Cauchy (Lorentzian) terms, plus a background polynomial with one or multiple terms, according to

$$
y(x) = \frac{A_0}{\pi w_0 [ 1 + \left ( \frac{x-x_{c0}}{w_0} \right ) ^2  ] } + ... + \frac{A_{n-1}}{\pi w_{n-1} [ 1 + \left ( \frac{x-x_{cn-1}}{w_{n-1}} \right ) ^2  ] } + b_0 + b_1 x^1 + ... + b_m x^m 
$$

in which:

- $A_0 ... A_{n-1}$ are the areas under the Cauchy terms

- $x_{c0} ... x_{cn-1}$ are the locations of the Cauchy terms

- $w_0 ... w_{n-1}$ are the half widths of half maximum (HWHM) of the Cauchy terms

- $b_0 ... b_m$ are the coefficients of the background polynomial of order  $m$

- $n$ is the number of Cauchy terms ($n \geq 1$)
- $m$ is the order of the background polynomial (set $m=-1$ to disable the background polynomial)

The number of Cauchy terms $n$ and the order of the background polynomial $m$ can be changed by double-clicking on the fit function. The default values are $n=1$ and $m=0$. In order to get the probability density function of the Cauchy distribution, set $n=1$,  $m=-1$, and set the parameter $A_0$ fixed to $A_0=1$.


The domain of the function is $-\infty \leq x \leq \infty$. 

^^^
![](res:Altaxo.Calc.FitFunctions.Probability.CauchyArea.Fig1.png)
^^^ Fig. 1: CauchyArea ($n=1$, $m=0$) with $A_0=40$, $x_{c0}=7$, $w_0=3$ and $b_0=1$.
---
References:
[Cauchy distribution at Wikipedia](https://en.wikipedia.org/wiki/Cauchy_distribution)

</value>
  </data>
  <data name="Probability.GaussAmplitude" xml:space="preserve">
    <value># GaussAmplitude

This function evaluates a sum of Gaussian terms, plus a background polynomial with one or multiple terms, according to

$$
y(x) = a_0 \exp \left ( -\frac{(x-x_{c0})^2}{2 w_0^2} \right ) + ... + a_{n-1} \exp \left ( -\frac{(x-x_{cn-1})^2}{2 w_{n-1}^2} \right ) + b_0 + b_1 x^1 + ... + b_m x^m 
$$

in which:

- $a_0 ... a_{n-1}$ are the amplitudes (heights) of the Gaussian terms

- $x_{c0} ... x_{cn-1}$ are the locations of the Gaussians

- $w_0 ... w_{n-1}$ are the widths of the Gaussians

- $b_0 ... b_m$ are the coefficients of the background polynomial of order  $m$

- $n$ is the number of Gaussian terms ($n \geq 1$)
- $m$ is the order of the background polynomial (set $m=-1$ to disable the background polynomial)

The number of Gaussian terms $n$ and the order of the background polynomial $m$ can be changed by double-clicking on the fit function. The default values are $n=1$ and $m=0$. 

The domain of the function is $-\infty \leq x \leq \infty$. 

^^^
![](res:Altaxo.Calc.FitFunctions.Probability.GaussAmplitude.Fig1.png)
^^^ Fig. 1: GaussAmplitude ($n=1$, $m=0$) with $a_0=5$, $x_{c0}=7$, $w_0=3$ and $b_0=1$.
---



</value>
  </data>
  <data name="Probability.GaussArea" xml:space="preserve">
    <value># GaussArea

This function evaluates a sum of Gaussian terms, plus a background polynomial with one or multiple terms, according to

$$
y(x) = \frac{A_0}{w_0 \sqrt{2 \pi}} \exp \left ( -\frac{(x-x_{c0})^2}{2 w_0^2} \right ) + ... + \frac{A_{n-1}}{w_{n-1} \sqrt{2 \pi}} \exp \left ( -\frac{(x-x_{cn-1})^2}{2 w_{n-1}^2} \right ) + b_0 + b_1 x^1 + ... + b_m x^m 
$$

in which:

- $A_0 ... A_{n-1}$ are the areas under the Gaussian terms

- $x_{c0} ... x_{cn-1}$ are the locations of the Gaussian terms

- $w_0 ... w_{n-1}$ are the widths of the Gaussian terms

- $b_0 ... b_m$ are the coefficients of the background polynomial of order  $m$

- $n$ is the number of Gaussian terms ($n \geq 1$)
- $m$ is the order of the background polynomial (set $m=-1$ to disable the background polynomial)

The number of Gaussian terms $n$ and the order of the background polynomial $m$ can be changed by double-clicking on the fit function. The default values are $n=1$ and $m=0$. 

The domain of the function is $-\infty \leq x \leq \infty$. 

^^^
![](res:Altaxo.Calc.FitFunctions.Probability.GaussArea.Fig1.png)
^^^ Fig. 1: GaussArea ($n=1$, $m=0$) with $A_0=40$, $x_{c0}=7$, $w_0=3$ and $b_0=1$.
---


</value>
  </data>
</root>