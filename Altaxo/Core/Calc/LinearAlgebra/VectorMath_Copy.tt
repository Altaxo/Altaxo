<#@ template language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // src                     srcLength  dest											destLength
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "double[]",							"Length", "double[]",               "Length"},
      new[]{ "IReadOnlyList<double>", "Count",  "double[]",	              "Length"},
      new[]{ "double[]",							"Length", "IVector<double>",        "Length"},
      new[]{ "IReadOnlyList<double>", "Count",  "IVector<double>",        "Length"},
     
			new[]{ "float[]",							   "Length", "double[]",               "Length"},
      new[]{ "IReadOnlyList<float>",   "Count",  "double[]",	             "Length"},
      new[]{ "float[]",							   "Length", "IVector<double>",        "Length"},
      new[]{ "IReadOnlyList<float>",   "Count",  "IVector<double>",        "Length"},

			new[]{ "float[]",							   "Length", "float[]",                "Length"},
      new[]{ "IReadOnlyList<float>",   "Count",  "float[]",	               "Length"},
      new[]{ "float[]",							   "Length", "IVector<float>",         "Length"},
      new[]{ "IReadOnlyList<float>",   "Count",  "IVector<float>",         "Length"},

      new[]{ "int[]",										"Length", "double[]",               "Length"},
      new[]{ "IReadOnlyList<int>",			"Count",  "double[]",	              "Length"},
      new[]{ "int[]",										"Length", "IVector<double>",        "Length"},
      new[]{ "IReadOnlyList<int>",      "Count",  "IVector<double>",        "Length"},

			new[]{ "int[]",							     "Length", "float[]",                "Length"},
      new[]{ "IReadOnlyList<int>",     "Count",  "float[]",	               "Length"},
      new[]{ "int[]",							     "Length", "IVector<float>",         "Length"},
      new[]{ "IReadOnlyList<int>",     "Count",  "IVector<float>",         "Length"},

			new[]{ "int[]",							     "Length", "int[]",                "Length"},
      new[]{ "IReadOnlyList<int>",     "Count",  "int[]",	               "Length"},
      new[]{ "int[]",							     "Length", "IVector<int>",         "Length"},
      new[]{ "IReadOnlyList<int>",     "Count",  "IVector<int>",         "Length"},

    };

    foreach (var entry in types)
    {
      var srcArrT =  entry[0]; // scalar type
      var srcArrLength =   entry[1]; // array type
      var destArrT = entry[2]; // array type
			var destArrLength = entry[3]; // Length property

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ********************** Definitions for <#= srcArrT #> to <#= destArrT #> *************************************


		/// <summary>
		/// Copies the source vector to the destination vector. Both vectors must have the same length.
		/// </summary>
		/// <param name="sourceVector">The source vector.</param>
		/// <param name="destinationVector">The destination vector.</param>
		public static void Copy(<#= srcArrT #> sourceVector, <#= destArrT #> destinationVector)
		{
			if (sourceVector.<#= srcArrLength #> != destinationVector.<#= destArrLength #>)
				throw new ArgumentException("source and destination vector have unequal length!");

			Copy(sourceVector, 0, destinationVector, 0, sourceVector.<#= srcArrLength #>);
		}
	

		/// <summary>
		/// Copies elements of a source vector to a destination vector.
		/// </summary>
		/// <param name="sourceVector">The source vector.</param>
		/// <param name="sourceStartIndex">First element of the source vector to copy.</param>
		/// <param name="destinationVector">The destination vector.</param>
		/// <param name="destinationStartIndex">First element of the destination vector to copy to.</param>
		/// <param name="count">Number of elements to copy.</param>
		public static void Copy(<#= srcArrT #> sourceVector, int sourceStartIndex, <#= destArrT #> destinationVector, int destinationStartIndex, int count)
		{
			for (int i = 0; i < count; ++i)
				destinationVector[i + destinationStartIndex] = sourceVector[i + sourceStartIndex];
		}


		


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
