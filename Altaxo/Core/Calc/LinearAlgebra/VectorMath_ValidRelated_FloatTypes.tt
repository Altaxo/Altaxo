<#@ template language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   array                   rwArray            Length    negInfinity                 posInfinity                upCast    typeAbs
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "double", "double[]",							"double[]",        "Length", "double.NegativeInfinity", "double.PositiveInfinity",	"",				"double"  },
      new[]{ "float",  "float[]",								"float[]",         "Length", "float.NegativeInfinity",	"float.PositiveInfinity",		"",				"float" },
      new[]{ "double", "IReadOnlyList<double>", "IVector<double>", "Count",  "double.NegativeInfinity",	"double.PositiveInfinity",	"",				"double" },
      new[]{ "float",	 "IReadOnlyList<float>",  "IVector<float>",  "Count", "float.NegativeInfinity",    "float.PositiveInfinity",		"",				"float" },
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
      var arrT =   entry[1]; // array type
      var rwArrT = entry[2]; // array type
			var length = entry[3]; // Length property
      var negInf = entry[4]; // negative Infinity
      var posInf = entry[5]; // positive Infinity
			var upCast = entry[6]; // up-cast to next bigger number
			var typeAbs = entry[7]; // type for absolute values

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= arrT #> *******************************************

		/// <summary>
		/// Returns the used length of the vector. This is one more than the highest index of the element that is different from Double.NaN.
		/// </summary>
		/// <param name="vector">The vector for which the used length has to be determined.</param>
		/// <param name="currentLength">The current length of the array. Normally values.Length, but you can provide a value less than this.</param>
		/// <returns>The used length. Elements with indices greater or equal this until <c>currentlength</c> are NaNs.</returns>
		static public int GetUsedLength(this <#= arrT #> vector, int currentLength)
		{
			if(currentLength > vector.<#= length #>)
				currentLength = vector.<#= length #>;

			for (int i = currentLength - 1; i >= 0; --i)
			{
				if (!<#= scalT #>.IsNaN(vector[i]))
					return i + 1;
			}
			return 0;
		}

		
		/// <summary>
		/// Returns the used length of the vector. This is one more than the highest index of the element that is different from NaN.
		/// </summary>
		/// <param name="vector">The vector for which the used length has to be determined.</param>
		/// <returns>The used length. Elements with indices greater or equal this until the end of the array are NaNs.</returns>
		static public int GetUsedLength(this <#= arrT #> vector)
		{
			return GetUsedLength(vector, vector.<#= length #>);
		}

		/// <summary>
		/// Returns the maximum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
		/// </summary>
		/// <param name="vector">The vector to search for maximum element.</param>
		/// <returns>Maximum valid element of x. Returns NaN if the array is empty or contains NaN elements only.</returns>
		public static double MaxOfValidElements(this <#= arrT #>  vector)
		{
			var max = <#= scalT #>.NaN;
			int i;
			for (i = vector.<#= length #> - 1; i >= 0; --i)
			{
				if (!<#= scalT #>.IsNaN(max = vector[i]))
					break;
			}
			for (i = i - 1; i >= 0; --i)
			{
				var tmp = vector[i]; 
				if (tmp > max)
					max = tmp;
			}
			return max;
		}

		/// <summary>
		/// Returns the minimum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
		/// </summary>
		/// <param name="vector">The vector to search for maximum element.</param>
		/// <returns>Minimum valid element of x. Returns NaN if the array is empty or contains NaN elements only.</returns>
		public static double MinOfValidElements(this <#= arrT #>  vector)
		{
			var min = <#= scalT #>.NaN;
			int i;
			for (i = vector.<#= length #> - 1; i >= 0; --i)
			{
				if (!<#= scalT #>.IsNaN(min = vector[i]))
					break;
			}
			for (i = i - 1; i >= 0; --i)
			{
				var tmp = vector[i]; 
				if (tmp < min)
					min = tmp;
			}
			return min;
		}


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
