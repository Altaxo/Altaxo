<#@ template language="C#" #>
<#@ output extension="autogenerated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MatrixMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   ROMatrixType         rwMatrixType    rwVectorType
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "Double", "IROMatrix<double>", "IMatrix<double>"},
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
			var roMatT = entry[1]; // read-only matrix type
			var rwMatT = entry[2]; // read-write matrix type
			

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= scalT #> *******************************************

		/// <summary>
		/// Elementwise application of a function to each element of a matrix. The result is stored in another matrix or in the same matrix.
		/// </summary>
		/// <param name="src1">Matrix to use the values from.</param>
		/// <param name="function">Function to be applied to each element of the matrix. The argument is the element of the source matrix.</param>
		/// <param name="result">Matrix to store the result. This may be the same instance as the source matrix.</param>
		public static void Map(<#= roMatT #> src1, Func<<#= scalT #>, <#= scalT #>> function, <#= rwMatT #> result)
		{
			if (null == src1)
				throw new ArgumentNullException(nameof(src1));
			if (null == result)
				throw new ArgumentNullException(nameof(result));

			if (src1.Rows != result.Rows || src1.Columns != result.Columns)
				throw new RankException("Mismatch of dimensions of src1 and result");

			var cols = src1.Columns; 
			var rows = src1.Rows;
			for (int i = 0; i < rows; ++i)
			{
				for(int j=0;j<cols;++j)
				{
					result[i, j] = function(src1[i, j]);
				}
			}
		}

		/// <summary>
		/// Elementwise application of a function to each element of a matrix. The result is stored in another matrix or in the same matrix.
		/// </summary>
		/// <param name="src1">Matrix to use the values from.</param>
		/// <param name="function">Function to be applied to each element of the matrix. 1st argument is the element of the src matrix, 2nd argument the row number, 3rd argument the column number.</param>
		/// <param name="result">Matrix to store the result. This may be the same instance as the source matrix.</param>
		public static void Map(<#= roMatT #> src1, Func<<#= scalT #>, int, int, <#= scalT #>> function, <#= rwMatT #> result)
		{
			if (null == src1)
				throw new ArgumentNullException(nameof(src1));
			if (null == result)
				throw new ArgumentNullException(nameof(result));

			if (src1.Rows != result.Rows || src1.Columns != result.Columns)
				throw new RankException("Mismatch of dimensions of src1 and result");

			var cols = src1.Columns; 
			var rows = src1.Rows;
			for (int i = 0; i < rows; ++i)
			{
				for(int j=0;j<cols;++j)
				{
					result[i, j] = function(src1[i, j], i, j);
				}
			}
		}


		/// <summary>
		/// Elementwise application of a function to each element of two matrices. The result is stored in another matrix or in the same matrix.
		/// </summary>
		/// <param name="src1">First matrix to use the values from.</param>
		/// <param name="src2">Second matrix to use the values from.</param>
		/// <param name="function">Function to be applied to each element of src1 and src2.</param>
		/// <param name="result">Matrix to store the result. This may be the same instance as one of the matrices src1 or src2.</param>
		public static void Map(<#= roMatT #> src1, <#= roMatT #> src2, Func<<#= scalT #>, <#= scalT #>, <#= scalT #>> function, <#= rwMatT #> result)
		{
			if (null == src1)
				throw new ArgumentNullException(nameof(src1));
			if (null == src2)
				throw new ArgumentNullException(nameof(src2));
			if (null == result)
				throw new ArgumentNullException(nameof(result));

			if (src1.Rows != src2.Rows || src1.Columns != src2.Columns)
				throw new RankException("Mismatch of dimensions of src1 and src2");
			if (src1.Rows != result.Rows || src1.Columns != result.Columns)
				throw new RankException("Mismatch of dimensions of src1 and result");

			var cols = src1.Columns; 
			var rows = src1.Rows;
			for (int i = 0; i < rows; ++i)
			{
				for(int j=0;j<cols;++j)
				{
					result[i, j] = function(src1[i, j], src2[i, j]);
				}
			}
		}

		/// <summary>
		/// Elementwise application of a function to each element of two matrices. The result is stored in another matrix or in the same matrix.
		/// </summary>
		/// <param name="src1">First matrix to use the values from.</param>
		/// <param name="src2">Second matrix to use the values from.</param>
		/// <param name="function">Function to be applied to each element of src1 and src2. 1st argument is the element of matrix src1, 2nd argument is the element of matrix src2, 3rd argument is the row number, 4th argument is the column number.</param>
		/// <param name="result">Matrix to store the result. This may be the same instance as one of the matrices src1 or src2.</param>
		public static void Map(<#= roMatT #> src1, <#= roMatT #> src2, Func<<#= scalT #>, <#= scalT #>, int, int, <#= scalT #>> function, <#= rwMatT #> result)
		{
			if (null == src1)
				throw new ArgumentNullException(nameof(src1));
			if (null == src2)
				throw new ArgumentNullException(nameof(src2));
			if (null == result)
				throw new ArgumentNullException(nameof(result));

			if (src1.Rows != src2.Rows || src1.Columns != src2.Columns)
				throw new RankException("Mismatch of dimensions of src1 and src2");
			if (src1.Rows != result.Rows || src1.Columns != result.Columns)
				throw new RankException("Mismatch of dimensions of src1 and result");

			var cols = src1.Columns; 
			var rows = src1.Rows;
			for (int i = 0; i < rows; ++i)
			{
				for(int j=0;j<cols;++j)
				{
					result[i, j] = function(src1[i, j], src2[i, j], i, j);
				}
			}
		}

<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="MatrixMath_Footer.ttinclude" #>
