<#@ template language="C#" #>
<#@ output extension="autogenerated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   array                   rwArray            Length    negInfinity                 posInfinity                upCast    typeAbs
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "double", "double[]",							"double[]",        "Length", "double.NegativeInfinity", "double.PositiveInfinity",	"",				"double"  },
      new[]{ "float",  "float[]",								"float[]",         "Length", "float.NegativeInfinity",	"float.PositiveInfinity",		"",				"float" },
      new[]{ "int",    "int[]",									"int[]",           "Length", "int.MinValue",						"int.MaxValue",							"(long)", "long"  },
      new[]{ "double", "IReadOnlyList<double>", "IVector<double>", "Count",  "double.NegativeInfinity",	"double.PositiveInfinity",	"",				"double" },
      new[]{ "float",	 "IReadOnlyList<float>",  "IVector<float>",  "Count", "float.NegativeInfinity",    "float.PositiveInfinity",		"",				"float" },
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
      var arrT =   entry[1]; // array type
      var rwArrT = entry[2]; // array type
			var length = entry[3]; // Length property
      var negInf = entry[4]; // negative Infinity
      var posInf = entry[5]; // positive Infinity
			var upCast = entry[6]; // up-cast to next bigger number
			var typeAbs = entry[7]; // type for absolute values

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= arrT #> *******************************************

    /// <summary>
    /// Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
    /// </summary>
    /// <param name="a">First summand.</param>
    /// <param name="b">Second summand.</param>
    /// <param name="c">The resulting vector.</param>
    public static void Add(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> c)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (c.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and c unequal");

      for (int i = c.<#= length #> - 1; i >= 0; --i)
        c[i] = a[i] + b[i];
    }

     /// <summary>
    /// Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
    /// </summary>
    /// <param name="a">First summand.</param>
    /// <param name="b">Second summand.</param>
    /// <param name="c">The resulting vector.</param>
    public static void Multiply(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> c)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (c.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and c unequal");

      for (int i = c.<#= length #> - 1; i >= 0; --i)
        c[i] = a[i] * b[i];
    }

    /// <summary>
    /// Gives the parallel maximum of vector a and b. The first element of the resulting vector
    /// is the maximum of the first element of a and the first element of b. The second element of the
    /// resulting vector is the maximum of the second element of a and the second element of b, and so on.
    /// </summary>
    /// <param name="a">First vector.</param>
    /// <param name="b">Second vector.</param>
    /// <param name="result">The resulting vector.</param>
    public static void ElementwiseMax(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> result)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (result.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and result unequal");

      for (int i = result.<#= length #> - 1; i >= 0; --i)
      {
        result[i] = Math.Max(a[i], b[i]);
      }
    }


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
