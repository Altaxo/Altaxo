<#@ template language="C#" #>
<#@ output extension="autogenerated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   array                   rwArray            Length    negInfinity                 posInfinity                upCast    typeAbs
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "double", "double[]",							"double[]",        "Length", "double.NegativeInfinity", "double.PositiveInfinity",	"",				"double"  },
      new[]{ "float",  "float[]",								"float[]",         "Length", "float.NegativeInfinity",	"float.PositiveInfinity",		"",				"float" },
      new[]{ "int",    "int[]",									"int[]",           "Length", "int.MinValue",						"int.MaxValue",							"(long)", "long"  },
      new[]{ "double", "IReadOnlyList<double>", "IVector<double>", "Count",  "double.NegativeInfinity",	"double.PositiveInfinity",	"",				"double" },
      new[]{ "float",	 "IReadOnlyList<float>",  "IVector<float>",  "Count", "float.NegativeInfinity",    "float.PositiveInfinity",		"",				"float" },
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
      var arrT =   entry[1]; // array type
      var rwArrT = entry[2]; // array type
			var length = entry[3]; // Length property
      var negInf = entry[4]; // negative Infinity
      var posInf = entry[5]; // positive Infinity
			var upCast = entry[6]; // up-cast to next bigger number
			var typeAbs = entry[7]; // type for absolute values

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= arrT #> *******************************************

    /// <summary>
    /// Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
    /// </summary>
    /// <param name="a">First summand.</param>
    /// <param name="b">Second summand.</param>
    /// <param name="c">The resulting vector.</param>
    public static void Add(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> c)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (c.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and c unequal");

      for (int i = c.<#= length #> - 1; i >= 0; --i)
        c[i] = a[i] + b[i];
    }


		/// <summary>
		/// Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
		/// </summary>
		/// <param name="vector1">First vector.</param>
		/// <param name="vector2">Second vector.</param>
		/// <returns>True if both vectors contain the same elements.</returns>
		public static bool AreValuesEqual(<#= arrT #> vector1, <#= arrT #> vector2)
		{
			if (vector1.<#= length #> != vector2.<#= length #>)
				throw new ArgumentException("Length of x and y are unequal");

			for (int i = vector1.<#= length #> - 1; i >= 0; --i)
			{
				if (!(vector1[i] == vector2[i]))
				{
					return false;
				}
			}
			return true;
		}

			/// <summary>
		/// Copies the source vector to the destination vector. Both vectors must have the same length.
		/// </summary>
		/// <param name="sourceVector">The source vector.</param>
		/// <param name="destinationVector">The destination vector.</param>
		public static void Copy(<#= arrT #> sourceVector, <#= rwArrT #> destinationVector)
		{
			if (sourceVector.<#= length #> != destinationVector.<#= length #>)
				throw new ArgumentException("source and destination vector have unequal length!");

			Copy(sourceVector, 0, destinationVector, 0, sourceVector.<#= length #>);
		}

		/// <summary>
		/// Copies elements of a source vector to a destination vector.
		/// </summary>
		/// <param name="sourceVector">The source vector.</param>
		/// <param name="sourceStartIndex">First element of the source vector to copy.</param>
		/// <param name="destinationVector">The destination vector.</param>
		/// <param name="destinationStartIndex">First element of the destination vector to copy to.</param>
		/// <param name="count">Number of elements to copy.</param>
		public static void Copy(<#= arrT #> sourceVector, int sourceStartIndex, <#= rwArrT #> destinationVector, int destinationStartIndex, int count)
		{
			for (int i = 0; i < count; ++i)
				destinationVector[i + destinationStartIndex] = sourceVector[i + sourceStartIndex];
		}

		/// <summary>Performs linear interpolation between two vectors at specified points.</summary>
		/// <param name="t">Scalar parameter of interpolation</param>
		/// <param name="t0">Scalar parameter corresponding to first vector v0.</param>
		/// <param name="v0">Vector at first parameter point.</param>
		/// <param name="t1">Scalar parameter corresponding to the second vector v1.</param>
		/// <param name="v1">Vector at second parameter point.</param>
		/// <param name="destinationVector">Intepolated vector value at point <paramref name="t"/></param>
		public static void Lerp(double t, double t0, <#= arrT #> v0, double t1, <#= arrT #> v1, <#= rwArrT #> destinationVector)
		{
			if(null == v0)
				throw new ArgumentNullException(nameof(v0));
			if(null == v1)
				throw new ArgumentNullException(nameof(v1));
			if(null == destinationVector)
				throw new ArgumentNullException(nameof(destinationVector));
			if (v0.<#= length #> != v1.<#= length #>)
        throw new ArgumentException("Length of vectors v0 and v1 unequal");
      if (destinationVector.<#= length #> != v0.<#= length #>)
        throw new ArgumentException("Length of vectors destinationVector and v0 unequal");

			for(int i=v0.<#= length #> -1; i>=0; --i)
				{
				destinationVector[i] = (<#= scalT #>)((v0[i] * (t1 - t) + v1[i] * (t - t0)) / (t1 - t0));
				}
		}


     /// <summary>
    /// Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
    /// </summary>
    /// <param name="a">First summand.</param>
    /// <param name="b">Second summand.</param>
    /// <param name="c">The resulting vector.</param>
    public static void Multiply(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> c)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (c.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and c unequal");

      for (int i = c.<#= length #> - 1; i >= 0; --i)
        c[i] = a[i] * b[i];
    }

    /// <summary>
    /// Gives the parallel maximum of vector a and b. The first element of the resulting vector
    /// is the maximum of the first element of a and the first element of b. The second element of the
    /// resulting vector is the maximum of the second element of a and the second element of b, and so on.
    /// </summary>
    /// <param name="a">First vector.</param>
    /// <param name="b">Second vector.</param>
    /// <param name="result">The resulting vector.</param>
		/// <returns>The same instance as provided by result. Each element result[i] is the maximum of a[i] and b[i].</returns>
    public static <#= rwArrT #> MaxOf(<#= arrT #> a, <#= arrT #> b, <#= rwArrT #> result)
    {
      if (a.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and b unequal");
      if (result.<#= length #> != b.<#= length #>)
        throw new ArgumentException("Length of vectors a and result unequal");

      for (int i = result.<#= length #> - 1; i >= 0; --i)
      {
        result[i] = Math.Max(a[i], b[i]);
      }

			return result;
    }


		/// <summary>
		/// Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
		/// </summary>
		/// <param name="vector1">Input vector.</param>
		/// <param name="scalar">Number.</param>
		/// <param name="result">Provide a vector whose elements are filled with the result. If null is provided, then a new vector will be allocated and returned.</param>
		/// <returns>The same instance as provided by result. Each element r[i] is the maximum of v[i] and b.</returns>
		public static <#= rwArrT #> MaxOf(this <#= arrT #> vector1, <#= scalT #> scalar, <#= rwArrT #> result)
		{
			if (vector1.<#= length #> != result.<#= length #>)
				throw new ArgumentException("vector1 and result must have the same length");

			for (int i = vector1.<#= length #>; i>=0; --i)
				result[i] = Math.Max(vector1[i], scalar);

			return result;
		}


		/// <summary>
		/// Returns the sum of squared differences of the elements of xarray and yarray.
		/// </summary>
		/// <param name="vector1">The first array.</param>
		/// <param name="vector2">The other array.</param>
		/// <returns>The sum of squared differences all elements of xarray and yarray.</returns>
		public static double SumOfSquaredDifferences(<#= arrT #> vector1, <#= arrT #> vector2)
		{
			if (vector1.<#= length #> != vector2.<#= length #>)
				throw new ArgumentException("Length of vector1 is different from length of vector2");

			double sum = 0;
			double tmp;
			for (int i = 0; i < vector1.<#= length #>; i++)
			{
				tmp = (double)vector1[i] - vector2[i];
				sum += tmp * tmp;
			}

			return sum;
		}


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
