<#@ template language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   array                   rwArray            Length    negInfinity                 posInfinity                upCast    typeAbs
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "double", "double[]",							"double[]",        "Length", "double.NegativeInfinity", "double.PositiveInfinity",	"",				"double"  },
      new[]{ "float",  "float[]",								"float[]",         "Length", "float.NegativeInfinity",	"float.PositiveInfinity",		"",				"float" },
      new[]{ "int",    "int[]",									"int[]",           "Length", "int.MinValue",						"int.MaxValue",							"(long)", "long"  },
      new[]{ "double", "IReadOnlyList<double>", "IVector<double>", "Count",  "double.NegativeInfinity",	"double.PositiveInfinity",	"",				"double" },
      new[]{ "float",	 "IReadOnlyList<float>",  "IVector<float>",  "Count", "float.NegativeInfinity",    "float.PositiveInfinity",		"",				"float" },
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
      var arrT =   entry[1]; // array type
      var rwArrT = entry[2]; // array type
			var length = entry[3]; // Length property
      var negInf = entry[4]; // negative Infinity
      var posInf = entry[5]; // positive Infinity
			var upCast = entry[6]; // up-cast to next bigger number
			var typeAbs = entry[7]; // type for absolute values

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= arrT #> *******************************************

		/// <summary>
		/// Elementwise application of a function to each element of a vector.
		/// </summary>
		/// <param name="vector">The vector.</param>
		/// <param name="function">The function to apply to every element.</param>
		public static void Map(this <#= rwArrT #> vector, Func<<#= scalT #>, <#= scalT #>> function)
		{
			for (int i = vector.<#= length #> - 1; i >= 0; --i)
				vector[i] = function(vector[i]);
		}


		/// <summary>
		/// Multiplies all vector elements with a constant.
		/// </summary>
		/// <param name="v">The vector.</param>
		/// <param name="a">The constant to multiply with.</param>
		public static void Multiply(this <#= rwArrT #> v, <#= scalT #> a)
		{
			for (int i = v.<#= length #> - 1; i >= 0; --i)
				{
				v[i] *= a;
				}
		}

		/// <summary>
		/// Normalizes the vector elements so that the mean of the elements is zero.
		/// </summary>
		/// <param name="v">The vector.</param>
		public static void ToZeroMean(this <#= rwArrT #> v)
			{
				var mean = Mean(v);

				for (int i = v.<#= length #> - 1; i >= 0; --i)
				{
				v[i] = (<#= scalT #>)(v[i]-mean);
				}
			}

		/// <summary>
		/// Normalizes the vector elements so that the mean of the elements is zero.
		/// </summary>
		/// <param name="v">The vector.</param>
		public static void ToZeroMeanAndUnitVariance(this <#= rwArrT #> v)
			{
				var (mean, variance) = MeanAndVariance(v);
				var factor = 1/Math.Sqrt(variance);

				for (int i = v.<#= length #> - 1; i >= 0; --i)
				{
				v[i] = (<#= scalT #>)((v[i]-mean)*factor);
				}
			}

		/// <summary>
		/// Sets the element of the vector to the result of scalar x divided by each element y[i].
		/// </summary>
		/// <param name="x">A scalar value</param>
		/// <param name="y">A vector.</param>
		public static void Divide(<#= scalT #> x, <#= rwArrT #> y)
		{
			for (int i = 0; i < y.<#= length #>; ++i)
				y[i] = x / y[i];
		}
   
		/// <summary>
		/// Fills a vector with a certain value. so that all elements are equal.
		/// </summary>
		/// <param name="vector">The vector to fill.</param>
		/// <param name="val">The value each element is set to.</param>
		public static void FillWith(this <#= rwArrT #> vector, <#= scalT #> val)
		{
			for (int i = vector.<#= length #> - 1; i >= 0; --i)
				vector[i] = val;
		}


	 /// <summary>
		/// Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
		/// </summary>
		/// <param name="vector">The vector to be filled.</param>
		/// <param name="startValue">First value of the vector (value at index 0).</param>
		/// <param name="endValue">Last value of the vector (value at index Length-1).</param>
		public static void FillWithLinearSequenceGivenByStartAndEnd(this <#= rwArrT #> vector, <#= scalT #> startValue, <#= scalT #> endValue)
		{
			int lenM1 = vector.<#= length #> - 1;
			if (lenM1 < 0)
			{
				throw new ArgumentException("Vector must have a length > 0", nameof(vector));
			}
			else if (lenM1 == 0)
			{
				if (startValue != endValue)
					throw new ArgumentException("The vector has length=1. Thus startValue and endValue must be equal.");

				vector[0] = startValue;
				return;
			}
			else
			{
				double flenM1 = lenM1;
				for (int i = 0; i <= lenM1; ++i)
				{
					vector[i] = (<#= scalT #>)(startValue * ((lenM1 - i) / flenM1) + endValue * (i / flenM1)); // we want to have highest accuracy, even for the end, thus we have to sacrifice speed
				}
			}
		}


		/// <summary>
		/// Reverses the order of elements in the provided vector.
		/// </summary>
		/// <param name="vector">Vector. On return, the elements of this vector are in reverse order.</param>
		public static void Reverse(this <#= rwArrT #> vector)
		{
			for (int i = 0, j = vector.<#= length #> - 1; i < j; ++i, --j)
			{
				var x_i = vector[i];
				vector[i] = vector[j];
				vector[j] = x_i;
			}
		}


		/// <summary>
		/// Shifts the element of this vector by moving them from index i to index i+<c>increment</c>.
		/// The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
		/// </summary>
		/// <param name="vector">The vector to rotate.</param>
		/// <param name="increment">Offset value.</param>
		public static void Rotate(this <#= rwArrT #> vector, int increment)
		{
			int len = vector.<#= length #>;
			if (len < 2)
				return; // Nothing to do
			increment = increment % len;
			if (increment == 0)
				return;
			if (increment < 0)
				increment += len;

			// first cycle is to measure number of shifts per cycle
			int shiftsPerCycle = 0;
			int i = 0;
			int k = i;
			var prevVal = vector[k];
			do
			{
				k = (k + increment) % len;
				var currVal = vector[k];
				vector[k] = prevVal;
				prevVal = currVal;
				shiftsPerCycle++;
			} while (i != k);

			// now do the rest of the cycles
			if (!(0 == len % shiftsPerCycle))
				throw new InvalidProgramException();
			int numCycles = len / shiftsPerCycle;
			for (i = 1; i < numCycles; i++)
			{
				k = i;
				prevVal = vector[k];
				do
				{
					k = (k + increment) % len;
					var currVal = vector[k];
					vector[k] = prevVal;
					prevVal = currVal;
				} while (i != k);
			}
		}


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
