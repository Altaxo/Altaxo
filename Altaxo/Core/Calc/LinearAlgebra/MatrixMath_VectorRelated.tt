<#@ template language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MatrixMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 


    var types = new string[][]
    {      // scalar,   ROMatrixType         roVectorType    rwVectorType
		       // ---------------------------------------------------------------------------------------------------------------------------
      new[]{ "Double", "IROMatrix<double>", "double[]", "double[]", "Length"},
      new[]{ "Double", "IROMatrix<double>", "IReadOnlyList<double>", "IVector<double>", "Count"},
    };

    foreach (var entry in types)
    {
      var scalT =  entry[0]; // scalar type
			var roMatT = entry[1]; // scalar type, capital, for naming of the wrapping type
			var roVecT = entry[2]; // read-only vector type
			var rwVecT = entry[3]; // read-write vector type
			var vecLength = entry[4]; // length property of the vector

			

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= scalT #> *******************************************

		/// <summary>
		/// Gets the column of a matrix copied into a vector.
		/// </summary>
		/// <param name="sourceMatrix">Matrix to copy from</param>
		/// <param name="columnNumber">Number of column of the matrix to be copied.</param>
		/// <param name="destinationVector">Vector to copy the column data to.</param>
		public static void CopyColumn(this IROMatrix<double> sourceMatrix, int columnNumber, <#= rwVecT #> destinationVector)
		{
			if (columnNumber < 0 || columnNumber >= sourceMatrix.ColumnCount)
				throw new ArgumentOutOfRangeException(nameof(columnNumber), "column must be greater than or equal to zero and less than ColumnLength.");
			if (destinationVector is null)
				throw new ArgumentNullException(nameof(destinationVector));
			if (destinationVector.<#= vecLength #> != sourceMatrix.RowCount)
				throw new RankException("Length of destinationVector does not match number of rows of source matrix");

			var rows = sourceMatrix.RowCount;
			for (int i = 0; i < rows; ++i)
			{
				destinationVector[i] = sourceMatrix[i, columnNumber];
			}
		}

<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="MatrixMath_Footer.ttinclude" #>
