<#@ template language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VectorMath_Header.ttinclude" #>

// ******************************************* Unary functions not returning a vector, valid for all non-null vector types  ********************

<# 

     var types = new string[]
    {      
    "double[]",
    "IReadOnlyList<double>",
    "float[]",							   
    "IReadOnlyList<float>",
    "int[]",		
    "IReadOnlyList<int>",	
    };

    foreach (var entry in types)
    {
      var srcArrT =  entry; // scalar type

// ----------- Begin of code after next line --------------------------------------------------------------------
#>
// ******************************************** Definitions for <#= srcArrT #> *******************************************

        public static <#= srcArrT #> ElementsWhere(this <#= srcArrT #> array, bool[] condition)
        {
          return array.Where((x, i) => condition[i]).ToArray();
        }
		
        public static <#= srcArrT #> ElementsAt(this <#= srcArrT #> array, int[] indices)
        {
          return indices.Select(idx => array[idx]).ToArray();
        }


<# 
// ----------- End of code before previous line --------------------------------------------------------------------
    }
#>
<#@ include file="VectorMath_Footer.ttinclude" #>
