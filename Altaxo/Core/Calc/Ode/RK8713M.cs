#region Copyright

/////////////////////////////////////////////////////////////////////////////
//
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2021 Dr. Dirk Lellinger
//    This source file is licensed under the MIT license.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;

namespace Altaxo.Calc.Ode
{
  /// <summary>
  /// Runge-Kutta method of 8th order of Dormand and Prince.
  /// Attention: this method <b>can only provide dense output of order 3.</b>
  /// If accurate dense output is needed, please use method <see cref="DOP853"/>.
  /// </summary>
  /// <remarks>
  /// <para>References:</para>
  /// <para>[1] Hairer, Ordinary differential equations I, 2nd edition, 1993.</para>
  /// <para>[2] Engeln-Müllges et al., Numerik-Algorithmen, Springer, 2011 (in German)</para>
  /// </remarks>
  public class RK8713M : RungeKuttaExplicitBase
  {
    /// <summary>Scheme coefficients, see [2] p.693</summary>
    private static readonly double[][] _sa = new double[][]
        {
          new double[] { },
          new double[] { 1 / 18d },
          new double[] { 1 / 48d, 1 / 16d },
          new double[] { 1 / 32d, 0, 3 / 32d },
          new double[] { 5 / 16d, 0, -75 / 64d, 75 / 64d },
          new double[] { 3 / 80d, 0, 0, 3 / 16d, 3 / 20d },
          new double[] { 29443841 / 614563906d, 0, 0, 77736538 / 692538347d, -28693883 / 1125000000d, 23124283 / 1800000000d },
          new double[] { 16016141/946692911d, 0,0,61564180/158732637d, 22789713/633445777d, 545815736/2771057229d, -180193667/1043307555d },
          new double[] { 39632708/573591083d, 0, 0, -433636366/683701615d, -421739975/2616292301d, 100302831/723423059d, 790204164/839813087d, 800635310/3783071287d},
          new double[] { 246121993/1340847787d, 0, 0, -37695042795/15268766246d, -309121744/1061227803d, -12992083/490766935d, 6005943493/2108947869d, 393006217/1396673457d, 123872331/1001029789d},
          new double[] { -1028468189/846180014d, 0, 0, 8478235783/508512852d, 1311729495/1432422823d, -10304129995/1701304382d, -48777925059/3047939560d, 15336726248/1032824649d, -45442868181/3398467696d, 3065993473/597172653d},
          new double[] { 185892177/718116043d, 0, 0, -3185094517/667107341d, -477755414/1098053517d,  -703635378/230739211d, 5731566787/1027545527d, 5232866602/850066563d, -4093664535/ 808688257d, 3962137247/1805957418d,  65686358/487910083d },
          new double[] { 403863854/491063109d, 0, 0, -5068492393/434740067d, -411421997/543043805d, 652783627/914296604d, 11173962825/925320556d, -13158990841/6184727034d, 3936647629/ 1978049680d, -160528059/685178525d, 248638103/1413531060d,  0},
         };

    /// <summary>Bottom side scheme coefficients 8th order, see [2] p.693</summary>
    private static readonly double[] _sbh = new double[] { 14005451 / 335480064d, 0, 0, 0, 0, -59238493 / 1068277825d, 181606767 / 758867731d, 561292985 / 797845732d, -1041891430 / 1371343529d, 760417239 / 1151165299d, 118820643 / 751138087d, -528747749 / 2220607170d, 1 / 4d };

    /// <summary>Bottom side scheme coefficients 7th order, see [2] p.693</summary>
    private static readonly double[] _sbl = new double[] { 13451932 / 455176623d, 0, 0, 0, 0, -808719846 / 976000145d, 1757004468 / 5645159321d, 656045339 / 265891186d, -3867574721 / 1518517206d, 465885868 / 322736535d, 53011238 / 667516719d, 2 / 45d, 0 };

    /// <summary>Bottom side scheme coefficients 8th order minus scheme coefficents 7th order, see [2] p.693</summary>
    private static readonly double[] _sbhml = new double[] { 19478166 / 1597320223d, 0, 0, 0, 0, 151758317 / 196284734d, -73268277 / 1018632277d, -258320912 / 146454165d, 361426111 / 202232399d, -106217201 / 135656655d, 79092227 / 1004066684d, -134149358 / 474774259d, 1 / 4d };

    /// <summary>Left side scheme coefficients, see [2] p.693</summary>
    private static readonly double[] _sc = new double[] { 0, 1 / 18d, 1 / 12d, 1 / 8d, 5 / 16d, 3 / 8d, 59 / 400d, 93 / 200d, 5490023248 / 9719169821d, 13 / 20d, 1201146811 / 1299019798d, 1, 1 };

    /// <inheritdoc/>
    public override int Order => 8;

    /// <inheritdoc/>
    public override int NumberOfStages => 13;

    /// <inheritdoc/>
    protected override double StiffnessDetectionThresholdValue => 6.1;

    /// <inheritdoc/>
    protected override double[][] A => _sa;

    /// <inheritdoc/>
    protected override double[] BH => _sbh;

    /// <inheritdoc/>
    protected override double[] BHML => _sbhml;

    /// <inheritdoc/>
    protected override double[] C => _sc;

    #region Coefficients with still more accuracy (for 16 byte floating point in a future C# version?)
#if false

    // for calculation of these coefficients see http://www.peterstone.name/Maplepgs/Maple/nmthds/RKcoeff/Runge_Kutta_schemes/RK8/RKcoeff8d_1.pdf

    private static readonly double[] _sc = new double[]
      {
        0,
        0.5555555555555555555555555555555555555555555555555555555555555555555555555555555555556e-1,
        0.8333333333333333333333333333333333333333333333333333333333333333333333333333333333333e-1,
        0.125,
        0.3125,
        0.375,
        0.1475,
        0.465,
        0.5648654513822595753983585014261682587385670087264133215107858541861772043626893634869,
         0.65,
         0.9246562776405044467450135743183695426492034467027398177693057974193090932038137681734,
         1,
         1,
        };



    private static readonly double[][] _sa = new double[][]
        {
        new double[]
          {
          },
        new double[]
          {
          0.5555555555555555555555555555555555555555555555555555555555555555555555555555555555556e-1
          },
        new double[]
          {
          0.2083333333333333333333333333333333333333333333333333333333333333333333333333333333333e-1,
          0.625e-1,
          },
        new double[]
          {
          0.3125e-1,
          0,
          0.9375e-1,
          },
        new double[]
          {
          0.3125,
          0,
          -1.171875,
          1.171875,
          },
        new double[]
          {
          0.375e-1,
          0,
          0,
          0.1875,
          0.15,
          },
        new double[]
          {
          0.4791013711111111111111111111111111111111111111111111111111111111111111111111111111111e-1,
          0,
          0,
          0.1122487127777777777777777777777777777777777777777777777777777777777777777777777777778,
          -0.2550567377777777777777777777777777777777777777777777777777777777777777777777777777778e-1,
          0.1284682388888888888888888888888888888888888888888888888888888888888888888888888888889e-1,
          },
        new double[]
          {
          0.1691798978729228118143110713603823606551492879543441068765183916901985069878116840258e-1,
          0,
          0,
          0.3878482784860431695265457441593733533707275558526027137301504136188413357699752956243,
          0.3597736985150032789670088963477236800815873945874968299566918115320174598617642813621e-1,
          0.1969702142156660601567152560721498881281698021684239074332818272245101975612112344987,
          -0.1727138523405018387613929970023338455725710262752107148467532611655731300161441266618,
          },
        new double[]
          {
          0.6909575335919230064856454898454767856104137244685570409618590205329379141801779261271e-1,
          0,
          0,
          -0.6342479767288541518828078749717385465426336031120747443029278238678259156558727343870,
          -0.1611975752246040803668769239818171234422237864808493434053355718725564004275765826294,
          0.1386503094588252554198669501330158019276654889495806914244800957316809692178564181463,
          0.9409286140357562697242396841302583434711811483145028697758469500622977999086075976730,
          0.2116363264819439818553721171319021047635363886083981439225363020792869599016568720713,
          },
        new double[]
          {
          0.1835569968390453854898060235368803084497642516277329033567822939550366893470341427061,
          0,
          0,
          -2.468768084315592452744315759974107457777649753547732495587510208118948846864075671103,
          -0.2912868878163004563880025728039519800543380294081727678722180378521228988619909525814,
          -0.2647302023311737568843979946594614325963055282676866851254669985184857900430792761417e-1,
          2.847838764192800449164518254216773770231582185011953158945518598604677368771006006947,
          0.2813873314698497925394036418267117820980705455360140173438806414700945017562775967023,
          0.1237448998633146576270302126636397203122013536069738523260934117931117648560568049432,
          },
        new double[]
          {
          -1.215424817395888059160510525029662994880024988044112261492933435562347094075572196306,
          0,
          0,
          16.67260866594577243228041328856410774858907460078758981907659463146817850515953150318,
          0.9157418284168179605957186504507426331593736334298114556675054711691705693180672015549,
          -6.056605804357470947554505543091634004081967083324413691952297768849489422976536037188,
          -16.00357359415617811184170641007882303068079304063907122528682690677051264091851070681,
          14.84930308629766255754539189802663208272299893302745636963476380528935538206408294404,
          -13.37157573528984931829304139618159579089195289469740214314819172008509426917249413996,
          5.134182648179637933173253611658602898712494286162881495270691720760048063805245199662,
          },
        new double[]
          {
          0.2588609164382642838157309322317577667296307766301063163257807024364127266506000943372,
          0,
          0,
          -4.774485785489205112310117509706042746829391853746564335432052648850273207666153414325,
          -0.4350930137770325094407004118103177819323551661617974116300885410959889587870529265443,
          -3.049483332072241509560512866312031613982854911220735245095857885009959537455491093975,
          5.577920039936099117423676634464941858623588944531498679305832747426169795721583100328,
          6.155831589861040097338689126688954481197754937462937466615262374558053507207577588692,
          -5.062104586736938370077406433910391644990220712141673880668482097753119682588189892664,
          2.193926173180679061274914290465806019788262707389033759251111926114017568440058142981,
          0.1346279986593349415357262378873236613955852772571946513284934221746877884770684011715,
          },
       new double[]
          {
          0.8224275996265074779631682047726665909572303617765850630130165537026064642659285212794,
          0,
          0,
          -11.65867325727766428397655303545841477547369082638864247596731917545919361630644756876,
          -0.7576221166909361958811161540882449653663757591954118634754438929149012424414834787423,
          0.7139735881595815279782692827650546753142248878566301594716125352788068216039494192152,
          12.07577498689005673956617044860067967095705800972197897084832370633043082304810801069,
          -2.127659113920402656390820858969398635427927973275119750336406473203376323696576615278,
          1.990166207048955418328071698344314152176173017359794982793519250552799420955298804232,
           -.2342864715440402926602946918568015314512425817004394700255034276765120670064339827205,
           0.1758985777079422650731051058901448183145508638446243836782009233893397195776568900819,
           0,
          }
        };




    private static readonly double[] _bh = new double[]
      {
        0.4174749114153024622208592846850711513419360280744778485846131359556941056165592859127e-1,
        0,
        0,
        0,
        0,
        -0.5545232861123930896152189465471671889359328156519226303661201143086248409346173220672e-1,
        0.2393128072011800970467473542487569696603053593110659071772286813575015789696127063297,
        0.7035106694034430230580464108897021513663799729422329988912282232809616439130702896567,
        -0.7597596138144609298844876770850584076554230192157088121727371293320966312254783676226,
        0.6605630309222863414613785948378206399404197125341442757648140724130090459250911959182,
        0.1581874825101233355296148386006854439728567324034642678211136427219891617064005758134,
        -0.2381095387528628044718635553056971935251390792174541593034967926060717257568905964800,
        0.25,
      };


    private static readonly double[] _bl = new double[]
      {
        0.2955321367635349698196488311203224657733277925009198076731622388624965866492863628737e-1,
        0,
        0,
        0,
        0,
        -0.8286062764877970397668056126887191847354037544018122961965538027330129339209559093501,
        0.3112409000511183279299137516268570512897363217826855582698888340873138124416908811814,
        2.467345190599886981964685704068761458562259575475834628418174165533324998199993514039,
        -2.546941651841908739127380075415708961780905163114681004322493329883513805107784462867,
        1.443548583676775240301874950690104268511068010189240811834537552274685797398657155566,
        0.7941559588112728727130195416222867713146778637419587678468591239050802787902574069868e-1,
        0.4444444444444444444444444444444444444444444444444444444444444444444444444444444444444e-1,
        0,
       };

       private static readonly double[] _bhml =
       {
       0.0121942774651767492401210453564748685568608235573558040911450897093197518967272923039,
       0,
       0,
       0,
       0,
       0.773153947876557730805283718034002465841810472836620033159941791302150449827494177143,
       -0.071928092849938230883166397378100081629430962471619651092660152729812233472078174852,
       -1.76383452119644395890663929317905930719587960253360162952694594225236335428692322438,
       1.78718203802744780924289239833065055412548214389897219214975620055141717388230609524,
       -0.78298555275448889884049635585228362857064829765509653606972347986167675147356595965,
       0.078771886628996048258312884438456766841388946029268391036427730331481133827374835115,
      -0.282553983197307248916307999750141637969583523661898603747941237050516170201335040924,
      0.25
       }


#endif
    #endregion
  }
}
