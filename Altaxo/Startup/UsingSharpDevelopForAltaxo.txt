24.10.03
Experimente mit eigenen Conditions. Geht gut, musste aber AddIn.xsd
im Module ICSharpCode.Core ändern, damit meine Conditions überhaupt
eingelesen werden. Bis jetzt die einzige Änderung am OriginalCode,
wo mir nichts einfällt, wie man sie umgehen kann.


26.10.03

Habe die Projekt-Logik von Altaxo von der Workbench-Logik getrennt,
in der Hoffnung,
die Workbench von SharpDevelop nutzen zu können.
Geht leider nicht vollständig, da die Methode "InitializeWorkspace()"
Code enthält, der sich auf den ProjectService bezieht. Meine
Projekte sehen jedoch vollständig anders aus, der ProjektService von
SharpDevelop macht da
wenig Sinn. Vollständiges Neuerstellen von Workbench.cs ist umständlich,
da sich zum Teil das Layout direkt auf die Klasse DefaultWorkbench mittels
Casting bezieht, da müsste man die Layout-Klassen ebenfalls ändern.
Habe deshalb meine Workbench von DefaultWorkbench abgeleitet, und InitializeWorkspace()
geändert. Musste einige Methoden 1:1 kopieren, weil sie in DefaultWorkbench als privat
markiert waren, sie aber in "InitializeWorkspace()" gebraucht werden.

Vorschlag: die meisten Methoden als protected virtual zu deklarieren, nur mit den hartkodierten Strings wird das natürlich schwierig, die müsste man dann auch als
protected virtual durch einen Methoden oder Property-Aufruf deklarieren.



27.10.03

Wollte meine Graph-Tools in die Toolbar legen, musste aber feststellen,
das der Toolbar-Service keine Toggle-ToolbarButtons erstellt.
Musste eigenen Toolbar-Service erstellen, der bei Vorliegen eines 
ICheckableMenuCommands ein Item vom Typ SdMenuCheckBox erstellt (statt eines
Items vom Typ SdMenuCommand. Jetzt werden in der Toolbar also "gecheckte"
Buttons eingedrückt dargestellt. Musste auch in meiner eigenen Workbench-Klasse die 
Methode CreateToolbars ändern, damit der neue AltaxoToolbarService benutzt wird.

nachfolgend die geänderte Methode CreateToolBarFromCodon aus AltaxoToolbarService.cs, die bei Vorliegen eines ICheckableMenuCommand
ein Item vom Typ SdMenuCheckBox erstellt (sonst ist alles wie gehabt).
---------------------------------- Begin Code -----------------------------------------------------------

		public CommandBar CreateToolBarFromCodon(object owner, ToolbarItemCodon codon)
		{
			CommandBar bar = new CommandBar(CommandBarStyle.ToolBar);
			
			ResourceService resourceService = (ResourceService)ServiceManager.Services.GetService(typeof(IResourceService));
			foreach (ToolbarItemCodon childCodon in codon.SubItems) 
			{
				CommandBarItem item;
				
				if (childCodon.ToolTip != null) 
				{
					if (childCodon.ToolTip == "-") 
					{
						item = new CommandBarSeparator();
					} 
					else 
					{
						ICommand command = null;
						
						if (childCodon.Class != null) 
						{
						command = 	(ICommand)childCodon.AddIn.CreateObject(childCodon.Class);
						}

						if(command is ICheckableMenuCommand)
						{
							item = new SdMenuCheckBox(childCodon.Conditions, owner, childCodon.ToolTip, (ICheckableMenuCommand)command);
						}
						else
						{
							item = new SdMenuCommand(childCodon.Conditions, owner, childCodon.ToolTip);
							((SdMenuCommand)item).Command = command;
						}
						item.Image = resourceService.GetBitmap(childCodon.Icon);
					}
				} 
				else 
				{
					continue;
				}
					bar.Items.Add(item);
			}
			return bar;
		}
---------------------------------- End Code -------------------------------------------------------------

28.10.03

Bei der "Verdrahtung" meiner togglebaren Toolbar-Buttons ist eine Schwierigkeit aufgetreten: wenn ich einen
Button gedrückt habe, sollten die anderen Buttons rausspringen (Verhalten wie Radiobuttons). Das geht auch wunderbar,
indem man einfach den Status aller Buttons mit der Methode "UpdateToolbars()" aus der Workbench aktualisiert. Leider ist diese Methode
nicht Bestandteil des IWorkbench Interfaces, so dass man diesen hässlichen Cast machen muss:

((ICSharpCode.SharpDevelop.Gui.DefaultWorkbench)ICSharpCode.SharpDevelop.Gui.WorkbenchSingleton.Workbench).UpdateToolbars();
 

06.10.03

:( Der PropertyService entwickelt sich zur harten Nuss: hier ist insbesondere der Pfad zur XML Datei hartkodiert. Altaxo soll aber sicherlich nicht die Eigenschaften von SharpDevelop
laden bzw. diese überschreiben. Das angedachte Austauschen durch den eigenen PropertyService wird nichts, da der Sharpdevelop-PropertyService
hartkodiert im Konstruktor von ServiceManager geladen wird. Ich kann den einmal geladenen Propertyservice auch nicht wieder rausschmeissen.
Vorschlag: Im Konstruktor von PropertyService alle Strings aus der Applications- .config Datei abfragen, wie ja schon mit dataDirectory geschehen. Das betrifft insbesondere
die vier Strings propertyFileName, propertyFileVersion, propertyXmlRootNodeName und configDirectory

nachfolgend das Stückchen Code aus PropertyServices.cs (die StringDefinitionen und den Konstruktor), das ich ausgetauscht habe
-----------------------  Begin --------------------------------------------------
	  static string propertyFileName    = "SharpDevelopProperties.xml";
		
		static string propertyFileVersion = "1.1";
		
		static string propertyXmlRootNodeName  = "SharpDevelopProperties";
		
		static string dataDirectory;
		
		static string configDirectory;

		static PropertyService()
		{

			// Data Directory
			string confDataDirectory = System.Configuration.ConfigurationSettings.AppSettings["DataDirectory"];
			
			if (confDataDirectory != null) 
			{
				dataDirectory = confDataDirectory;
			} 
			else 
			{
				dataDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + 
					Path.DirectorySeparatorChar + ".." +
					Path.DirectorySeparatorChar + "data";
			}

			
			// Config Directory
			string confConfigDirectory = System.Configuration.ConfigurationSettings.AppSettings["ApplicationUserDataDirectory"];
			if(confConfigDirectory==null)
				confConfigDirectory = ".ICSharpCode" + Path.DirectorySeparatorChar + "SharpDevelop";


#if !LINUX
			configDirectory = System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Path.DirectorySeparatorChar + confConfigDirectory +	Path.DirectorySeparatorChar;
#else
			configDirectory = "~" +	Path.DirectorySeparatorChar + confConfigDirectory +	Path.DirectorySeparatorChar;
#endif

			// Property file name
			string confPropertyFileName = System.Configuration.ConfigurationSettings.AppSettings["PropertyFileName"];
			if(confPropertyFileName!=null)
				propertyFileName = confPropertyFileName;

			// Property file version
			string confPropertyFileVersion = System.Configuration.ConfigurationSettings.AppSettings["PropertyFileVersion"];
			if(confPropertyFileVersion!=null)
				propertyFileVersion = confPropertyFileVersion;
		

			// Xml Root node name
			string confPropertyXmlRootNodeName = System.Configuration.ConfigurationSettings.AppSettings["PropertyXmlRootNodeName"];
			if(confPropertyXmlRootNodeName!=null)
				propertyXmlRootNodeName = confPropertyXmlRootNodeName;


		}
		
-----------------------  End   --------------------------------------------------



**************************** bis hierhin hatte ich sie abgeschickt *******************************************************
SdiLayout verwendet die Datei MdiLayoutConfig.xml, soll das so sein ??


11.11.2003

Habe zuerst DefaultParserService leicht abgeändert, um auch zuzulassen, dass
man C#-Skripte in modalen Dialogboxen schreiben kann. Das geht jetzt gut.

Mußte dann noch in AssemblyInformation etwas ändern, denn es gab ein
merkwürdiges Problem beim Debuggen: es war plötzlich nur noch Debuggen
im Disassemblermodus möglich. Die Ursache war, dass ich für meine Scripte
die Parseinformation aus Altaxo selbst benötige, also aus dem laufenden Programm.
Also fix ein "Dummy-Project" zusammengebastelt, das für die benötigten Dateien
AltaxoBase.dll usw. Referenzen enthält. Tja, nun lädt er diese Assemblies
in AssemblyInformation.cs nochmal rein, obwohl sie ja schon am Laufen sind.
Und zu allem Überfluß nun scheinbar ohne Debugginginformationen :(
Musste also AssemblyInforamation.cs so abändern, dass zuerst nachgeguckt
wird, ob die Assemblies schon geladen sind, und wenn sie geladen sind,
werden gleich die geladenen Assemblies verwendet.

25.11.2003

Habe endlich die ExceptionDialogBox so abgeändert, dass nun keine Gefahr mehr
besteht, dass Fehler in Altaxo an das SharpDevelop-Team berichtet werden. Ihr habt
sicherlich auch so genug zu tun.


Problem: Habe das Problem, das in meiner modalen DialogBox, in der ich 
ein SharpDevelopTextAreaControl plaziert habe, nun das Contextmenu
meistens ins Leere führt und zum Teil sogar echt böse ist. Z.B. führt
der Contextmenüpunkt Close nun nicht etwa zum Schließen der DialogBox,
sondern zum Schließen des gerade aktiven Fensters in der Anwendung.

Augenscheinlichste Lösung: ich ersetze in DefaultTextEditor.addin
die ContextMenüPunkte durch eigene Versionen.


************************ bis hierhin am 3.12.2003 gesendet ***************************************