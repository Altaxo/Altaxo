#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_Water_H2S"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_Water_H2S : MixtureTestBase
  {

    public Test_Mixture_Water_H2S()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("7732-18-5", 0.5), ("7783-06-4", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.400936892319365, 999.999999998377, -7.35519712463941E-05, 25.816320295202, 2 ),
      ( 300, 4.01202672611402, 9999.99998353022, -0.000735962171865915, 25.831044625502, 2 ),
      ( 300, 40.3898063028373, 99999.9999999986, -0.00740449298441876, 25.9794454916676, 2 ),
      ( 300, 435.43426645778, 999999.999999983, -0.0792929415456027, 27.6362656668055, 2 ),
      ( 300, 23258.9476500066, 10000000.0015908, -0.827633043113083, 36.8059307636846, 1 ),
      ( 300, 26738.0208359145, 100000000.000832, 0.499390718123462, 38.1406287508639, 1 ),
      ( 350, 0.343650461671903, 999.999999999983, -4.5235323978534E-05, 26.464120527403, 2 ),
      ( 350, 3.43790483703947, 9999.99999783351, -0.000452505753786556, 26.4716261176625, 2 ),
      ( 350, 34.5202280532086, 100000, -0.00454042189753116, 26.5470330524171, 2 ),
      ( 350, 360.606931202382, 999999.990120091, -0.0470651366547681, 27.340926253201, 2 ),
      ( 350, 19001.7201749963, 9999999.99999987, -0.81915589043138, 35.8735173137057, 1 ),
      ( 350, 24930.2140791106, 100000000.010119, 0.378387347464595, 36.6383571614863, 1 ),
      ( 400, 0.300689430229513, 999.999999999945, -2.95263590214231E-05, 27.2199851002836, 2 ),
      ( 400, 3.00769374850079, 9999.99999945125, -0.000295318912287733, 27.2242468263403, 2 ),
      ( 400, 30.1572828835405, 99999.9942810156, -0.00295874406424532, 27.26699437207, 2 ),
      ( 400, 310.033294143528, 999999.999874029, -0.0301668961158439, 27.7080649048814, 2 ),
      ( 400, 5053.84761640633, 9999999.98299247, -0.405046263146162, 34.6862353828085, 2 ),
      ( 400, 23133.9536585479, 100000000, 0.299736985745811, 35.7593368971061, 1 ),
      ( 500, 0.240547783700342, 999.99790414721, -1.38937924608728E-05, 28.9016920484478, 2 ),
      ( 500, 2.40577867961422, 9999.99999999971, -0.000138942078715464, 28.9034388041158, 2 ),
      ( 500, 24.0879217266541, 99999.9999969771, -0.00138980729780912, 28.920932718434, 2 ),
      ( 500, 243.944259874715, 999999.999999999, -0.013936865348286, 29.0984830064599, 2 ),
      ( 500, 2804.26558620441, 9999999.99999999, -0.14221947180853, 31.0840227743273, 2 ),
      ( 500, 19692.8562206428, 100000000.000096, 0.221480718070594, 35.1359593565332, 1 ),
      ( 600, 0.20045507830406, 999.998366775833, -6.86932717283153E-06, 30.6950891579822, 2 ),
      ( 600, 2.00467471219114, 9999.99999999992, -6.86889934591483E-05, 30.6959923894899, 2 ),
      ( 600, 20.0591397422692, 99999.9999992573, -0.000686450735937294, 30.7050322087171, 2 ),
      ( 600, 201.830266946696, 999999.993170359, -0.00682041219976886, 30.7961597521593, 2 ),
      ( 600, 2140.15370964447, 9999999.99999938, -0.0633677365931069, 31.7551065950451, 2 ),
      ( 600, 16691.8034642308, 100000000.000001, 0.200910984482569, 35.3970226988587, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.400969091681348, 999.999999920866, -0.000147810669226407, 25.5602535087294, 2 ),
      ( 350, 0.34366474397835, 999.999999992039, -8.07526281999155E-05, 26.0185866239933, 2 ),
      ( 350, 3.43915061522132, 9999.99991837833, -0.000808540840106703, 26.0581597521061, 2 ),
      ( 400, 0.300697246309018, 999.99999999739, -4.9478937797359E-05, 26.5863017383596, 2 ),
      ( 400, 3.00831303176653, 9999.99997350348, -0.000495078291408138, 26.6046323997599, 2 ),
      ( 400, 30.2187227102673, 99999.9999999977, -0.00497988939090403, 26.7923613687754, 2 ),
      ( 500, 0.240551281324318, 999.999999999848, -2.23936507442526E-05, 27.9083637724815, 2 ),
      ( 500, 2.4059978364719, 9999.99999845581, -0.000223978357029768, 27.9144003086631, 2 ),
      ( 500, 24.1086888290796, 99999.9839431382, -0.00224397811136428, 27.9751204176837, 2 ),
      ( 500, 246.175845348435, 999999.999289601, -0.022869631394761, 28.6181042102396, 2 ),
      ( 500, 29394.6221086685, 99999999.9998096, -0.181666994686013, 43.1311214790199, 1 ),
      ( 600, 0.200457234955717, 999.987878691386, -1.15877173462825E-05, 29.3543892138651, 2 ),
      ( 600, 2.00478144839493, 9999.99999987983, -0.000115886715379694, 29.3571024583274, 2 ),
      ( 600, 20.0687645725076, 99999.9985233975, -0.00115968093078847, 29.3842849944895, 2 ),
      ( 600, 202.823533921175, 999999.999998119, -0.0116782396480161, 29.6610867378055, 2 ),
      ( 600, 2290.34030032102, 9999999.99999932, -0.124781098871245, 32.8754315673362, 2 ),
      ( 600, 24442.1506623376, 100000000.000241, -0.179880220627038, 40.9170957000167, 1 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.401105581954771, 999.99999976849, -0.000482008258236353, 25.4054525793409, 2 ),
      ( 300, 55288.5119421062, 1000000.00001388, -0.992748724253006, 74.3346610365149, 1 ),
      ( 300, 55509.8882657881, 9999999.99995963, -0.92777642717873, 73.8167860680203, 1 ),
      ( 300, 57517.6066557328, 99999999.9998255, -0.302974742758815, 69.8039781647196, 1 ),
      ( 350, 0.343707898478162, 999.999999941006, -0.000200259264375423, 25.596879994434, 2 ),
      ( 350, 3.44333120414533, 9999.99935370686, -0.00201564281902346, 25.8884174189039, 2 ),
      ( 350, 54016.2175805001, 1000000.00004091, -0.993638224162957, 70.0071228475245, 1 ),
      ( 350, 54235.9558375464, 9999999.99997099, -0.936639990485913, 69.6989171521568, 1 ),
      ( 350, 56204.4309121695, 100000000.000591, -0.388590788640574, 67.119040104769, 1 ),
      ( 400, 0.300715674792096, 999.999999994052, -0.000104718446339315, 25.9602813425882, 2 ),
      ( 400, 3.01000216173108, 9999.9999382098, -0.00104993897099248, 26.0623041417036, 2 ),
      ( 400, 30.3961210888682, 99999.9999987227, -0.01078106801199, 27.1665869204736, 2 ),
      ( 400, 52000.7000323345, 1000000.00017775, -0.994217689681439, 65.3871252373256, 1 ),
      ( 400, 52253.1023900699, 10000000.0000078, -0.942456204404968, 65.1984070926452, 1 ),
      ( 400, 54440.6751502708, 100000000.003442, -0.447684688895226, 63.5533080392701, 1 ),
      ( 500, 0.240557148637659, 999.999999998939, -4.07436928857262E-05, 26.916416061432, 2 ),
      ( 500, 2.40645456632198, 9999.99998924082, -0.000407691806812965, 26.9391076166676, 2 ),
      ( 500, 24.1538276922471, 99999.9999999997, -0.00410257736611714, 27.1714982846921, 2 ),
      ( 500, 251.563279478121, 999999.999999979, -0.0437899046709056, 30.0752603148317, 2 ),
      ( 500, 46452.9798195984, 9999999.99999888, -0.948217025391765, 57.9944818051614, 1 ),
      ( 500, 49854.5567146333, 99999999.9999987, -0.517501782579193, 57.2931030475194, 1 ),
      ( 600, 0.200460138831664, 999.999999999996, -2.00336874579557E-05, 28.0141181654933, 2 ),
      ( 600, 2.00496298483326, 9999.99999930123, -0.000200380793721673, 28.0223612241347, 2 ),
      ( 600, 20.0859491137911, 99999.9912095386, -0.00200821093321588, 28.1054377648792, 2 ),
      ( 600, 204.658632488801, 999999.999796237, -0.020534240656857, 29.0018264570432, 2 ),
      ( 600, 2760.55525728555, 10000000.0000012, -0.273855785545879, 47.1784491869193, 2 ),
      ( 600, 43875.8633547073, 100000000.000002, -0.543128937987286, 52.7473835633053, 1 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
