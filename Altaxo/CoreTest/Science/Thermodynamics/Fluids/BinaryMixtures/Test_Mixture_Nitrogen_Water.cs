#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_Nitrogen_Water"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_Nitrogen_Water : MixtureTestBase
  {

    public Test_Mixture_Nitrogen_Water()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("7727-37-9", 0.5), ("7732-18-5", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.401104914544199, 999.999999771151, -0.000480349698294147, 25.3994881244932, 2 ),
      ( 300, 55504.0061437676, 10000000.0001052, -0.927768773505178, 74.0209404379985, 1 ),
      ( 300, 57510.7965913817, 99999999.9999535, -0.30289220862657, 69.9817161365242, 1 ),
      ( 300, 68622.2102484463, 1000000000.00005, 4.84231027342282, 61.6528249246675, 1 ),
      ( 350, 0.343707752341964, 999.999999727811, -0.000199838743225008, 25.5910876028923, 2 ),
      ( 350, 3.44331630709687, 9999.99983074299, -0.00201132983104272, 25.880902923563, 2 ),
      ( 350, 56200.4929225377, 100000000.000038, -0.388547949765501, 67.2309298373493, 1 ),
      ( 350, 67229.6492287087, 1000000000.00007, 4.11142137671545, 60.3162977745314, 1 ),
      ( 400, 0.300715634910287, 999.999999994041, -0.000104590407149328, 25.9539395434796, 2 ),
      ( 400, 3.00999823279097, 9999.99993809011, -0.00104863961059157, 26.0554486142856, 2 ),
      ( 400, 30.3956613978046, 99999.9999987039, -0.0107661120079756, 27.1537932925194, 2 ),
      ( 400, 52243.796892766, 10000000.0158441, -0.942445955061225, 65.2655292307222, 1 ),
      ( 400, 54434.9232479059, 100000000.003441, -0.447626330655114, 63.6229878038771, 1 ),
      ( 500, 0.240557144432769, 999.999999998936, -4.07307840137997E-05, 26.908769528698, 2 ),
      ( 500, 2.40645424137831, 9999.99998920426, -0.000407561400333451, 26.9313801876205, 2 ),
      ( 500, 24.1537927373645, 99999.9999999998, -0.00410114067508917, 27.1629174134558, 2 ),
      ( 500, 251.555712897646, 999999.999999981, -0.0437611470602874, 30.0533226975527, 2 ),
      ( 500, 46428.9968499542, 10000000.0000035, -0.948190277053548, 58.0218181968112, 1 ),
      ( 500, 49840.9535710089, 100000000.000014, -0.517370096041448, 57.3202444963148, 1 ),
      ( 500, 63192.6754511661, 1000000000.00007, 2.80657005949337, 55.0763657876066, 1 ),
      ( 600, 0.200460137981625, 999.999999999997, -2.00340174108328E-05, 28.00521309753, 2 ),
      ( 600, 2.00496298192287, 9999.99999929793, -0.00020038391190526, 28.01343702352, 2 ),
      ( 600, 20.0859492837423, 99999.9911689121, -0.00200822393782613, 28.0963173771768, 2 ),
      ( 600, 204.658269410065, 999999.999794746, -0.0205325074895044, 28.9902536637123, 2 ),
      ( 600, 2759.22670558783, 10000000.0000012, -0.273506154627437, 47.0587730081209, 2 ),
      ( 600, 43853.6892042714, 99999999.9999983, -0.542897928094493, 52.7590000508365, 1 ),
      ( 600, 60512.2193978939, 1000000000.00008, 2.31265526127307, 53.0512593243809, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.400934539309171, 999.989589828749, -6.39281969476847E-05, 23.0482214663687, 2 ),
      ( 350, 0.343648797856219, 999.999999991512, -3.66390975081295E-05, 23.2091050736343, 2 ),
      ( 350, 3.43762183746928, 9999.99999999935, -0.000366465185744421, 23.2180131041868, 2 ),
      ( 400, 0.300688315105105, 999.999999998567, -2.20630123167267E-05, 23.4421200638693, 2 ),
      ( 400, 3.00748042141484, 9999.99998555309, -0.000220653560403124, 23.4477355452007, 2 ),
      ( 400, 30.1347319548703, 99999.9999785406, -0.00220887490819812, 23.5039685572933, 2 ),
      ( 500, 0.240547390745255, 999.999999999945, -8.5053226512939E-06, 24.0891710793461, 2 ),
      ( 500, 2.40565806861134, 9999.99999946112, -8.50580110101089E-05, 24.0919083808271, 2 ),
      ( 500, 24.0750236249752, 99999.9945215672, -0.000851053895515621, 24.1192759153878, 2 ),
      ( 500, 242.62054324347, 999999.997836131, -0.00855326758043975, 24.392397571508, 2 ),
      ( 600, 0.200455082211639, 999.99195621051, -3.07240259373679E-06, 24.9027559064289, 2 ),
      ( 600, 2.00460613673917, 9999.99999998544, -3.07275515813771E-05, 24.904338582268, 2 ),
      ( 600, 20.0516132933665, 99999.9998202019, -0.000307600802888397, 24.9201552539384, 2 ),
      ( 600, 201.078966634929, 999999.999999991, -0.00310580780299599, 25.0773204134482, 2 ),
      ( 600, 2069.76821372958, 9999999.99934666, -0.031512549662425, 26.5501518477939, 2 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.400906330678816, 999.999999999996, -1.85488078461048E-06, 20.816181869628, 2 ),
      ( 300, 4.00913000669414, 9999.99999996126, -1.85289403643299E-05, 20.8168203332173, 2 ),
      ( 300, 40.0979072209206, 99999.9997723041, -0.000183301418452879, 20.8231978894971, 2 ),
      ( 300, 401.561271791811, 999999.999999979, -0.00163287563170335, 20.8862549519398, 2 ),
      ( 350, 0.343632941015318, 1000, 1.15993092780017E-06, 20.8567083863422, 1 ),
      ( 350, 3.43629356971447, 10000.0000000078, 1.16131179906268E-05, 20.8571516464719, 1 ),
      ( 350, 34.3592971370807, 100000.000117402, 0.000117511743021661, 20.8615799681356, 1 ),
      ( 350, 343.182777794562, 1000000.00000009, 0.00131291490720382, 20.9054324011162, 1 ),
      ( 350, 3347.07189467828, 10000000.0000016, 0.0266685580494441, 21.300386175357, 1 ),
      ( 350, 18585.2333889084, 100000000.000011, 0.84895901164638, 23.4923356985495, 1 ),
      ( 400, 0.300678343233282, 1000.00000000001, 2.7255287598973E-06, 20.9402373869128, 1 ),
      ( 400, 3.00670981367595, 10000.0000000764, 2.72649013818148E-05, 20.9405697467263, 1 ),
      ( 400, 30.0596932925484, 100000.000856998, 0.000273609602974207, 20.9438907593328, 1 ),
      ( 400, 299.830200379228, 1000000.00000061, 0.00283153181453535, 20.9768413435496, 1 ),
      ( 400, 2898.58968331018, 10000000.0000004, 0.0373292255317635, 21.2805705358152, 1 ),
      ( 400, 17071.4214408948, 99999999.9999997, 0.761301366574951, 23.1793817689154, 1 ),
      ( 400, 37144.1938513133, 999999999.999999, 7.09491734659409, 30.9560626971357, 1 ),
      ( 500, 0.240542368977641, 1000.00000000001, 3.97112178072117E-06, 21.2714477509104, 1 ),
      ( 500, 2.40533790236672, 10000.0000001539, 3.97161210448583E-05, 21.2716645166315, 1 ),
      ( 500, 24.0447729104723, 100000.001591096, 0.000397650678397511, 21.27383113441, 1 ),
      ( 500, 239.579056883062, 1000000.00000089, 0.00402491950627183, 21.2953929639278, 1 ),
      ( 500, 2302.62386653709, 10000000.0101171, 0.0446488756281476, 21.5005551460348, 1 ),
      ( 500, 14699.1234915005, 100000000.000061, 0.636446849670688, 22.9828004928586, 1 ),
      ( 500, 35606.1830543553, 1000000000, 5.75566215391844, 29.7724578514835, 1 ),
      ( 600, 0.200451922867314, 1000.00000000001, 4.22193299015358E-06, 21.8008261510923, 1 ),
      ( 600, 2.00444322925749, 10000.0000001309, 4.22220110550509E-05, 21.8009857270257, 1 ),
      ( 600, 20.036813305287, 100000.001326784, 0.00042248752397924, 21.8025810031593, 1 ),
      ( 600, 199.60421410706, 1000000.00000047, 0.00425127285857918, 21.8184851413734, 1 ),
      ( 600, 1918.44921563703, 10000000.0090051, 0.0448688683675559, 21.9725276121199, 1 ),
      ( 600, 12935.6957514316, 100000000.000001, 0.549609622396882, 23.1804863047897, 1 ),
      ( 600, 34279.6674733321, 999999999.999995, 4.84757090319233, 29.1811518743868, 1 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
