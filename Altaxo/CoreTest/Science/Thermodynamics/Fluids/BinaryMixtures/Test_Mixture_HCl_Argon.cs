#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_HCl_Argon"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_HCl_Argon : MixtureTestBase
  {

    public Test_Mixture_HCl_Argon()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("7647-01-0", 0.5), ("7440-37-1", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601375748047296, 999.999999993395, -2.89275813351387E-05, 12.4803510321116, 2 ),
      ( 200, 6.0153237402245, 9999.99993342873, -0.00028929834431661, 12.4825883497521, 2 ),
      ( 200, 60.3104480881046, 99999.9999999931, -0.00289523495852471, 12.5050094083063, 2 ),
      ( 200, 619.430089586812, 1000000.00006846, -0.029174782094752, 12.7341360657404, 2 ),
      ( 200, 8469.01327192876, 9999999.9999989, -0.289931031641308, 15.2636544269808, 2 ),
      ( 250, 0.481093103636499, 999.999999999577, -1.33493398795698E-05, 12.4802280908458, 2 ),
      ( 250, 4.81150907020232, 9999.99999576085, -0.000133483400160045, 12.4813424477635, 2 ),
      ( 250, 48.1729225162822, 100000, -0.00133382773534747, 12.4924857271723, 2 ),
      ( 250, 487.537294442387, 999999.999403238, -0.0132310146340839, 12.6038543187871, 2 ),
      ( 250, 5422.73759924874, 10000000, -0.112834297149481, 13.6501955688256, 2 ),
      ( 300, 0.400908020143721, 999.999999999971, -6.11697108603626E-06, 12.4801806537563, 2 ),
      ( 300, 4.00930087788908, 9999.99999971309, -6.11577646572405E-05, 12.4808417953077, 2 ),
      ( 300, 40.115042209926, 99999.9972482527, -0.000610380241616238, 12.4874493804488, 2 ),
      ( 300, 403.317924145694, 999999.999999337, -0.00598127726433141, 12.553128683067, 2 ),
      ( 300, 4196.84237709388, 10000000.000109, -0.0447447586095753, 13.1550892721856, 2 ),
      ( 350, 0.343634171966702, 999.999999999999, -2.36268956404529E-06, 12.480165534605, 2 ),
      ( 350, 3.43641459699251, 9999.99999998774, -2.36172604684596E-05, 12.4806061761854, 2 ),
      ( 350, 34.371418821852, 99999.9998873153, -0.000235208181130327, 12.4850097103168, 2 ),
      ( 350, 344.409861134405, 999999.999999998, -0.00225463144952346, 12.5287526069733, 2 ),
      ( 350, 3477.81027489163, 10000000.0000269, -0.0119261355046238, 12.9328949413697, 1 ),
      ( 400, 0.300679258886254, 999.996756157974, -2.70747239526692E-07, 12.4801766569959, 2 ),
      ( 400, 3.00679987757034, 9999.99999999999, -2.70023397421889E-06, 12.4804952674542, 2 ),
      ( 400, 30.0687077097778, 99999.9999999239, -2.62773084180507E-05, 12.4836795134911, 2 ),
      ( 400, 300.736305538756, 999999.999693755, -0.000189966049919693, 12.5153348998923, 2 ),
      ( 400, 2990.06416286734, 10000000.000076, 0.00559439354107156, 12.8120664656785, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601412956536766, 999.999999938877, -8.7919752271716E-05, 16.6427008843972, 2 ),
      ( 200, 6.01889617281284, 9999.99937439334, -0.000879790536725189, 16.6625301560924, 2 ),
      ( 200, 60.673458709725, 99999.9976578376, -0.00885808480244865, 16.8633631768216, 2 ),
      ( 250, 0.481109451520422, 999.999999994883, -4.44538211947629E-05, 16.6421232268126, 2 ),
      ( 250, 4.81302074392914, 9999.99994826787, -0.00044464804183384, 16.6487301924425, 2 ),
      ( 250, 48.3242124413931, 99999.9999999931, -0.00445751711116557, 16.7152071149224, 2 ),
      ( 250, 504.145518143623, 1000000.0054409, -0.0457357113691984, 17.4230763132186, 2 ),
      ( 300, 0.400916895729417, 999.999999999794, -2.53803812819373E-05, 16.6431609935716, 2 ),
      ( 300, 4.01008504965052, 9999.99999392201, -0.000253821697014516, 16.6459818891129, 2 ),
      ( 300, 40.1927617270629, 100000, -0.00254000202947928, 16.6742785353804, 2 ),
      ( 300, 411.428908646692, 999999.989036087, -0.0255747420844603, 16.9660847110023, 2 ),
      ( 300, 5461.70426318634, 9999999.9999907, -0.265967725480104, 20.5808815809619, 2 ),
      ( 350, 0.343639635331064, 999.999999999888, -1.54337273231284E-05, 16.6477040951934, 2 ),
      ( 350, 3.43687374313446, 9999.99999887474, -0.000154333928939237, 16.6491938316209, 2 ),
      ( 350, 34.416537878772, 99999.9886645013, -0.0015429995850303, 16.6641137428875, 2 ),
      ( 350, 349.005810178922, 999999.999890905, -0.015390799611472, 16.8155212909523, 2 ),
      ( 350, 4014.65960625778, 9999999.98706841, -0.144051138928409, 18.4598371773325, 2 ),
      ( 400, 0.300682950852044, 999.999999999978, -9.68003915820702E-06, 16.6599827104881, 2 ),
      ( 400, 3.00709146637273, 9999.99999978498, -9.67925594957155E-05, 16.6609080749985, 2 ),
      ( 400, 30.0971121252714, 99999.9978595289, -0.000967139358482071, 16.6701678700219, 2 ),
      ( 400, 303.591402890595, 999999.999998116, -0.0095897401361288, 16.7633509408106, 2 ),
      ( 400, 3285.37865080774, 9999999.99466417, -0.0847933459127154, 17.7166575752777, 2 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601502381718365, 999.99999999989, -0.000233702304271542, 20.8128972707117, 2 ),
      ( 200, 6.02773605517998, 9999.99999888483, -0.00234216673992477, 20.9213990514039, 2 ),
      ( 200, 61.6124642210412, 99999.987599397, -0.0239607866571297, 22.037219198017, 2 ),
      ( 200, 31763.9906947499, 1000000.00045353, -0.981067813071341, 36.7153079988377, 1 ),
      ( 200, 32115.6965816489, 9999999.99999939, -0.812751435207139, 36.8021758748329, 1 ),
      ( 250, 0.481139798648441, 999.999999999968, -0.000104649974908337, 20.8069908000233, 2 ),
      ( 250, 4.81593881037936, 9999.99999966402, -0.00104742538700016, 20.8461008450165, 2 ),
      ( 250, 48.6228165142634, 99999.996352423, -0.010568531036358, 21.2423860064437, 2 ),
      ( 250, 545.073194141755, 999999.999346543, -0.117385605091756, 25.8517385797913, 2 ),
      ( 250, 28465.5744851035, 10000000.0005712, -0.830992538844024, 34.4871719544795, 1 ),
      ( 300, 0.400930857354488, 999.99042964962, -5.73273843412073E-05, 20.8072613844381, 2 ),
      ( 300, 4.01137928782586, 9999.99999992242, -0.000573508384293228, 20.8225478693019, 2 ),
      ( 300, 40.3229738942787, 99999.9991100082, -0.00575817174434358, 20.9765724650962, 2 ),
      ( 300, 426.540691484309, 999999.999993035, -0.0600946619600775, 22.6438649521791, 2 ),
      ( 300, 23257.5991057126, 9999999.99987064, -0.827622846627372, 33.5159920091047, 1 ),
      ( 350, 0.343647463208583, 999.989365370572, -3.53371497743627E-05, 20.8156853161733, 2 ),
      ( 350, 3.43756816677406, 9999.9999999799, -0.000353439157996802, 20.8224265830257, 2 ),
      ( 350, 34.4856386660961, 99999.9997946928, -0.00354079885147541, 20.8901621303221, 2 ),
      ( 350, 356.492648945625, 999999.999999877, -0.0360661837658935, 21.6010109006222, 2 ),
      ( 350, 6389.39020959632, 9999999.99998386, -0.462178223139113, 32.9293065096681, 2 ),
      ( 400, 0.300687927514269, 999.994356689957, -2.33559818276235E-05, 20.8399701096797, 2 ),
      ( 400, 3.00751153042042, 9999.99999999626, -0.000233576591362762, 20.8433515783004, 2 ),
      ( 400, 30.138533492018, 99999.9999624008, -0.00233730784036624, 20.877272788734, 2 ),
      ( 400, 307.924323194938, 1000000, -0.0235233725836155, 21.2272309808597, 2 ),
      ( 400, 3977.44965268372, 9999999.99059764, -0.244035925124232, 25.687798161381, 2 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
