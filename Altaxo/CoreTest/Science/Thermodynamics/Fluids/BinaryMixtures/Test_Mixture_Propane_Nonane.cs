#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_Propane_Nonane"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_Propane_Nonane : MixtureTestBase
  {

    public Test_Mixture_Propane_Nonane()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("74-98-6", 0.5), ("111-84-2", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 5564.31008617967, 1000000.00147802, -0.927950205586651, 229.240156761496, 1 ),
      ( 300, 5621.35614019001, 10000000.0000008, -0.286813737207932, 229.891962932935, 1 ),
      ( 300, 6016.66784841516, 100000000.000001, 5.66327954057468, 235.462980429925, 1 ),
      ( 350, 0.344026491791659, 999.999997042496, -0.00113822460575113, 231.814725397595, 2 ),
      ( 350, 5254.70545884761, 1000000.00012962, -0.934604343729714, 253.776235845708, 1 ),
      ( 350, 5331.51364320885, 10000000.0000132, -0.355464629072214, 254.386706148442, 1 ),
      ( 350, 5812.25848807053, 100000000.000027, 4.91224414877263, 259.626755806187, 1 ),
      ( 400, 0.30088401603254, 999.999259050618, -0.000676232518049374, 260.314963543479, 2 ),
      ( 400, 3.02740225579231, 9999.99360780497, -0.00680344313145044, 260.619988413356, 2 ),
      ( 400, 4917.47558496403, 100000.000004801, -0.993885469421351, 279.025167772172, 1 ),
      ( 400, 4929.48583673157, 999999.999999431, -0.939003669365564, 279.077182517109, 1 ),
      ( 400, 5036.27622305591, 10000000.0001548, -0.402970498421327, 279.617802330423, 1 ),
      ( 400, 5620.0094366834, 100000000.000005, 4.35017870901148, 284.566416806079, 1 ),
      ( 500, 0.240614509179508, 999.99996197853, -0.000291214841505726, 312.964329946381, 2 ),
      ( 500, 2.41248688403307, 9999.99999996873, -0.00291918578320963, 313.072602453486, 2 ),
      ( 500, 24.796711214262, 100000.003027813, -0.0299341055716838, 314.189512351582, 2 ),
      ( 500, 4147.52307414054, 1000000.00000026, -0.942002869097363, 327.885210576702, 1 ),
      ( 500, 4400.57067209846, 10000000.0000014, -0.453378989717411, 327.809315383632, 1 ),
      ( 500, 5264.82749356735, 100000000.002023, 3.5688949725132, 332.017200674754, 1 ),
      ( 600, 0.200483332160309, 999.999996463757, -0.000147809176845046, 357.658903335708, 2 ),
      ( 600, 2.00750718842957, 9999.99999999991, -0.00147954617862515, 357.705715789977, 2 ),
      ( 600, 20.3494744417859, 100000.000033173, -0.0149440979550821, 358.181159805611, 2 ),
      ( 600, 241.105141072548, 999999.999995442, -0.168604626212097, 363.882954698763, 2 ),
      ( 600, 3646.85389625363, 10000000.0003989, -0.450338004775356, 370.399440306712, 1 ),
      ( 600, 4943.5051919978, 100000000.017392, 3.05489002493803, 373.149883436725, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 300, 0.401209092001136, 999.988272333208, -0.000751953777773906, 134.296629552503, 2 ),
      ( 300, 7040.65538153176, 1000000.01958123, -0.943058226276146, 150.996066891572, 1 ),
      ( 300, 7155.6895315825, 10000000.0000095, -0.439736176365934, 151.504259633916, 1 ),
      ( 350, 0.343783216690343, 999.999999998398, -0.000431389057774547, 153.644131014081, 2 ),
      ( 350, 3.45129466423121, 9999.99980966506, -0.00433041557402541, 153.79295445227, 2 ),
      ( 350, 7564.10850176652, 100000000.000537, 3.54296646186081, 172.179230921987, 1 ),
      ( 400, 0.300761727750077, 999.999972983744, -0.000269912739997419, 172.886412275242, 2 ),
      ( 400, 3.01496148601354, 9999.99998633127, -0.00270517642416621, 172.968362582723, 2 ),
      ( 400, 30.9243000670256, 99999.998623251, -0.0276884269160413, 173.815002693194, 2 ),
      ( 500, 0.240574439920803, 999.999998256232, -0.000124706764663113, 208.512513400686, 2 ),
      ( 500, 2.4084502961854, 9999.98162162931, -0.00124806563500519, 208.542729298036, 2 ),
      ( 500, 24.3609693310875, 100000.000001109, -0.0125826460707746, 208.849366720973, 2 ),
      ( 500, 279.224364011159, 999999.999979639, -0.138526326262929, 212.473098019365, 2 ),
      ( 500, 4996.57603094908, 10000000.0002855, -0.518581450223849, 218.54784413306, 1 ),
      ( 600, 0.200466814345497, 999.999999821001, -6.54246022305322E-05, 238.950128061575, 2 ),
      ( 600, 2.005849555275, 9999.99818123189, -0.000654369214081337, 238.963221419164, 2 ),
      ( 600, 20.177656942009, 99999.9999857486, -0.00655611565030145, 239.09514147782, 2 ),
      ( 600, 214.822069545377, 999999.995843623, -0.0668849836089109, 240.515223519185, 2 ),
      ( 600, 3444.91773798529, 10000000.0161962, -0.418117603215766, 248.321397825324, 1 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 250, 0.481221842331851, 999.999801081922, -0.000276307042452565, 56.1055153925829, 2 ),
      ( 250, 4.82425180302923, 9999.99947615005, -0.00276996923842334, 56.1674665772001, 2 ),
      ( 300, 0.400969625969405, 999.999978053107, -0.000155194299509949, 65.5246625203172, 2 ),
      ( 300, 4.01531310029694, 9999.99999999459, -0.00155383215703258, 65.5544599243472, 2 ),
      ( 300, 40.7315604110706, 100000.000071429, -0.0157327789136081, 65.8598277428388, 2 ),
      ( 350, 0.343667756433398, 999.999999423035, -9.55692245031328E-05, 75.5049046588017, 2 ),
      ( 350, 3.43963840666226, 9999.99401043374, -0.00095628684680287, 75.520796859494, 2 ),
      ( 350, 34.6973969939326, 99999.9995717207, -0.00962336595366715, 75.682047649821, 2 ),
      ( 350, 383.30361152516, 1000000, -0.103491587243089, 77.5752500462308, 2 ),
      ( 350, 9982.63660595074, 10000000.0012304, -0.655767382932252, 82.9148853528496, 1 ),
      ( 350, 12964.9501943697, 100000000.005017, 1.65049157332463, 85.022130883991, 1 ),
      ( 400, 0.300699333314546, 999.999999992868, -6.2471002113908E-05, 85.474325788217, 2 ),
      ( 400, 3.00868562439185, 9999.99896416953, -0.000624904417749017, 85.4829974865267, 2 ),
      ( 400, 30.2577305916075, 99999.9999928399, -0.00626867097413738, 85.5705034430783, 2 ),
      ( 400, 321.530852210049, 1000000.01590393, -0.0648469784030725, 86.5314398875984, 2 ),
      ( 400, 7593.77258025948, 10000000.0004777, -0.604043253658598, 93.2536991368175, 1 ),
      ( 400, 12297.2238459738, 100000000.00001, 1.44510917335485, 93.6293221136556, 1 ),
      ( 500, 0.240551501652659, 999.999999991419, -2.93616623621444E-05, 104.066326703804, 2 ),
      ( 500, 2.40615088294181, 9999.99991369176, -0.000293620958620216, 104.069388742166, 2 ),
      ( 500, 24.1252910443643, 99999.9999999887, -0.0029366351702735, 104.100079341424, 2 ),
      ( 500, 247.8304703372, 1000000.00002354, -0.0293992569467805, 104.414160087942, 2 ),
      ( 500, 3254.83055384025, 10000000, -0.260961716188641, 107.742292330315, 1 ),
      ( 500, 11074.607666717, 99999999.9999999, 1.17203575873487, 110.168232818035, 1 ),
      ( 600, 0.200456558765749, 999.999999999298, -1.42668409585965E-05, 120.243809255192, 2 ),
      ( 600, 2.00482297322224, 9999.99999297211, -0.00014264819727337, 120.245344114669, 2 ),
      ( 600, 20.0739642991906, 99999.9999999998, -0.00142445260748773, 120.260680107815, 2 ),
      ( 600, 203.306725001629, 999999.999326263, -0.0140331123616855, 120.41275097514, 2 ),
      ( 600, 2246.91783143198, 9999999.99999999, -0.107872588479975, 121.746168279378, 2 ),
      ( 600, 10010.8945668579, 100000000.012345, 1.00235550941752, 124.926032419803, 1 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
