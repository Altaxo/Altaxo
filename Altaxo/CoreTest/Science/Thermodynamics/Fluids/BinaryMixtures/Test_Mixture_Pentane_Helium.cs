#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_Pentane_Helium"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_Pentane_Helium : MixtureTestBase
  {

    public Test_Mixture_Pentane_Helium()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("109-66-0", 0.5), ("7440-59-7", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601356662745437, 1000.00000000002, 7.36860191003454E-06, 12.5444854978033, 1 ),
      ( 200, 6.01316785677554, 10000.0000002322, 7.36853299173871E-05, 12.5446227483542, 1 ),
      ( 200, 60.0918346791319, 100000.001584605, 0.00073678415928361, 12.5459948523759, 1 ),
      ( 250, 0.481086073014437, 1000.00000000001, 5.82454648326556E-06, 12.5570130936465, 1 ),
      ( 250, 4.8106085580387, 10000.0000000731, 5.82448528594958E-05, 12.5571216989297, 1 ),
      ( 250, 48.0808858173178, 100000.000727145, 0.000582387255790726, 12.5582074728065, 1 ),
      ( 250, 478.306245277955, 1000000.00000014, 0.00581767403869865, 12.5690373576589, 1 ),
      ( 250, 4549.10406096932, 10000000.0004542, 0.0575464282109587, 12.6745928472143, 1 ),
      ( 250, 31451.5837847128, 100000000.002191, 0.529617326806451, 13.5098429666708, 1 ),
      ( 300, 0.400905481964469, 1000, 4.7741204437756E-06, 12.5715348000631, 1 ),
      ( 300, 4.00888257243387, 10000.0000000277, 4.77407152594321E-05, 12.5716239011843, 1 ),
      ( 300, 40.0716110812789, 100000.000276068, 0.000477358204712014, 12.5725147116158, 1 ),
      ( 300, 399.004678519631, 1000000.00000002, 0.00476865939082885, 12.5814027730977, 1 ),
      ( 300, 3828.40072204911, 10000000.0000227, 0.0471928751517573, 12.6683160317199, 1 ),
      ( 300, 27911.871000671, 99999999.9999999, 0.436332934921807, 13.3783109646757, 1 ),
      ( 350, 0.343633529771801, 1000, 4.01890374413205E-06, 12.5874002993483, 1 ),
      ( 350, 3.43621101132987, 10000.000000012, 4.01886521165691E-05, 12.5874753609608, 1 ),
      ( 350, 34.3496877277228, 100000.000119808, 0.000401847975757533, 12.5882258276838, 1 ),
      ( 350, 342.26086572046, 1000000, 0.0040146134560163, 12.5957155817554, 1 ),
      ( 350, 3304.94227465115, 10000000.0000017, 0.0397607045592188, 12.6691502369893, 1 ),
      ( 350, 25094.7053644227, 99999999.9999999, 0.369352243079364, 13.2839538525025, 1 ),
      ( 400, 0.300679508774526, 1000.01824985535, 3.45283278365218E-06, 12.6034707480267, 1 ),
      ( 400, 3.00670165594934, 10000.0000000058, 3.45273921347717E-05, 12.6035352730583, 1 ),
      ( 400, 30.0576774816659, 100000.000057504, 0.000345243357895935, 12.6041804102864, 1 ),
      ( 400, 299.646953098818, 1000000, 0.00344937213504223, 12.610620363385, 1 ),
      ( 400, 2907.4029831568, 10000000.0000002, 0.034189442239524, 12.6738993086645, 1 ),
      ( 400, 22795.1133649247, 100000000, 0.319057037085453, 13.2141398738891, 1 ),
      ( 500, 0.240543783459532, 1000.01101913183, 2.66597322396401E-06, 12.6335591141042, 1 ),
      ( 500, 2.40538025000334, 10000.0000000017, 2.6659240185752E-05, 12.6336089752426, 1 ),
      ( 500, 24.0480332134898, 100000.000016515, 0.000266572429680072, 12.6341075154, 1 ),
      ( 500, 239.905395244258, 1000000, 0.0026637263222131, 12.6390857453285, 1 ),
      ( 500, 2343.48461664948, 10000000.0019168, 0.0264391575414096, 12.6881630732608, 1 ),
      ( 500, 19260.7440191088, 100000000.000694, 0.248884452869446, 13.1195219899941, 1 ),
      ( 600, 0.20045325848119, 1000.00728887727, 2.14949018565723E-06, 12.6597144118126, 1 ),
      ( 600, 2.00449389386574, 10000.0000000006, 2.14946087024603E-05, 12.6597546334037, 1 ),
      ( 600, 20.0410623242239, 100000.000005854, 0.000214932346549823, 12.6601568012585, 1 ),
      ( 600, 200.024056371, 1000000, 0.00214794962247485, 12.6641736489914, 1 ),
      ( 600, 1962.6475003849, 10000000.0002174, 0.0213433534475362, 12.7038663845386, 1 ),
      ( 600, 16670.1581948699, 99999999.9999998, 0.202470280272751, 13.0599713223063, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 250, 0.481102229705451, 999.999999991921, -3.00388391170781E-05, 55.1185076994055, 2 ),
      ( 250, 4.81232288950134, 9999.9999999745, -0.000300293642957162, 55.1202129604525, 2 ),
      ( 300, 0.400912404676751, 999.999999999303, -1.47739236892403E-05, 62.3803712743143, 2 ),
      ( 300, 4.0096568373456, 9999.99999311849, -0.000147648812460724, 62.3812678475601, 2 ),
      ( 300, 40.1495670190662, 99999.9999776652, -0.00146748422598423, 62.3902535105179, 2 ),
      ( 350, 0.343636408014672, 999.999999999977, -6.63755455541433E-06, 70.3138831112454, 2 ),
      ( 350, 3.43656913391897, 9999.99999978368, -6.63053229581727E-05, 70.3144564606967, 2 ),
      ( 350, 34.3859720380548, 99999.9999999974, -0.000656061928429677, 70.3201982069064, 2 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 250, 0.481516770180586, 999.999999977852, -0.000893197119649658, 97.7229141761686, 2 ),
      ( 300, 0.401090950916445, 999.99999797556, -0.000462198391755438, 112.207665636012, 2 ),
      ( 300, 4.02774770513114, 9999.99999999987, -0.00464081496205262, 112.374287472411, 2 ),
      ( 300, 9636.25026716561, 100000000.019696, 3.16038973959523, 129.214652107639, 1 ),
      ( 350, 0.343726730472919, 999.999999697184, -0.000271689817467362, 128.049496993128, 2 ),
      ( 350, 3.44571634662276, 9999.9968124475, -0.00272306494909516, 128.13060560761, 2 ),
      ( 350, 35.3491126344965, 100000.004172285, -0.0278869329743781, 128.969626497185, 2 ),
      ( 350, 8099.6423125546, 10000000.0023801, -0.575742569565018, 139.218606291694, 1 ),
      ( 350, 9246.12212626654, 100000000.000001, 2.7165131363427, 142.409399420632, 1 ),
      ( 400, 0.300731425681509, 999.999999938865, -0.000173743694019137, 144.100966444183, 2 ),
      ( 400, 3.01203198677518, 9999.99936887507, -0.00173976622319326, 144.144562247038, 2 ),
      ( 400, 30.6077833783302, 99999.9999932658, -0.0176381877233723, 144.588820531993, 2 ),
      ( 400, 382.365004899949, 999999.999980802, -0.213633121118286, 151.02976469799, 2 ),
      ( 400, 7375.29988125221, 10000000.0000008, -0.592316000252917, 153.671317581044, 1 ),
      ( 400, 8873.46077872647, 100000000, 2.38852205459293, 156.473794664854, 1 ),
      ( 500, 0.240563273495624, 999.999999995624, -8.28601189786395E-05, 174.157908033898, 2 ),
      ( 500, 2.40742909690214, 9999.99995559127, -0.000828972680427842, 174.173530443139, 2 ),
      ( 500, 24.2563232071227, 99999.9999999895, -0.00832727875283468, 174.331123315042, 2 ),
      ( 500, 263.60230093389, 999999.999999999, -0.087476324971507, 176.063772124883, 2 ),
      ( 500, 5443.75207825753, 9999999.99999993, -0.558129508955966, 182.821680563794, 1 ),
      ( 500, 8177.13031279244, 99999999.9999995, 1.94165961887447, 183.75119969351, 1 ),
      ( 600, 0.200461643681122, 999.999999999516, -4.4198077794543E-05, 200.287272446677, 2 ),
      ( 600, 2.00541421342315, 9999.9999951388, -0.000441991883149814, 200.294179586098, 2 ),
      ( 600, 20.1342925607071, 100000, -0.00442102417620867, 200.363592961729, 2 ),
      ( 600, 209.746481324766, 999999.988250863, -0.0443091941035144, 201.091010749078, 2 ),
      ( 600, 3065.43156850428, 10000000.0000582, -0.346086255126958, 207.299600037342, 1 ),
      ( 600, 7548.23191852193, 100000000, 1.6556256594326, 208.044630628921, 1 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
