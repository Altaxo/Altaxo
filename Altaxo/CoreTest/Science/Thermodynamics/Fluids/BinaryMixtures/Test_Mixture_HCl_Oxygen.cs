#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2018 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Altaxo.Science.Thermodynamics.Fluids
{

  /// <summary>
  /// Tests and test data for <see cref="Mixture_HCl_Oxygen"/>.
  /// </summary>
  /// <remarks>
  /// <para>Reference:</para>
  /// <para>The test data was created automatically using calls into the TREND.DLL of the following software:</para>
  /// <para>TREND 3.0.: Span, R.; Eckermann, T.; Herrig, S.; Hielscher, S.; Jäger, A.; Thol, M. (2016): TREND.Thermodynamic Reference and Engineering Data 3.0.Lehrstuhl für Thermodynamik, Ruhr-Universität Bochum.</para>
  /// </remarks>
  
  public class Test_Mixture_HCl_Oxygen : MixtureTestBase
  {

    public Test_Mixture_HCl_Oxygen()
    {
      _mixture = MixtureOfFluids.FromCASRegistryNumbersAndMoleFractions(new[] { ("7647-01-0", 0.5), ("7782-44-7", 0.5) });

      // TestData for 1 Permille to 999 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_001_999 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601388634459258, 999.993365795415, -2.99293975391929E-05, 20.8125618990256, 2 ),
      ( 200, 6.01550695489614, 9999.99999999338, -0.000299326973822082, 20.814987744195, 2 ),
      ( 200, 60.3177978176198, 99999.9999334686, -0.00299636773358716, 20.8393163055784, 2 ),
      ( 200, 620.141974574515, 999999.999999993, -0.0302694224932354, 21.0897438374799, 2 ),
      ( 200, 8692.83738431975, 9999999.99996465, -0.308199833318116, 24.0378369911763, 2 ),
      ( 250, 0.481103117210369, 999.996587407953, -1.37373367886449E-05, 20.8865550881126, 2 ),
      ( 250, 4.81162603915265, 9999.99999999919, -0.000137366874448888, 20.8877196681764, 2 ),
      ( 250, 48.1757944700255, 99999.9999919843, -0.00137296456647415, 20.8993693337988, 2 ),
      ( 250, 487.75487613537, 1000000, -0.0136510537339224, 21.0162005060871, 2 ),
      ( 250, 5457.72763447681, 9999999.99234319, -0.118503999522731, 22.1423867164582, 2 ),
      ( 300, 0.400916255496264, 999.998454052619, -6.23255392515806E-06, 21.0704921249898, 2 ),
      ( 300, 4.00938741455844, 9999.99999999993, -6.231549371686E-05, 21.0711950101898, 2 ),
      ( 300, 40.116333535358, 99999.9999992628, -0.000622137098146512, 21.0782205438616, 2 ),
      ( 300, 403.380802395581, 999999.993642364, -0.0061159221986688, 21.1481231184215, 2 ),
      ( 300, 4206.93178693728, 9999999.99999996, -0.0470162649057545, 21.791252352912, 2 ),
      ( 350, 0.343641185260044, 999.999495600201, -2.34605078938574E-06, 21.3792673953733, 2 ),
      ( 350, 3.43648422262152, 10000, -2.34522386802737E-05, 21.3797495855354, 2 ),
      ( 350, 34.3720687991173, 99999.9999999631, -0.000233692811189175, 21.3845679375959, 2 ),
      ( 350, 344.416126626159, 999999.999741007, -0.0022524023356192, 21.4323892087182, 2 ),
      ( 350, 3480.59171550748, 10000000, -0.0126955672328044, 21.8682981479106, 1 ),
      ( 400, 0.30068537548797, 999.999954260398, -1.88845129312134E-07, 21.7913674208025, 2 ),
      ( 400, 3.00685883549311, 9999.99555268234, -1.88229287185789E-06, 21.7917228998805, 2 ),
      ( 400, 30.0690792084627, 100000, -1.82064586153262E-05, 21.7952747517971, 2 ),
      ( 400, 300.721318855187, 1000000, -0.000119716437661078, 21.8304967641301, 1 ),
      ( 400, 2990.09173202224, 10000000, 0.00560566202698803, 22.1513418208428, 1 ),
      };

      // TestData for 500 Permille to 500 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_500_500 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601419934349774, 999.995714796212, -8.92983720658892E-05, 20.8130007409065, 2 ),
      ( 200, 6.01904096213306, 9999.99999999148, -0.000893610656670407, 20.8332507381553, 2 ),
      ( 200, 60.6827254209276, 99999.9998785085, -0.00899930874089341, 21.0383921715241, 2 ),
      ( 250, 0.481114610871448, 999.999798300628, -4.49544199192025E-05, 20.8495157517714, 2 ),
      ( 250, 4.81309408488517, 9999.99999999999, -0.000449660542369585, 20.8564484072527, 2 ),
      ( 250, 48.3271710127402, 99999.9999998582, -0.00450828681664582, 20.9262113291594, 2 ),
      ( 250, 504.45480203757, 1000000, -0.0463110258924452, 21.6697484092972, 2 ),
      ( 300, 0.400921076825734, 999.999997470657, -2.55859833788625E-05, 20.942614202178, 2 ),
      ( 300, 4.01013430088326, 9999.99954411268, -0.000255879754261516, 20.9455376630369, 2 ),
      ( 300, 40.1940101913654, 99999.9999999998, -0.00256078714640382, 20.974867347182, 2 ),
      ( 300, 411.529412291747, 999999.999926284, -0.0258027570037455, 21.2777464069056, 2 ),
      ( 300, 5491.79535358973, 9999999.99999772, -0.269982231577537, 25.0794531211699, 2 ),
      ( 350, 0.343643175282587, 999.999995779531, -1.55118475200231E-05, 21.1017002592132, 2 ),
      ( 350, 3.43691156759568, 9999.9995667383, -0.000155116051669172, 21.1032215541415, 2 ),
      ( 350, 34.4171625124808, 100000, -0.00155091339191666, 21.118459316811, 2 ),
      ( 350, 349.040582387663, 999999.999995308, -0.0154788237191549, 21.2732683137331, 2 ),
      ( 350, 4021.29448515243, 9999999.99996325, -0.145454663887434, 22.9699119275861, 2 ),
      ( 400, 0.300686028241789, 999.99998079753, -9.69147943208439E-06, 21.3202293241691, 2 ),
      ( 400, 3.00712255430213, 9999.99806521823, -9.69075080051823E-05, 21.3211691503132, 2 ),
      ( 400, 30.0974561388494, 99999.9999999999, -0.000968345091425809, 21.3305743676852, 2 ),
      ( 400, 303.599850949588, 999999.999994688, -0.00960717467803334, 21.4252894574055, 2 ),
      ( 400, 3287.16876330765, 10000000, -0.0852823940602354, 22.399349689582, 2 ),
      };

      // TestData for 999 Permille to 1 Permille Molefraction contains:
      // 0. Temperature (Kelvin)
      // 1. Mole density (mol/m³)
      // 2. Pressure (Pa)
      // 3. delta*AlphaR_delta
      // 4. Isochoric heat capacity (J/mol K)
      // 5. Phasetype (1: liquid, 2: gas)
      _testData_999_001 = new (double temperature, double moleDensity, double pressure, double deltaPhiR_delta, double cv, int phase)[]
      {
      ( 200, 0.601502396788871, 999.999999999861, -0.000233706911665661, 20.8212347996282, 2 ),
      ( 200, 6.02773646104884, 9999.99999857386, -0.00234221351727706, 20.9297108942599, 2 ),
      ( 200, 61.6124985940072, 99999.9837735616, -0.0239613102820483, 22.0453531974896, 2 ),
      ( 200, 31764.8723050554, 1000000.00089376, -0.981068338124626, 36.7241908694381, 1 ),
      ( 200, 32116.5543169529, 10000000.0000027, -0.812756432217257, 36.8111197090963, 1 ),
      ( 250, 0.481139809821504, 999.999999999962, -0.000104652750387563, 20.8154054618753, 2 ),
      ( 250, 4.81593904298726, 9999.99999960723, -0.00104745321111288, 20.8545152644663, 2 ),
      ( 250, 48.6228315214943, 99999.9957161508, -0.0105688161220235, 21.2507983244002, 2 ),
      ( 250, 545.075469119954, 999999.999372443, -0.117389270811462, 25.8601156137107, 2 ),
      ( 250, 28466.3918525643, 10000000.000635, -0.830997388169689, 34.4960567877441, 1 ),
      ( 300, 0.400930866010246, 999.989818210504, -5.73284920624158E-05, 20.8158603456492, 2 ),
      ( 300, 4.01137941578363, 9999.99999991216, -0.000573519830119535, 20.8311477388324, 2 ),
      ( 300, 40.3229794341768, 99999.9989906557, -0.00575828800587885, 20.9851814956009, 2 ),
      ( 300, 426.541318069522, 999999.999990633, -0.0600960234545309, 22.6525720393049, 2 ),
      ( 300, 23258.4886053827, 9999999.99995038, -0.827629435508698, 33.5247999634433, 1 ),
      ( 350, 0.343647470402042, 999.988772831121, -3.53376151795024E-05, 20.8245933332896, 2 ),
      ( 350, 3.43756825380486, 9999.99999997759, -0.00035344402752238, 20.8313350704161, 2 ),
      ( 350, 34.4856410773716, 99999.999770933, -0.0035408481502942, 20.8990753465505, 2 ),
      ( 350, 356.492861625565, 999999.999999842, -0.0360667391299297, 21.6099744738376, 2 ),
      ( 350, 6389.61511038718, 9999999.99442731, -0.462197141939973, 32.9392128257358, 2 ),
      ( 400, 0.300687933723437, 999.994084697858, -2.33561790403795E-05, 20.8492906041396, 2 ),
      ( 400, 3.00751159804433, 9999.9999999959, -0.000233578629587837, 20.8526722683111, 2 ),
      ( 400, 30.1385347316925, 99999.9999586611, -0.00233732847816947, 20.8865954439185, 2 ),
      ( 400, 307.924402573984, 999999.999999998, -0.0235236043417034, 21.2365743683989, 2 ),
      ( 400, 3977.47321722868, 9999999.98239256, -0.244040388174466, 25.6974666966427, 2 ),
      };
    }

    [Fact]
    public override void CASNumberAttribute_Test()
    {
      base.CASNumberAttribute_Test();
    }

    [Fact]
    public override void Constants_Test()
    {
      base.Constants_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_001_999_Test()
    {
      base.DeltaPhiRDelta_001_999_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_500_500_Test()
    {
      base.DeltaPhiRDelta_500_500_Test();
    }

    [Fact]
    public override void DeltaPhiRDelta_999_001_Test()
    {
      base.DeltaPhiRDelta_999_001_Test();
    }
  }
}
