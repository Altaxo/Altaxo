#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2011 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using System;
using Altaxo.Calc.Interpolation;
using Altaxo.Calc.LinearAlgebra;
using NUnit.Framework;

namespace AltaxoTest.Calc.Interpolation
{
  /// <summary>
  /// Test for the cross validated cubic spline.
  /// </summary>
  /// <remarks> The test data originates from the output of Algorithm 642,
  /// which was amended to output the test results in a file.
  /// Note that tau in original 642.f was replaced with the more accurate tau=1.6180339887498948482045868343656.
  /// </remarks>
  [TestFixture]
  public class TestCrossValidatedCubicSpline
  {
    /// <summary>
    /// Interface to the test data. The test data were generated using the original CUBGCV (with modified tau=1.6180339887498948482045868343656) routine with
    /// different values of VAR, and writing the results into a file (using D16.8 format for each value,
    /// and afterwards replacing all D chars with E in the file).
    /// </summary>
    private interface ITestData
    {
      /// <summary>
      /// The variance used to generate the data
      /// </summary>
      double _variance { get; }


      /// <summary>
      /// original x, original f, c0, se, c1, c2, c3
      /// </summary>
      double[][] _testdata { get; }

      /// <summary>
      /// SmoothingParameter; DegreesOfFreedom; GeneralizedCrossValidation, MeanSquareResidual, EstimateOfTrueMeanSquareError, EstimateOfErrorVariance, MeanSquareValueOfDfi, Variance 
      /// </summary>
      double[] _teststat { get; }
    }

    private class DataForVarianceNegative : ITestData
    {
      public double _variance { get; } = -1;
      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.34170764E-01,   0.10036439E+00,   0.36303857E+01,   0.00000000E+00,   0.25419875E+02, },
new double[]{  0.35969367E-01,  -0.10978200E+00,   0.14875848E+00,   0.75030304E-01,   0.37053249E+01,   0.23905725E+01,  -0.95374043E+01, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.17674584E+00,   0.70691376E-01,   0.37396520E+01,   0.21754684E+01,  -0.42333350E+02, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.28996271E+00,   0.59421117E-01,   0.37556948E+01,  -0.16417151E+01,  -0.28722352E+02, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.37140711E+00,   0.55834896E-01,   0.36419107E+01,  -0.35354864E+01,   0.29113930E+01, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.41550796E+00,   0.54914784E-01,   0.35565776E+01,  -0.34284617E+01,  -0.12247790E+02, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.48217309E+00,   0.54359940E-01,   0.34120352E+01,  -0.41310200E+01,   0.22423512E+02, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.57998890E+00,   0.54298541E-01,   0.32266077E+01,  -0.21427838E+01,   0.64153603E+01, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.61651436E+00,   0.54328032E-01,   0.31802400E+01,  -0.19233113E+01,  -0.18597668E+02, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.67620192E+00,   0.54363342E-01,   0.30868488E+01,  -0.29849124E+01,  -0.32738977E+02, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.75950456E+00,   0.54207881E-01,   0.28429751E+01,  -0.57325587E+01,  -0.44349338E+02, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.81549768E+00,   0.53943203E-01,   0.25486824E+01,  -0.84863003E+01,  -0.54715991E+02, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.86302760E+00,   0.53686572E-01,   0.21392952E+01,  -0.11799041E+02,  -0.97838693E+01, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.88639709E+00,   0.53579348E-01,   0.18595640E+01,  -0.12141990E+02,   0.96194431E+01, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.92251769E+00,   0.53435290E-01,   0.13222741E+01,  -0.11485758E+02,  -0.72019041E+01, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.94851326E+00,   0.53224717E-01,   0.72691470E+00,  -0.12032697E+02,  -0.14120926E+02, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.95833193E+00,   0.52975251E-01,   0.20404667E+00,  -0.12920370E+02,   0.27958441E+02, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.95765425E+00,   0.52741384E-01,  -0.26378597E+00,  -0.11300280E+02,  -0.34525812E+01, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.94790501E+00,   0.52562294E-01,  -0.71756384E+00,  -0.11506366E+02,   0.32345104E+02, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.93725481E+00,   0.52506841E-01,  -0.98893656E+00,  -0.10298724E+02,   0.43805638E+01, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.90688831E+00,   0.52487662E-01,  -0.14859566E+01,  -0.99765740E+01,   0.14403029E+02, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.88422512E+00,   0.52494764E-01,  -0.17562331E+01,  -0.93730266E+01,  -0.89247819E+01, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.82273153E+00,   0.52435789E-01,  -0.23438400E+01,  -0.10177741E+02,  -0.22780669E+02, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.78843099E+00,   0.52381420E-01,  -0.26374018E+01,  -0.11119758E+02,  -0.44188853E+01, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.72814457E+00,   0.52344114E-01,  -0.31099571E+01,  -0.11397961E+02,  -0.35623814E+01, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.67203412E+00,   0.52381383E-01,  -0.35001110E+01,  -0.11579428E+02,   0.53362573E+01, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.60021495E+00,   0.52514679E-01,  -0.39410690E+01,  -0.11270491E+02,   0.24794686E+02, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.52860090E+00,   0.52702694E-01,  -0.43096402E+01,  -0.99803876E+01,   0.29204764E+02, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.44294724E+00,   0.52936449E-01,  -0.46585793E+01,  -0.83087960E+01,   0.37578087E+02, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.33902786E+00,   0.53133198E-01,  -0.49644396E+01,  -0.58783633E+01,   0.55630058E+02, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.18503778E+00,   0.53140360E-01,  -0.51673581E+01,  -0.83069188E+00,   0.49276588E+02, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.10359598E+00,   0.53088688E-01,  -0.51568292E+01,   0.14988416E+01,   0.54365298E+02, },
new double[]{  0.64462497E+00,  -0.11100620E+00,   0.37094080E-01,   0.53088683E-01,  -0.50905294E+01,   0.36138294E+01,   0.34340647E+02, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.92668619E-01,   0.53211534E-01,  -0.48317804E+01,   0.63021098E+01,   0.11643061E+02, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.16187782E+00,   0.53343638E-01,  -0.46401817E+01,   0.68124130E+01,   0.16166348E+02, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.25642292E+00,   0.53591268E-01,  -0.43317492E+01,   0.78337508E+01,   0.41636458E+01, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.35822013E+00,   0.53849098E-01,  -0.39386092E+01,   0.81411510E+01,  -0.22136262E+02, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.44149002E+00,   0.54002133E-01,  -0.36113384E+01,   0.66741804E+01,  -0.92052463E+01, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.49605369E+00,   0.54080777E-01,  -0.34104981E+01,   0.62448643E+01,  -0.21928916E+02, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.58281024E+00,   0.54127554E-01,  -0.31246951E+01,   0.44940275E+01,  -0.46486747E+02, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.62422859E+00,   0.54099420E-01,  -0.30288772E+01,   0.26140942E+01,  -0.34991278E+02, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.70309982E+00,   0.53937053E-01,  -0.29640249E+01,  -0.16029505E+00,   0.26463116E+01, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.74755051E+00,   0.53817168E-01,  -0.29670464E+01,  -0.41309538E-01,   0.18168917E+02, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.81385976E+00,   0.53816416E-01,  -0.29415230E+01,   0.11802141E+01,  -0.67742162E+01, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.85738624E+00,   0.54176241E-01,  -0.29109022E+01,   0.87784367E+00,  -0.13642779E+02, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.93399894E+00,   0.56587543E-01,  -0.28930952E+01,  -0.20444244E+00,  -0.80942927E+01, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.97233735E+00,   0.59314966E-01,  -0.29027580E+01,  -0.52577378E+00,  -0.14981009E+02, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.10312695E+01,   0.66499525E-01,  -0.29422973E+01,  -0.14329874E+01,   0.49450669E+01, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10842652E+01,   0.76584424E-01,  -0.29887650E+01,  -0.11679444E+01,   0.14006727E+02, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.11679390E+01,   0.99768823E-01, },
};
      public double[] _teststat { get; } = new double[] { 0.99668250E+00, 0.43972710E+02, 0.31774003E-01, 0.24575275E-01, 0.33685052E-02, 0.27943780E-01, 0.10000000E+01, 0.27943780E-01 };
    }

    private class DataForVarianceEqualToZero : ITestData
    {
      public double _variance { get; } = 0;
      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.22217357E+00,   0.00000000E+00,  -0.17001142E+02,   0.00000000E+00,   0.65246812E+04, },
new double[]{  0.35969367E-01,  -0.10978200E+00,  -0.10978200E+00,   0.00000000E+00,   0.22339842E+01,   0.61360346E+03,  -0.17657546E+05, },
new double[]{  0.43487278E-01,  -0.65809634E-01,  -0.65809634E-01,   0.00000000E+00,   0.84660570E+01,   0.21535986E+03,   0.27334542E+03, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.39062827E+00,   0.00000000E+00,   0.22152824E+02,   0.24000732E+03,  -0.36554824E+05, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.60536706E+00,   0.00000000E+00,  -0.20268505E+02,  -0.21701880E+04,   0.14796685E+06, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.30339219E+00,   0.00000000E+00,  -0.68020533E+01,   0.32691714E+04,  -0.90113963E+05, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.73859850E+00,   0.00000000E+00,   0.19378394E+02,  -0.18999499E+04,   0.31370905E+05, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.46159424E+00,   0.00000000E+00,  -0.10718919E+02,   0.88162903E+03,  -0.15164344E+05, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.43152055E+00,   0.00000000E+00,   0.34724821E+01,   0.36284967E+03,  -0.83246564E+04, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.57161424E+00,   0.00000000E+00,   0.82390078E+01,  -0.11234241E+03,  -0.18519432E+04, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.67363551E+00,   0.00000000E+00,  -0.23946964E+01,  -0.26776831E+03,   0.25880131E+05, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.73882697E+00,   0.00000000E+00,   0.19780735E+02,   0.13391822E+04,  -0.59384814E+05, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.11953410E+01,   0.00000000E+00,   0.12734156E+01,  -0.22562292E+04,   0.80058079E+05, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.10299020E+01,   0.00000000E+00,  -0.18662365E+02,   0.55000844E+03,  -0.78089695E+04, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.79810872E+00,   0.00000000E+00,  -0.57622214E+01,   0.17285561E+02,   0.14426060E+05, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.89734088E+00,   0.00000000E+00,   0.22846757E+02,   0.11128537E+04,  -0.64687746E+05, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.12695466E+01,   0.00000000E+00,  -0.15723484E+02,  -0.29535588E+04,   0.11953846E+06, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.72534153E+00,   0.00000000E+00,   0.39724478E+01,   0.39732573E+04,  -0.14786008E+06, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.12126611E+01,   0.00000000E+00,  -0.13522458E+02,  -0.48525425E+04,   0.22704586E+06, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.73043192E+00,   0.00000000E+00,  -0.28806210E+02,   0.36244767E+04,  -0.82907712E+05, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.98101344E+00,   0.00000000E+00,  -0.57001390E+00,  -0.24726172E+04,   0.81118011E+05, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.71169501E+00,   0.00000000E+00,  -0.22165334E+02,   0.92656763E+03,  -0.59759609E+04, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.72025480E+00,   0.00000000E+00,   0.17336674E+02,   0.38773729E+03,  -0.41489893E+05, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.92423287E+00,   0.00000000E+00,   0.43771113E+01,  -0.13279355E+04,   0.32807901E+05, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.73447919E+00,   0.00000000E+00,  -0.80121037E+01,   0.73757739E+03,  -0.14961018E+05, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.73784754E+00,   0.00000000E+00,   0.40953290E+01,  -0.24532773E+02,  -0.88516584E+04, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.74412751E+00,   0.00000000E+00,  -0.67409633E+01,  -0.53699099E+03,   0.18311699E+05, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.56121739E+00,   0.00000000E+00,  -0.88430001E+01,   0.41579290E+03,  -0.56125014E+04, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.50487548E+00,   0.00000000E+00,   0.89383191E+00,   0.94550437E+02,  -0.95359043E+04, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.47253839E+00,   0.00000000E+00,  -0.83258864E+01,  -0.52220191E+03,   0.14277557E+05, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.13804817E+00,   0.00000000E+00,  -0.73154051E+00,   0.77329229E+03,  -0.45312857E+05, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.14123156E+00,   0.00000000E+00,  -0.10116582E+02,  -0.13688572E+04,   0.50049381E+05, },
new double[]{  0.64462497E+00,  -0.11100620E+00,  -0.11100620E+00,   0.00000000E+00,  -0.20369279E+02,   0.57822725E+03,  -0.66024127E+03, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.26053766E+00,   0.00000000E+00,   0.84588403E+01,   0.52654175E+03,  -0.33304296E+05, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.12842405E+00,   0.00000000E+00,   0.25184194E+01,  -0.93315101E+03,   0.15421854E+05, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.34519368E+00,   0.00000000E+00,  -0.16266121E+02,   0.41152013E+02,   0.11261143E+05, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.55273156E+00,   0.00000000E+00,   0.62201385E+01,   0.87255744E+03,  -0.33054819E+05, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.34585355E+00,   0.00000000E+00,  -0.36193864E+01,  -0.13179862E+04,   0.34732261E+05, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.59015665E+00,   0.00000000E+00,  -0.19416092E+02,   0.30186372E+03,   0.68246053E+04, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.76443746E+00,   0.00000000E+00,   0.11152915E+02,   0.84675022E+03,  -0.32242878E+05, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.53920927E+00,   0.00000000E+00,   0.16404642E+02,  -0.45715817E+03,   0.12942651E+02, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.42473604E+00,   0.00000000E+00,  -0.77330147E+01,  -0.45613197E+03,   0.30737998E+04, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.63274691E+00,   0.00000000E+00,  -0.19334270E+02,  -0.31792541E+03,   0.20201510E+05, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.99833663E+00,   0.00000000E+00,  -0.31465574E+01,   0.10402525E+04,  -0.28331225E+05, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.90818543E+00,   0.00000000E+00,   0.89932098E+01,  -0.22432533E+03,  -0.35546546E+04, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.89296290E+00,   0.00000000E+00,  -0.10327494E+02,  -0.50631723E+03,   0.41004373E+05, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.10232708E+01,   0.00000000E+00,  -0.21869442E+01,   0.11214952E+04,  -0.33246549E+05, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.88389824E+00,   0.00000000E+00,   0.24489426E+01,  -0.89183511E+03,   0.18862163E+05, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10172461E+01,   0.00000000E+00,  -0.11356088E+02,   0.11912863E+03,  -0.14286658E+04, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.12715313E+01,   0.00000000E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.00000000E+00, 0.00000000E+00, 0.84855708E-01, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.10000000E+01, 0.00000000E+00 };

    }

    private class DataForVarianceEqualTo0p015625 : ITestData
    {
      public double _variance { get; } = 0.015625;

      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.14754751E+00,   0.11868933E+00,  -0.81762481E+01,   0.00000000E+00,   0.31312088E+04, },
new double[]{  0.35969367E-01,  -0.10978200E+00,  -0.12302986E-01,   0.80493842E-01,   0.10547312E+01,   0.29446964E+03,  -0.95887883E+03, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.11862084E-01,   0.79966965E-01,   0.53197400E+01,   0.27284335E+03,  -0.42178790E+04, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.30371281E+00,   0.86412318E-01,   0.10289951E+02,  -0.10748134E+03,  -0.57102389E+03, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.47188589E+00,   0.76950120E-01,   0.47380598E+01,  -0.14513107E+03,   0.50296654E+04, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.51740651E+00,   0.75908349E-01,   0.34469236E+01,   0.39762762E+02,  -0.39500857E+04, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.57023813E+00,   0.84232371E-01,   0.63504617E+00,  -0.18682224E+03,   0.31140878E+04, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.50621023E+00,   0.79466481E-01,  -0.22474201E+01,   0.89296069E+02,   0.12420614E+04, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.49403568E+00,   0.76097783E-01,   0.27370519E+00,   0.13178758E+03,  -0.13809890E+04, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.53744333E+00,   0.83737577E-01,   0.37889373E+01,   0.52957295E+02,   0.52776208E+02, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.68604064E+00,   0.86189630E-01,   0.68758384E+01,   0.57386583E+02,  -0.46772631E+03, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.84878855E+00,   0.80924672E-01,   0.86502447E+01,   0.28344495E+02,  -0.50815654E+04, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.99313836E+00,   0.75707124E-01,   0.35852954E+01,  -0.27931527E+03,   0.34025837E+04, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.10023250E+01,   0.76912613E-01,  -0.15482798E+01,  -0.16004613E+03,   0.45596771E+04, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.93797380E+00,   0.85206570E-01,  -0.17537115E+01,   0.15101211E+03,  -0.13088726E+04, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.96911914E+00,   0.84935448E-01,   0.33756163E+01,   0.51611505E+02,  -0.43205913E+04, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.10227622E+01,   0.81392106E-01,  -0.15260204E+00,  -0.21999026E+03,   0.60341486E+04, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.98122335E+00,   0.79550303E-01,  -0.18972450E+01,   0.12966654E+03,  -0.47023063E+04, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.95776800E+00,   0.76178605E-01,  -0.23220123E+01,  -0.15101513E+03,   0.59926612E+04, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.91703096E+00,   0.77612969E-01,  -0.32963284E+01,   0.72727789E+02,  -0.18367822E+04, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.85287253E+00,   0.79670756E-01,  -0.30419445E+01,  -0.62350521E+02,   0.35398368E+04, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.80786444E+00,   0.82199202E-01,  -0.27118377E+01,   0.85983487E+02,  -0.49530231E+03, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.79058294E+00,   0.81650297E-01,   0.11144416E+01,   0.41323906E+02,  -0.34461758E+04, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.80477051E+00,   0.77979058E-01,   0.28938073E+00,  -0.10118093E+03,   0.15663031E+04, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.78075882E+00,   0.78742624E-01,  -0.18879277E+01,  -0.25699434E+01,  -0.37552748E+03, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.74612258E+00,   0.78303710E-01,  -0.23000158E+01,  -0.21699211E+02,  -0.72273705E+03, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.68846159E+00,   0.78307426E-01,  -0.39449896E+01,  -0.63541375E+02,   0.16129297E+04, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.60934160E+00,   0.78599923E-01,  -0.46935435E+01,   0.20381663E+02,  -0.40629691E+03, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.52439095E+00,   0.81519269E-01,  -0.43595062E+01,  -0.28735331E+01,  -0.12251395E+04, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.41679264E+00,   0.87713667E-01,  -0.61916990E+01,  -0.82111707E+02,   0.11138766E+04, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.18522594E+00,   0.82439058E-01,  -0.81018291E+01,   0.18957449E+02,  -0.86563889E+03, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.58875766E-01,   0.75073296E-01,  -0.81492279E+01,  -0.21965328E+02,   0.25898989E+04, },
new double[]{  0.64462497E+00,  -0.11100620E+00,  -0.44847407E-01,   0.78194179E-01,  -0.74123368E+01,   0.78790203E+02,  -0.18603460E+03, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.18792318E+00,   0.80254710E-01,  -0.36804126E+01,   0.64226903E+02,  -0.32328397E+04, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.23806503E+00,   0.78788851E-01,  -0.38738183E+01,  -0.77465112E+02,   0.13675475E+04, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.34122581E+00,   0.84053229E-01,  -0.53170491E+01,   0.89321351E+01,   0.12010610E+04, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.44876631E+00,   0.84851517E-01,  -0.26951618E+01,   0.97605958E+02,  -0.31611804E+04, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.49474891E+00,   0.80030977E-01,  -0.30105980E+01,  -0.11188554E+03,   0.30862675E+04, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.55699673E+00,   0.81366371E-01,  -0.42516892E+01,   0.32052398E+02,   0.16949217E+04, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.61549782E+00,   0.80478495E-01,   0.10559009E+01,   0.16737744E+03,  -0.45543842E+04, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.58200561E+00,   0.80351154E-01,   0.30856575E+01,  -0.16802764E+02,  -0.27587076E+04, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.56311956E+00,   0.80881461E-01,  -0.35834696E+01,  -0.23553523E+03,   0.30476778E+04, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.65947451E+00,   0.79107300E-01,  -0.85899008E+01,  -0.98503193E+02,   0.41691319E+04, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.85452524E+00,   0.79044827E-01,  -0.67233161E+01,   0.18179382E+03,  -0.18649996E+04, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.92045708E+00,   0.80804699E-01,  -0.25522423E+01,   0.98548664E+02,  -0.13500980E+04, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.94400074E+00,   0.79422391E-01,  -0.17250138E+00,  -0.85550467E+01,   0.79138061E+03, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.94594771E+00,   0.77118639E-01,   0.16814680E-01,   0.22861583E+02,  -0.24529920E+04, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.95646903E+00,   0.80530075E-01,  -0.20587775E+01,  -0.12568566E+03,   0.59198030E+03, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10299922E+01,   0.85861734E-01,  -0.59828731E+01,  -0.93957027E+02,   0.11267920E+04, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.12446765E+01,   0.11743195E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.49190324E+00, 0.28308220E+02, 0.39475674E-01, 0.12653616E-01, 0.10585979E-01, 0.22349721E-01, 0.10000000E+01, 0.15625000E-01 };
    }

    private class DataForVarianceEqualTo0p03125 : ITestData
    {
      public double _variance { get; } = 0.03125;

      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.37553472E-01,   0.10434130E+00,   0.36304829E+01,   0.00000000E+00,   0.21335048E+02, },
new double[]{  0.35969367E-01,  -0.10978200E+00,   0.15201840E+00,   0.78739080E-01,   0.36933798E+01,   0.20064213E+01,  -0.89191015E+01, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.17989451E+00,   0.74267952E-01,   0.37220357E+01,   0.18052623E+01,  -0.37313138E+02, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.29238377E+00,   0.62336386E-01,   0.37294300E+01,  -0.15592504E+01,  -0.25959817E+02, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.37332008E+00,   0.58312279E-01,   0.36232739E+01,  -0.32708776E+01,   0.85597121E+00, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.41722852E+00,   0.57210353E-01,   0.35434997E+01,  -0.32394115E+01,  -0.12299170E+02, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.48371234E+00,   0.56469966E-01,   0.34061304E+01,  -0.39449171E+01,   0.17155957E+02, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.58138020E+00,   0.56313886E-01,   0.32178995E+01,  -0.24237417E+01,   0.33132648E+01, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.61776522E+00,   0.56342682E-01,   0.31639138E+01,  -0.23103933E+01,  -0.18209522E+02, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.67700467E+00,   0.56390759E-01,   0.30562138E+01,  -0.33498381E+01,  -0.30388640E+02, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.75921614E+00,   0.56265987E-01,   0.27974405E+01,  -0.59002304E+01,  -0.40278500E+02, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.81423109E+00,   0.56019569E-01,   0.25014387E+01,  -0.84012053E+01,  -0.48992343E+02, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.86088927E+00,   0.55763459E-01,   0.21024797E+01,  -0.11367412E+02,  -0.10342467E+02, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.88388663E+00,   0.55645966E-01,   0.18326062E+01,  -0.11729941E+02,   0.65313463E+01, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.91957098E+00,   0.55468148E-01,   0.13092655E+01,  -0.11284377E+02,  -0.75050619E+01, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.94536138E+00,   0.55225532E-01,   0.72351908E+00,  -0.11854339E+02,  -0.13054401E+02, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.95519702E+00,   0.54963587E-01,   0.20953056E+00,  -0.12674967E+02,   0.23272437E+02, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.95468304E+00,   0.54724541E-01,  -0.25406684E+00,  -0.11326415E+02,  -0.32307029E+01, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.94511859E+00,   0.54538939E-01,  -0.70862117E+00,  -0.11519256E+02,   0.27687010E+02, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.93456871E+00,   0.54475797E-01,  -0.98247920E+00,  -0.10485530E+02,   0.40965765E+01, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.90424406E+00,   0.54437687E-01,  -0.14891698E+01,  -0.10184265E+02,   0.12968192E+02, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.88149156E+00,   0.54435990E-01,  -0.17660882E+01,  -0.96408429E+01,  -0.66538194E+01, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.81952150E+00,   0.54377152E-01,  -0.23636394E+01,  -0.10240793E+02,  -0.18125267E+02, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.78494826E+00,   0.54330491E-01,  -0.26562859E+01,  -0.10990302E+02,  -0.20292734E+01, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.72434464E+00,   0.54304019E-01,  -0.31202505E+01,  -0.11118060E+02,  -0.85810566E+00, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.66815334E+00,   0.54345417E-01,  -0.34985600E+01,  -0.11161772E+02,   0.71958882E+01, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.59653301E+00,   0.54475407E-01,  -0.39213205E+01,  -0.10745173E+02,   0.24252187E+02, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.52541667E+00,   0.54654055E-01,  -0.42721592E+01,  -0.94832970E+01,   0.28389386E+02, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.44065338E+00,   0.54875424E-01,  -0.46030207E+01,  -0.78583751E+01,   0.35811014E+02, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.33812343E+00,   0.55067380E-01,  -0.48919237E+01,  -0.55422312E+01,   0.51344261E+02, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.18651554E+00,   0.55103261E-01,  -0.50862711E+01,  -0.88343760E+00,   0.45743279E+02, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.10632460E+00,   0.55075435E-01,  -0.50800368E+01,   0.12790600E+01,   0.49777193E+02, },
new double[]{  0.64462497E+00,  -0.11100620E+00,   0.40771564E-01,   0.55091483E-01,  -0.50217517E+01,   0.32155554E+01,   0.32237468E+02, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.87504991E-01,   0.55237271E-01,  -0.47880843E+01,   0.57391931E+01,   0.12241485E+02, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.15619409E+00,   0.55377921E-01,  -0.46125505E+01,   0.62757247E+01,   0.15450644E+02, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.25040200E+00,   0.55633738E-01,  -0.43276743E+01,   0.72518466E+01,   0.44963376E+01, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.35244639E+00,   0.55903621E-01,  -0.39625710E+01,   0.75838093E+01,  -0.18648996E+02, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.43647998E+00,   0.56066950E-01,  -0.36548185E+01,   0.63479399E+01,  -0.81760339E+01, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.49179457E+00,   0.56145360E-01,  -0.34633755E+01,   0.59666244E+01,  -0.19542942E+02, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.58011049E+00,   0.56173860E-01,  -0.31873127E+01,   0.44062872E+01,  -0.40844115E+02, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.62237505E+00,   0.56129471E-01,  -0.30907842E+01,   0.27545431E+01,  -0.31233321E+02, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.70271497E+00,   0.55941449E-01,  -0.30106331E+01,   0.27811486E+00,   0.89045020E+00, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.74777163E+00,   0.55830153E-01,  -0.30016964E+01,   0.31815197E+00,   0.14182925E+02, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.81472174E+00,   0.55916346E-01,  -0.29660673E+01,   0.12716914E+01,  -0.70359596E+01, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.85859401E+00,   0.56411229E-01,  -0.29328982E+01,   0.95763794E+00,  -0.12766839E+02, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.93571637E+00,   0.59254715E-01,  -0.29090336E+01,  -0.55159500E-01,  -0.78261670E+01, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.97423892E+00,   0.62270989E-01,  -0.29146047E+01,  -0.36584666E+00,  -0.13492384E+02, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.10333328E+01,   0.69901533E-01,  -0.29458677E+01,  -0.11829127E+01,   0.37765528E+01, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10863191E+01,   0.80297693E-01,  -0.29845188E+01,  -0.98049912E+00,   0.11758764E+02, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.11697784E+01,   0.10368629E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.99716322E+00, 0.44167017E+02, 0.31788916E-01, 0.24804578E-01, 0.84580732E-03, 0.28080432E-01, 0.10000000E+01, 0.31250000E-01 };

    }

    private class DataForVarianceEqualTo0p0625 : ITestData
    {
      public double _variance { get; } = 0.0625;

      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.12294810E+00,   0.23246709E+00,  -0.59163334E+01,   0.00000000E+00,   0.24842674E+04, },
new double[]{  0.35969367E-01,  -0.10978200E+00,   0.14011936E-01,   0.15346687E+00,   0.14074263E+01,   0.23362905E+03,  -0.61511058E+03, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.37535957E-01,   0.15286158E+00,   0.48159349E+01,   0.21975601E+03,  -0.32025316E+04, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.29385484E+00,   0.16070788E+00,   0.93466848E+01,  -0.69015160E+02,  -0.77965502E+03, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.45766233E+00,   0.14585310E+00,   0.51832812E+01,  -0.12042071E+03,   0.29183675E+04, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.50846424E+00,   0.14426892E+00,   0.35466928E+01,  -0.13139589E+02,  -0.22159370E+04, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.55598501E+00,   0.15647582E+00,   0.61377416E+00,  -0.14025027E+03,   0.23560820E+04, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.51244070E+00,   0.14980835E+00,  -0.15022070E+01,   0.68657573E+02,   0.10830602E+04, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.50584457E+00,   0.14515635E+00,   0.48618719E+00,   0.10570958E+03,  -0.77775982E+03, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.54800933E+00,   0.15630902E+00,   0.36642106E+01,   0.61313112E+02,  -0.18677352E+03, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.69441210E+00,   0.16109295E+00,   0.66561976E+01,   0.45637986E+02,  -0.70694840E+03, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.84546013E+00,   0.15178251E+00,   0.76368401E+01,   0.17421071E+01,  -0.33766790E+04, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.97253675E+00,   0.14342183E+00,   0.35812925E+01,  -0.20269652E+03,   0.22015794E+04, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.99022087E+00,   0.14549290E+00,  -0.25371214E+00,  -0.12552561E+03,   0.31950598E+04, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.95711222E+00,   0.15884573E+00,  -0.10060876E+01,   0.92439311E+02,  -0.78584540E+03, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.97813298E+00,   0.15916567E+00,   0.21632607E+01,   0.32759317E+02,  -0.28086039E+04, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.10120056E+01,   0.15301283E+00,  -0.16340078E+00,  -0.14379563E+03,   0.36393444E+04, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.98142760E+00,   0.14897358E+00,  -0.16449842E+01,   0.67091041E+02,  -0.27721772E+04, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.95342212E+00,   0.14397524E+00,  -0.22675486E+01,  -0.98380812E+02,   0.37182814E+04, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.91713113E+00,   0.14591878E+00,  -0.29885756E+01,   0.40445514E+02,  -0.95602990E+03, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.85409190E+00,   0.15019879E+00,  -0.27291266E+01,  -0.29861625E+02,   0.22216525E+04, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.81619967E+00,   0.15447473E+00,  -0.22629661E+01,   0.63234930E+02,  -0.39478774E+03, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.79458873E+00,   0.15325484E+00,   0.46827079E+00,   0.27638377E+02,  -0.22558557E+04, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.80038668E+00,   0.14746116E+00,  -0.55604937E-01,  -0.65644832E+02,   0.84483050E+03, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.77811743E+00,   0.14752557E+00,  -0.16946271E+01,  -0.12456171E+02,  -0.24772207E+03, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.74453873E+00,   0.14700959E+00,  -0.23319041E+01,  -0.25075066E+02,  -0.41524666E+03, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.68721502E+00,   0.14699131E+00,  -0.37636320E+01,  -0.49115371E+02,   0.10096478E+04, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.61243251E+00,   0.14789004E+00,  -0.45561977E+01,   0.34180480E+01,  -0.27260398E+03, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.52485587E+00,   0.15343323E+00,  -0.47234617E+01,  -0.12184972E+02,  -0.77284480E+03, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.40961537E+00,   0.16371476E+00,  -0.63264803E+01,  -0.62170147E+02,   0.80253295E+03, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.18360013E+00,   0.15433793E+00,  -0.78847673E+01,   0.10648807E+02,  -0.33793279E+03, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.60672217E-01,   0.14310675E+00,  -0.78009028E+01,  -0.53268480E+01,   0.16789984E+04, },
new double[]{  0.64462497E+00,  -0.11100620E+00,  -0.37722383E-01,   0.14674389E+00,  -0.70920226E+01,   0.59991676E+02,  -0.15577843E+03, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.18470232E+00,   0.15048870E+00,  -0.42793602E+01,   0.47796912E+02,  -0.20544367E+04, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.24342680E+00,   0.14909690E+00,  -0.41982767E+01,  -0.42246919E+02,   0.82483993E+03, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.34287026E+00,   0.15715043E+00,  -0.48802301E+01,   0.98638104E+01,   0.76666942E+03, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.44557098E+00,   0.15856570E+00,  -0.30017474E+01,   0.66466687E+02,  -0.19162660E+04, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.50010183E+00,   0.15128000E+00,  -0.28704802E+01,  -0.60524309E+02,   0.19455847E+04, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.55204412E+00,   0.15268164E+00,  -0.33416824E+01,   0.30214247E+02,   0.99137678E+03, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.60089054E+00,   0.15167195E+00,   0.37311402E+00,   0.10936722E+03,  -0.31032801E+04, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.58358905E+00,   0.15145682E+00,   0.16299574E+01,  -0.16130040E+02,  -0.19921619E+04, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.58855496E+00,   0.15170403E+00,  -0.33972907E+01,  -0.17408462E+03,   0.21093051E+04, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.67147517E+00,   0.14894293E+00,  -0.71940826E+01,  -0.79244416E+02,   0.30789287E+04, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.83784306E+00,   0.14887087E+00,  -0.61069004E+01,   0.12775659E+03,  -0.93928286E+03, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.90351678E+00,   0.15154659E+00,  -0.29290351E+01,   0.85831251E+02,  -0.10561700E+04, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.94048191E+00,   0.14934876E+00,  -0.60528609E+00,   0.20449421E+01,   0.13354404E+03, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.94782404E+00,   0.14630238E+00,  -0.48101145E+00,   0.73464413E+01,  -0.17553857E+04, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.96897846E+00,   0.15196889E+00,  -0.23302181E+01,  -0.98955459E+02,   0.37473269E+03, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10400581E+01,   0.16091489E+00,  -0.55072281E+01,  -0.78870744E+02,   0.94586775E+03, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.12337519E+01,   0.23004559E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.61868168E+00, 0.30676624E+02, 0.37701183E-01, 0.14191559E-01, 0.00000000E+00, 0.23130900E-01, 0.10000000E+01, 0.62500000E-01 };
    }




    public class DataForVarianceEqualTo0p125 : ITestData
    {
      public double _variance { get; } = 0.125;

      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.15535470E+00,   0.33775518E+00,  -0.89283629E+01,   0.00000000E+00,   0.33602764E+04, },
new double[]{  0.35969367E-01,  -0.10978200E+00,  -0.21016516E-01,   0.23142954E+00,   0.97792039E+00,   0.31601194E+03,  -0.11036803E+04, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.37271202E-02,   0.22951610E+00,   0.55422833E+01,   0.29111983E+03,  -0.46006369E+04, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.30838463E+00,   0.25067936E+00,   0.10573805E+02,  -0.12371800E+03,  -0.46465931E+03, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.47608262E+00,   0.22184540E+00,   0.44623495E+01,  -0.15435471E+03,   0.60369686E+04, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.51869317E+00,   0.21859236E+00,   0.33989069E+01,   0.67568253E+02,  -0.47903732E+04, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.57489833E+00,   0.24436390E+00,   0.72872090E+00,  -0.20721735E+03,   0.34419984E+04, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.50428910E+00,   0.22942746E+00,  -0.24999987E+01,   0.97975956E+02,   0.12949026E+04, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.49044136E+00,   0.21880441E+00,   0.23970300E+00,   0.14227519E+03,  -0.16681856E+04, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.53502058E+00,   0.24263835E+00,   0.38421062E+01,   0.47051006E+02,   0.17208478E+03, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.68309508E+00,   0.24940775E+00,   0.68786655E+01,   0.61493366E+02,  -0.30363070E+03, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.84911570E+00,   0.23411237E+00,   0.90339569E+01,   0.42640312E+02,  -0.58499766E+04, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.10007158E+01,   0.21825759E+00,   0.36071288E+01,  -0.31154237E+03,   0.39375934E+04, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.10066113E+01,   0.22181371E+00,  -0.20604219E+01,  -0.17351978E+03,   0.51088659E+04, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.93010467E+00,   0.24689242E+00,  -0.20266766E+01,   0.17500376E+03,  -0.15291215E+04, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.96614158E+00,   0.24566066E+00,   0.38939034E+01,   0.58876647E+02,  -0.49890624E+04, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.10276846E+01,   0.23521272E+00,  -0.21036857E+00,  -0.25474667E+03,   0.71740149E+04, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.98027708E+00,   0.23028105E+00,  -0.20218764E+01,   0.16096122E+03,  -0.56465226E+04, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.95929359E+00,   0.21971392E+00,  -0.23227094E+01,  -0.17608093E+03,   0.70951569E+04, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.91679070E+00,   0.22432176E+00,  -0.34086437E+01,   0.88824939E+02,  -0.22767011E+04, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.85307178E+00,   0.22998245E+00,  -0.31581245E+01,  -0.78605328E+02,   0.41573987E+04, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.80495247E+00,   0.23748168E+00,  -0.29206425E+01,   0.95607111E+02,  -0.53245661E+03, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.78907982E+00,   0.23604110E+00,   0.13834335E+01,   0.47597463E+02,  -0.39936204E+04, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.80673340E+00,   0.22487521E+00,   0.41928535E+00,  -0.11754507E+03,   0.19153489E+04, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.78146697E+00,   0.22789742E+00,  -0.19836877E+01,   0.30410640E+01,  -0.44763515E+03, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.74646948E+00,   0.22638454E+00,  -0.22675967E+01,  -0.19761349E+02,  -0.88122682E+03, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.68901676E+00,   0.22645722E+00,  -0.40148478E+01,  -0.70779125E+02,   0.18902558E+04, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.60795484E+00,   0.22713330E+00,  -0.47641965E+01,   0.27573587E+02,  -0.46013921E+03, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.52390019E+00,   0.23552073E+00,  -0.42145270E+01,   0.12366220E+01,  -0.14168791E+04, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.41941654E+00,   0.25393633E+00,  -0.61368536E+01,  -0.90402668E+02,   0.12545829E+04, },
new double[]{  0.61589900E+00,   0.13804817E+00,   0.18581728E+00,   0.23863134E+00,  -0.81623621E+01,   0.23433675E+02,  -0.11476936E+04, },
new double[]{  0.63165722E+00,   0.14123156E+00,   0.58521047E-01,   0.21590481E+00,  -0.82788069E+01,  -0.30823139E+02,   0.30117627E+04, },
new double[]{  0.64462497E+00,  -0.11100620E+00,  -0.47452074E-01,   0.22619920E+00,  -0.75588224E+01,   0.86344271E+02,  -0.18433170E+03, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.18917639E+00,   0.23211531E+00,  -0.34291842E+01,   0.71914278E+02,  -0.37730421E+04, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.23569158E+00,   0.22716608E+00,  -0.37438757E+01,  -0.93454248E+02,   0.16213702E+04, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.34083626E+00,   0.24335621E+00,  -0.55228401E+01,   0.89786947E+01,   0.14022380E+04, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.45041453E+00,   0.24567487E+00,  -0.25331354E+01,   0.11250533E+03,  -0.37432169E+04, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.49182144E+00,   0.23084081E+00,  -0.30423634E+01,  -0.13555774E+03,   0.35974105E+04, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.55836373E+00,   0.23531466E+00,  -0.46488743E+01,   0.32218988E+02,   0.19985660E+04, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.62159361E+00,   0.23232068E+00,   0.13127926E+01,   0.19178743E+03,  -0.51849550E+04, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.58174748E+00,   0.23194826E+00,   0.36568984E+01,  -0.17893185E+02,  -0.30457371E+04, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.55382447E+00,   0.23389949E+00,  -0.36713459E+01,  -0.25938366E+03,   0.34460335E+04, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.65551238E+00,   0.22849800E+00,  -0.91241927E+01,  -0.10444044E+03,   0.45908940E+04, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.86077169E+00,   0.22829324E+00,  -0.68882560E+01,   0.20421227E+03,  -0.23271543E+04, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.92571700E+00,   0.23366237E+00,  -0.23569976E+01,   0.10033862E+03,  -0.14455034E+04, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.94461020E+00,   0.22954664E+00,  -0.82729856E-01,  -0.14333636E+02,   0.11518045E+04, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.94554595E+00,   0.22226051E+00,   0.14299123E+00,   0.31391285E+02,  -0.27569263E+04, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.95254460E+00,   0.23239452E+00,  -0.19597736E+01,  -0.13556148E+03,   0.69525283E+03, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.10268623E+01,   0.24850986E+00,  -0.61378586E+01,  -0.98297707E+02,   0.11788482E+04, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.12480900E+01,   0.33424906E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.44682727E+00, 0.27420970E+02, 0.40246977E-01, 0.12104835E-01, 0.00000000E+00, 0.22072223E-01, 0.10000000E+01, 0.12500000E+00 };

    }

    public class DataForVarianceEqualTo1 : ITestData
    {
      public double _variance { get; } = 1;
      public double[][] _testdata { get; } = new[] {
new double[]{  0.46215537E-02,   0.22217357E+00,   0.10629227E+01,   0.28153038E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.35969367E-01,  -0.10978200E+00,   0.10064782E+01,   0.26833553E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.43487278E-01,  -0.65809634E-01,   0.99294148E+00,   0.26520626E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.73543829E-01,   0.39062827E+00,   0.93882199E+00,   0.25284678E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.95521734E-01,   0.60536706E+00,   0.89924881E+00,   0.24397785E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.10777529E+00,   0.30339219E+00,   0.87718520E+00,   0.23910162E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.12689597E+00,   0.73859850E+00,   0.84275670E+00,   0.23159969E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.15645179E+00,   0.46159424E+00,   0.78953881E+00,   0.22028800E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.16785529E+00,   0.43152055E+00,   0.76900581E+00,   0.21602582E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.18688278E+00,   0.57161424E+00,   0.73474511E+00,   0.20905439E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.21485806E+00,   0.67363551E+00,   0.68437312E+00,   0.19915731E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.23555541E+00,   0.73882697E+00,   0.64710570E+00,   0.19213889E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.25573684E+00,   0.11953410E+01,   0.61076724E+00,   0.18557570E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.26742102E+00,   0.10299020E+01,   0.58972884E+00,   0.18191433E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.29016080E+00,   0.79810872E+00,   0.54878383E+00,   0.17510799E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.31547537E+00,   0.89734088E+00,   0.50320271E+00,   0.16807975E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.33642942E+00,   0.12695466E+01,   0.46547306E+00,   0.16275107E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.35574487E+00,   0.72534153E+00,   0.43069388E+00,   0.15827292E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.37564161E+00,   0.12126611E+01,   0.39486803E+00,   0.15413460E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.38808699E+00,   0.73043192E+00,   0.37245901E+00,   0.15180844E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.41260057E+00,   0.98101344E+00,   0.32832013E+00,   0.14785925E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.42656863E+00,   0.71169501E+00,   0.30316939E+00,   0.14600532E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.45662407E+00,   0.72025480E+00,   0.24905190E+00,   0.14305292E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.47040793E+00,   0.92423287E+00,   0.22423283E+00,   0.14219132E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.49139386E+00,   0.73447919E+00,   0.18644579E+00,   0.14149215E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.50837377E+00,   0.73784754E+00,   0.15587195E+00,   0.14147403E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.52767178E+00,   0.74412751E+00,   0.12112416E+00,   0.14204852E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.54501559E+00,   0.56121739E+00,   0.89895088E-01,   0.14309898E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.56409458E+00,   0.50487548E+00,   0.55541680E-01,   0.14482501E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.58565353E+00,   0.47253839E+00,   0.16722864E-01,   0.14746856E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.61589900E+00,   0.13804817E+00,  -0.37736794E-01,   0.15234365E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.63165722E+00,   0.14123156E+00,  -0.66110867E-01,   0.15538597E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.64462497E+00,  -0.11100620E+00,  -0.89460466E-01,   0.15812968E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.67071922E+00,  -0.26053766E+00,  -0.13644549E+00,   0.16426063E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.68532888E+00,  -0.12842405E+00,  -0.16275147E+00,   0.16802231E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.70638780E+00,  -0.34519368E+00,  -0.20066994E+00,   0.17382239E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.73099766E+00,  -0.55273156E+00,  -0.24498218E+00,   0.18111356E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.75308767E+00,  -0.34585355E+00,  -0.28475721E+00,   0.18807880E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.76863373E+00,  -0.59015665E+00,  -0.31274929E+00,   0.19319515E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.79524756E+00,  -0.76443746E+00,  -0.36066984E+00,   0.20232220E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.80872762E+00,  -0.53920927E+00,  -0.38494190E+00,   0.20710615E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.83515696E+00,  -0.42473604E+00,  -0.43253028E+00,   0.21676574E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.85014455E+00,  -0.63274691E+00,  -0.45951678E+00,   0.22239346E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.87255506E+00,  -0.99833663E+00,  -0.49986888E+00,   0.23098989E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.88743355E+00,  -0.90818543E+00,  -0.52665893E+00,   0.23680708E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.91387699E+00,  -0.89296290E+00,  -0.57427270E+00,   0.24734064E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.92710983E+00,  -0.10232708E+01,  -0.59809960E+00,   0.25269737E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.94729568E+00,  -0.88389824E+00,  -0.63444604E+00,   0.26096842E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.96516150E+00,  -0.10172461E+01,  -0.66661503E+00,   0.26838143E+00,  -0.18005891E+01,   0.00000000E+00,   0.00000000E+00, },
new double[]{  0.99295634E+00,  -0.12715313E+01,  -0.71666212E+00,   0.28007023E+00, },
};
      public double[] _teststat { get; } = new double[] { 0.10000000E+01, 0.48000000E+02, 0.23824038E+00, 0.21956234E+00, 0.00000000E+00, 0.22871077E+00, 0.10000000E+01, 0.10000000E+01 };
    }


    private void AreEqual(double expected, double current, double reldev, double absdev, string msg)
    {
      double min, max;
      bool passes = false;
      if (expected == 0)
      {
        min = -Math.Abs(absdev);
        max = Math.Abs(absdev);
        passes = current >= min && current <= max;
      }
      else
      {
        double dev = Math.Abs(expected * reldev);
        min = expected - dev;
        max = expected + dev;
        passes = current >= min && current <= max;
      }

      if (!passes)
        Assert.Fail("Value {0} is not in the interval [{1},{2}], ({3})", current, min, max, msg);
    }

    public static double GGRAND(ref double DSEED)
    {
      const double A = 16807;
      const double B = 2147483647;
      const double C = 2147483648;

      var S = DSEED;

      S = DMOD(A * S, B);
      var result = S / C;
      DSEED = S;
      return result;
    }

    public static double DMOD(double x, double y)
    {
      var result = Math.IEEERemainder(x, y);
      if (result < 0)
        result += y;
      return result;
    }

    [Test]
    public void TestBasic()
    {
      const int N = 50;

      var spline = new CrossValidatedCubicSpline() { CalculateStandardErrorEstimates = true };

      foreach (var data in new ITestData[]
        {
          new DataForVarianceNegative(),
          new DataForVarianceEqualToZero(),
          new DataForVarianceEqualTo0p015625(),
          new DataForVarianceEqualTo0p03125(),
          new DataForVarianceEqualTo0p0625(),
          new DataForVarianceEqualTo0p125(),
          new DataForVarianceEqualTo1() })
      {

        var x = new double[N];
        var f = new double[N];
        var df = new double[N];

        double DSEED = 1.2345E4;
        for (int i = 0; i < N; ++i)
        {
          x[i] = (i + 0.5) / N + (2.0 * GGRAND(ref DSEED) - 1.0) / (3.0 * N);
          f[i] = Math.Sin(4.71238 * x[i]) + (2.0 * GGRAND(ref DSEED) - 1.0) * 0.3;
          df[i] = 1;
        }

        // Test if generated values match those of original cubgcv test
        for (int i = 0; i < N; ++i)
        {
          AreEqual(data._testdata[i][0], x[i], 1E-7, 0, $"X[{i}]");
          AreEqual(data._testdata[i][1], f[i], 1E-7, 0, $"F[{i}]");
        }

        spline.Interpolate(VectorMath.ToROVector(x), VectorMath.ToROVector(f), data._variance);

        for (int i = 0; i < N; ++i)
        {
          AreEqual(data._testdata[i][0], x[i], 1E-7, 0, $"X[{i}]");
          AreEqual(data._testdata[i][1], f[i], 1E-7, 0, $"F[{i}]");
          AreEqual(data._testdata[i][2], spline.Coefficient0[i], 1E-5, 0, $"Y[{i}]");
          AreEqual(data._testdata[i][3], spline.ErrorEstimate[i], 1E-5, 0, $"SE[{i}]");

          if (i < N - 1)
          {
            AreEqual(data._testdata[i][4], spline.Coefficient1[i], 1E-5, 0, $"C[{i},0]");
            AreEqual(data._testdata[i][5], spline.Coefficient2[i], 1E-3, 0, $"C[{i},1]");
            AreEqual(data._testdata[i][6], spline.Coefficient3[i], 1E-4, 0, $"C[{i},2]");
          }
        }




        AreEqual(data._teststat[0], spline.SmoothingParameter, 1e-5, 0, "SmoothingParameter");
        AreEqual(data._teststat[1], spline.EstimatedDegreesOfFreedom, 1e-5, 0, "EstimatedDegreesofFreedom");
        AreEqual(data._teststat[2], spline.GeneralizedCrossValidation, 1e-5, 0, "GeneralizedCrossValidation");
        AreEqual(data._teststat[3], spline.MeanSquareResidual, 1e-5, 0, "MeanSquareResidual");
        AreEqual(data._teststat[4], spline.EstimatedTrueMeanSquareError, 1e-5, 0, "EstimatedTrueMeanSquareError");
        AreEqual(data._teststat[5], spline.EstimatedErrorVariance, 1e-5, 0, "EstimatedErrorVariance");
        AreEqual(data._teststat[6], spline.MeanSquareOfInputVariance, 1e-5, 0, "MeanSquareOfInputVariance");
      }
    }

    [Test]
    public void TestScaledY()
    {
      const int N = 50;

      // we want to test if very small y or very large y cause problems
      // calculate scaling factors to that we do not have loss of precision
      double upscaling = 1;
      for (int i = 0; i < 120; ++i)
        upscaling *= 2;
      double downscaling = 1;
      for (int i = 0; i < 120; ++i)
        downscaling /= 2;

      var spline = new CrossValidatedCubicSpline();



      foreach (var yscaling in new[] { upscaling, downscaling })
      {
        foreach (var data in new ITestData[]
          {
          new DataForVarianceNegative(),
          new DataForVarianceEqualToZero(),
          new DataForVarianceEqualTo0p015625(),
          new DataForVarianceEqualTo0p03125(),
          new DataForVarianceEqualTo0p0625(),
          new DataForVarianceEqualTo0p125(),
          new DataForVarianceEqualTo1() })
        {

          var x = new double[N];
          var f = new double[N];
          var df = new double[N];

          double DSEED = 1.2345E4;
          for (int i = 0; i < N; ++i)
          {
            x[i] = (i + 0.5) / N + (2.0 * GGRAND(ref DSEED) - 1.0) / (3.0 * N);
            f[i] = yscaling * (Math.Sin(4.71238 * x[i]) + (2.0 * GGRAND(ref DSEED) - 1.0) * 0.3);
            df[i] = 1;
          }

          // Test if generated values match those of original cubgcv test
          for (int i = 0; i < N; ++i)
          {
            AreEqual(data._testdata[i][0], x[i], 1E-7, 0, $"X[{i}]");
            AreEqual(data._testdata[i][1] * yscaling, f[i], 1E-7, 0, $"F[{i}]");
          }


          spline.Interpolate(VectorMath.ToROVector(x), VectorMath.ToROVector(f), data._variance * (yscaling * yscaling));

          for (int i = 0; i < N; ++i)
          {
            AreEqual(data._testdata[i][0], x[i], 1E-7, 0, $"X[{i}]");
            AreEqual(data._testdata[i][1] * yscaling, f[i], 1E-7, 0, $"F[{i}]");
            AreEqual(data._testdata[i][2] * yscaling, spline.Coefficient0[i], 1E-5, 0, $"Y[{i}]");
            AreEqual(data._testdata[i][3] * yscaling, spline.ErrorEstimate[i], 1E-5, 0, $"SE[{i}]");

            if (i < N - 1)
            {
              AreEqual(data._testdata[i][4] * yscaling, spline.Coefficient1[i], 1E-5, 0, $"C[{i},0]");
              AreEqual(data._testdata[i][5] * yscaling, spline.Coefficient2[i], 1E-3, 0, $"C[{i},1]");
              AreEqual(data._testdata[i][6] * yscaling, spline.Coefficient3[i], 1E-4, 0, $"C[{i},2]");
            }
          }




          AreEqual(data._teststat[0], spline.SmoothingParameter, 1e-5, 0, "SmoothingParameter");
          AreEqual(data._teststat[1], spline.EstimatedDegreesOfFreedom, 1e-5, 0, "EstimatedDegreesofFreedom");
          AreEqual(data._teststat[2] * (yscaling * yscaling), spline.GeneralizedCrossValidation, 1e-5, 0, "GeneralizedCrossValidation");
          AreEqual(data._teststat[3] * (yscaling * yscaling), spline.MeanSquareResidual, 1e-5, 0, "MeanSquareResidual");
          AreEqual(data._teststat[4] * (yscaling * yscaling), spline.EstimatedTrueMeanSquareError, 1e-5, 0, "EstimatedTrueMeanSquareError");
          AreEqual(data._teststat[5] * (yscaling * yscaling), spline.EstimatedErrorVariance, 1e-5, 0, "EstimatedErrorVariance");
          AreEqual(data._teststat[6], spline.MeanSquareOfInputVariance, 1e-5, 0, "MeanSquareOfInputVariance");
        }
      }
    }

    [Test]
    public void TestScaledX()
    {
      const int N = 50;

      // we want to test if very small y or very large y cause problems
      // calculate scaling factors to that we do not have loss of precision
      double upscaling = 1;
      for (int i = 0; i < 120; ++i)
        upscaling *= 2;
      double downscaling = 1;
      for (int i = 0; i < 120; ++i)
        downscaling /= 2;

      var spline = new CrossValidatedCubicSpline();


      foreach (var scaling in new[] { upscaling, downscaling })
      {

        foreach (var data in new ITestData[]
        {
          new DataForVarianceNegative(),
          new DataForVarianceEqualToZero(),
          new DataForVarianceEqualTo0p015625(),
          new DataForVarianceEqualTo0p03125(),
          new DataForVarianceEqualTo0p0625(),
          new DataForVarianceEqualTo0p125(),
          new DataForVarianceEqualTo1() })
        {

          var x = new double[N];
          var f = new double[N];
          var df = new double[N];

          double DSEED = 1.2345E4;
          for (int i = 0; i < N; ++i)
          {
            x[i] = ((i + 0.5) / N + (2.0 * GGRAND(ref DSEED) - 1.0) / (3.0 * N));
            f[i] = Math.Sin(4.71238 * x[i]) + (2.0 * GGRAND(ref DSEED) - 1.0) * 0.3;
            x[i] *= scaling;
            df[i] = 1;
          }

          // Test if generated values match those of original cubgcv test
          for (int i = 0; i < N; ++i)
          {
            AreEqual(data._testdata[i][0] * scaling, x[i], 1E-7, 0, $"X[{i}]");
            AreEqual(data._testdata[i][1], f[i], 1E-7, 0, $"F[{i}]");
          }


          spline.Interpolate(VectorMath.ToROVector(x), VectorMath.ToROVector(f), data._variance);

          for (int i = 0; i < N; ++i)
          {
            AreEqual(data._testdata[i][0] * scaling, x[i], 1E-7, 0, $"X[{i}]");
            AreEqual(data._testdata[i][1], f[i], 1E-7, 0, $"F[{i}]");
            AreEqual(data._testdata[i][2], spline.Coefficient0[i], 1E-5, 0, $"Y[{i}]");
            AreEqual(data._testdata[i][3], spline.ErrorEstimate[i], 1E-5, 0, $"SE[{i}]");

            if (i < N - 1)
            {
              AreEqual(data._testdata[i][4], scaling * spline.Coefficient1[i], 1E-5, 0, $"C[{i},0]");
              AreEqual(data._testdata[i][5], (scaling * scaling) * spline.Coefficient2[i], 1E-3, 0, $"C[{i},1]");
              AreEqual(data._testdata[i][6], (scaling * scaling * scaling) * spline.Coefficient3[i], 1E-4, 0, $"C[{i},2]");
            }
          }




          AreEqual(data._teststat[0], spline.SmoothingParameter, 1e-5, 0, "SmoothingParameter");
          AreEqual(data._teststat[1], spline.EstimatedDegreesOfFreedom, 1e-5, 0, "EstimatedDegreesofFreedom");
          AreEqual(data._teststat[2], spline.GeneralizedCrossValidation, 1e-5, 0, "GeneralizedCrossValidation");
          AreEqual(data._teststat[3], spline.MeanSquareResidual, 1e-5, 0, "MeanSquareResidual");
          AreEqual(data._teststat[4], spline.EstimatedTrueMeanSquareError, 1e-5, 0, "EstimatedTrueMeanSquareError");
          AreEqual(data._teststat[5], spline.EstimatedErrorVariance, 1e-5, 0, "EstimatedErrorVariance");
          AreEqual(data._teststat[6], spline.MeanSquareOfInputVariance, 1e-5, 0, "MeanSquareOfInputVariance");
        }
      }
    }
  }
}
