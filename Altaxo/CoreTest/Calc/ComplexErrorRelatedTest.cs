#region Copyright

/////////////////////////////////////////////////////////////////////////////
//    Altaxo:  a data processing and data plotting program
//    Copyright (C) 2002-2022 Dr. Dirk Lellinger
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
/////////////////////////////////////////////////////////////////////////////

#endregion Copyright

using Xunit;

namespace Altaxo.Calc
{
  public class ComplexErrorRelatedTest
  {

    /// <summary>
    /// The voigt HWHM with sigma=1, and gamma = (1+d)/(1-d), d = [-1, 1/64, 1)
    /// </summary>
    private static double[] voigt_hwhm_sigmaone_dvar = new double[]
      {1.177410022515474691,1.1816092691813030468,1.1858873739520897034,1.1902465142050570863,1.194688946189857397,1.1992170085518593889,
   1.2038331260421231307,1.2085398134254873464,1.2133396795989858683,1.2182354319336629671,1.2232298808537770661,1.2283259446683743323,
   1.2335266546712841194,1.2388351605267440826,1.2442547359591114981,1.2497887847664671425,1.2554408471793780475,1.2612146065876654677,
   1.2671138966597353836,1.2731427088808827742,1.2793052005389909397,1.2856057031882278137,1.2920487316237085011,1.2986389934026648102,
   1.3053813989504578017,1.3122810722928098214,1.3193433624589418804,1.3265738556039068772,1.3339783879023381003,1.3415630592701179674,
   1.3493342479751497996,1.3572986262035252986,1.3654631766529664197,1.3738352102315315844,1.3824223849462672922,1.3912327260738180846,
   1.4002746477130484284,1.4095569758285553194,1.4190889729036451368,1.4288803643320075071,1.4389413666890491483,1.4492827180367713744,
   1.4599157104303203962,1.4708522248100608452,1.4821047684803902488,1.4936865153957175192,1.5056113494952888279,1.5178939113521050052,
   1.5305496484273140468,1.5435948692504962536,1.5570468018785470874,1.5709236570218130826,1.5852446962662159034,1.6000303058648426117,
   1.6153020766224977944,1.6310828904527072039,1.6473970142494402595,1.6642702017863107582,1.681729804435296653,1.69980489158633592,
   1.7185263817499517539,1.7379271854390185723,1.7580423610548628274,1.7789092851493945634,1.8005678386015786904,1.823060610436444369,
   1.8464331212317292609,1.8707340683055766275,1.8960155951636819839,1.9223335880121482867,1.9497480025204815182,1.9783232244565282241,
   2.008128468322387214,2.0392382187102560495,2.0717327197852989941,2.1056985191077205408,2.141229072951108682,2.1784254213865807416,
   2.2173969427163275031,2.2582621983975355419,2.3011498814497513326,2.3461998835490209547,2.393564498659336335,2.4434097842340786489,
   2.4959171048598266576,2.551284887865954588,2.6097306260799226329,2.6714931698159537872,2.7368353586570783274,2.8060470540283742602,
   2.8794486464792013645,2.9573951276637198642,3.0402808371050941667,3.1285450190960804891,3.2226783570437941673,3.3232306932306941103,
   3.4308201940528437269,3.5461442879894212769,3.6699927908828172788,3.8032637475035756812,3.9469826695032671633,4.1023260513255730736,
   4.2706503168149816862,4.4535277180208407742,4.6527912147146390367,4.8705910685478533488,5.1094668797693460142,5.3724402144314312228,
   5.6631350290659021695,5.9859361342534139213,6.3462004902284115273,6.7505430891683662786,7.2072300562145225172,7.7267290051348977324,
   8.3224952766020927734,9.0121210735938730413,9.8190591847972300101,10.775286943841163681,11.925568590252918077,13.334559234025861601,
   15.0992368270188772,17.371990147302994501,20.406794809689181251,24.660800535533617726,31.04829937949178548,41.702630469368096869,
   63.023799037287215586,127.01180974246945707};

    /// <summary>
    /// The voigt HWHM with gamma=1, and sigma = (1+d)/(1-d), d = [-1, 1/64, 1)
    /// </summary>
    private static double[] voigt_hwhm_gammaone_dvar = new double[] {
   1, 1.0000929900981847014,
   1.0003777624966224696,1.0008631312648343249,1.0015580444997350155,1.0024715664851064116,1.0036128594929105533,1.0049911655464542273,
   1.0066157884679251467,1.0084960765229643227,1.0106414059536371252,1.0130611656602803461,1.0157647432548858631,1.0187615126671334742,
   1.0220608234423622704,1.0256719918320660707,1.0296042937449317882,1.033866959602362403,1.0384691711282855227,1.0434200600992189404,
   1.0487287090862781795,1.0544041542342061278,1.0604553901408076633,1.0668913769200059716,1.0737210495495320854,1.0809533296167089258,
   1.0885971395802894494,1.0966614196612918117,1.1051551474609148057,1.1140873603798353005,1.1234671808824950853,1.133303844615175872,
   1.143606731350947909,1.1543853987011884804,1.1656496185052021456,1.1774094157888474959,1.189675110171558587,1.2024573595995344503,
   1.2157672062912183539,1.2296161247989505185,1.2440160721168537852,1.2589795397983230491,1.2745196080855436114,1.2906500020968946739,
   1.3073851501646711064,1.3247402444642595085,1.3427313041259691636,1.3613752410716541342,1.3806899288698507996,1.4006942749554334374,
   1.4214082966130304507,1.4428532011781249068,1.4650514709665480456,1.4880269535027891822,1.5118049576811641308,1.5364123565625216811,
   1.5618776975840789442,1.5882313210425649123,1.6155054878026846865,1.6437345172857499843,1.6729549369091311623,1.7032056442782115564,
   1.7345280835813214269,1.7669664378076306961,1.8005678386015786904,1.8353825957890578829,1.8714644488648539776,1.9088708430231843335,
   1.9476632326499453211,1.9879074155840199742,2.0296739019046683743,2.0730383215232993655,2.1180818754635660479,2.1648918364190477434,
   2.2135621050012006813,2.2641938290540225637,2.3168960945429309357,2.3717866978564628894,2.4289930109305334564,2.4886529524650857967,
   2.5509160807121900781,2.6159448259472447961,2.6839158838829061716,2.7550217950632123133,2.8294727398261995659,2.9074985839268644614,
   2.989351216595417954,3.0753072309560758432,3.1656710067159081262,3.2607782673217607212,3.3610001989823174293,3.4667482378486090287,
   3.5784796552666793171,3.6967041007104309105,3.8219912995573272195,3.9549801506665303188,4.0963895299588992592,4.247031185217482386,
   4.4078252100521560122,4.579818719577299268,4.7642085282226360724,4.9623688672590590593,5.1758854988773873769,5.406598017846376464,
   5.6566527287853171409,5.9285693177078176118,6.2253257069142318691,6.5504671543400179081,6.9082480829105510743,7.3038186983166432837,
   7.7434738129206051218,8.2349894900724039365,8.7880859302556463323,9.4150755119073858072,10.131788564238479342,10.958926420044274577,
   11.924090995155746488,13.064921411472708807,14.43411259407456938,16.107779600011765899,18.200095193984788025,20.89047391778342413,
   24.477940229523170324,29.500738410375740968,37.035357331885579308,49.593604758544045262,74.710904558981651312,150.06437718602548694
    };

    [Fact]
    public void Voigt_Hwhm_Exact_VarGamma()
    {
      const double sigma = 1;

      int i;
      double d;
      for (i = 0, d = -1; d < 1; ++i, d += 1 / 64.0)
      {
        var gamma = (1 + d) / (1 - d);
        var hwhm = Altaxo.Calc.ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximum(sigma, gamma);
        AssertEx.AreEqual(voigt_hwhm_sigmaone_dvar[i], hwhm, 0, 1e-14);
      }
    }

    [Fact]
    public void Voigt_Hwhm_Exact_VarSigma()
    {
      const double gamma = 1;

      int i;
      double d;
      for (i = 0, d = -1; d < 1; ++i, d += 1 / 64.0)
      {
        var sigma = (1 + d) / (1 - d);
        var hwhm = Altaxo.Calc.ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximum(sigma, gamma);
        AssertEx.AreEqual(voigt_hwhm_gammaone_dvar[i], hwhm, 0, 1e-14);
      }
    }


    [Fact]
    public void Voigt_Hwhm_Approx_VarGamma()
    {
      const double sigma = 1;

      int i;
      double d;
      for (i = 0, d = -1; d < 1; ++i, d += 1 / 64.0)
      {
        var gamma = (1 + d) / (1 - d);
        var hwhm = Altaxo.Calc.ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximumApproximation(sigma, gamma);
        AssertEx.AreEqual(voigt_hwhm_sigmaone_dvar[i], hwhm, 0, ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximumApproximationMaximalRelativeError);
      }
    }

    [Fact]
    public void Voigt_Hwhm_Approx_VarSigma()
    {
      const double gamma = 1;

      int i;
      double d;
      for (i = 0, d = -1; d < 1; ++i, d += 1 / 64.0)
      {
        var sigma = (1 + d) / (1 - d);
        var hwhm = Altaxo.Calc.ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximumApproximation(sigma, gamma);
        AssertEx.AreEqual(voigt_hwhm_gammaone_dvar[i], hwhm, 0, ComplexErrorFunctionRelated.VoigtHalfWidthHalfMaximumApproximationMaximalRelativeError);
      }
    }

  }
}
