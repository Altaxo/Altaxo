<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:axogaddin="clr-namespace:Altaxo.Gui.AddInItems"
    xmlns:local="clr-namespace:Altaxo.Gui.Common">

    <!--  *********************** Style for main window **************************************  -->
    <Style x:Key="{x:Static local:GlobalStyles.WindowStyleKey}" TargetType="{x:Type Window}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="FlowDirection" Value="{DynamicResource {x:Static local:GlobalStyles.FlowDirectionKey}}" />
    </Style>

    <!--  *********************** Style for DialogWindow(s) **************************************  -->
    <Style x:Key="{x:Static local:GlobalStyles.DialogWindowStyleKey}" TargetType="{x:Type Window}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="FlowDirection" Value="{DynamicResource {x:Static local:GlobalStyles.FlowDirectionKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="ShowInTaskbar" Value="False" />
    </Style>

    <!--  *********************** Styles for ValidatingTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:ValidatingTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--  *********************** Styles for ValidatingTextBoxN **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:ValidatingTextBoxN}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  *********************** Styles for NullableDoubleTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:NullableDoubleTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>


    <!--  *********************** Styles for NumericDecimalTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:NumericDecimalTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>


    <!--  *********************** Styles for NumericDoubleTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:NumericDoubleTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for NumericFloatTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:NumericFloatTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for DateTimeTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:DateTimeTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for DateTimeOffsetTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:DateTimeOffsetTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>


    <!--  *********************** Styles for TimeSpanTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:TimeSpanTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for the QuantityWithUnitTextBox **************************************  -->
    <Style
        xmlns:axogc="clr-namespace:Altaxo.Gui.Common"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type axogc:QuantityWithUnitTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="HorizontalContentAlignment" Value="Right" />
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu>
                        <MenuItem Command="Copy" Header="Copy" />
                        <MenuItem Command="Cut" Header="Cut" />
                        <MenuItem Command="Paste" Header="Paste" />
                        <MenuItem Header="Convert to.." Tag="TagConvertTo" />
                        <!--  MenuItem Header="Change unit.." Tag="TagChangeUnitTo"/  -->
                        <MenuItem Header="Set number of digits displayed.." Tag="TagSetDigits" />
                    </ContextMenu>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for the DimensionfulQuantityImageComboBox **************************************  -->
    <Style
        xmlns:axogcd="clr-namespace:Altaxo.Gui.Common.Drawing"
        BasedOn="{StaticResource {x:Type ComboBox}}"
        TargetType="{x:Type axogcd:DimensionfulQuantityImageComboBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu>
                        <MenuItem Command="Copy" Header="Copy" />
                        <MenuItem Command="Cut" Header="Cut" />
                        <MenuItem Command="Paste" Header="Paste" />
                        <MenuItem Header="Convert to.." Tag="TagConvertTo" />
                        <MenuItem Header="Set number of digits displayed.." Tag="TagSetDigits" />
                    </ContextMenu>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <!--  *********************** Styles for the MultiSelctTreeView **************************************  -->
    <Style xmlns:axogc="clr-namespace:Altaxo.Gui.Common" TargetType="{x:Type axogc:MultiSelectTreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Border.BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        <Setter Property="Border.BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type axogc:MultiSelectTreeView}">
                    <Border
                        x:Name="Border"
                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            CanContentScroll="false"
                            Focusable="true"
                            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************** Styles for NumericUpDownBase **************************************  -->
    <Style xmlns:axogc="clr-namespace:Altaxo.Gui.Common" TargetType="{x:Type axogc:NumericUpDownBase}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type axogc:NumericUpDownBase}">
                    <Border
                        Grid.RowSpan="2"
                        Grid.ColumnSpan="2"
                        Margin="0"
                        BorderBrush="Gray"
                        BorderThickness="1">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" MinWidth="16" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <TextBox
                                x:Name="_textBox"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="0"
                                TextAlignment="Right">
                                <!--  Note that the Binding for TextBox.Text is located in the OnApplyTemplate function (it was neccessary because the converter and the validation rule needs a reference to the control)  -->
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="true">
                                                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>

                            <RepeatButton
                                Grid.Row="0"
                                Grid.Column="1"
                                Command="{x:Static axogc:NumericUpDownBase.IncreaseCommand}">
                                <Path
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="Black">
                                    <Path.Data>
                                        <Geometry>M 0 4 L 3.5 0 L 7 4 Z</Geometry>
                                    </Path.Data>
                                </Path>
                            </RepeatButton>

                            <RepeatButton
                                Grid.Row="1"
                                Grid.Column="1"
                                Command="{x:Static axogc:NumericUpDownBase.DecreaseCommand}">
                                <Path
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="Black">
                                    <Path.Data>
                                        <Geometry>M 0 0 L 3.5 4 L 7 0 Z</Geometry>
                                    </Path.Data>
                                </Path>
                            </RepeatButton>

                            <RepeatButton
                                Grid.Row="0"
                                Grid.Column="2"
                                Command="{x:Static axogc:NumericUpDownBase.GotoMaximumCommand}">
                                <RepeatButton.Visibility>
                                    <Binding Path="IsGotoMinimumAndMaximumVisible" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </RepeatButton.Visibility>
                                <Path
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="Black">
                                    <Path.Data>
                                        <Geometry>M 0 5 L 4 1 L 0 1 L 0 0 L 8 0 L 8 1 L 4 1 L 8 5 Z</Geometry>
                                    </Path.Data>
                                </Path>
                            </RepeatButton>

                            <RepeatButton
                                Grid.Row="1"
                                Grid.Column="2"
                                Command="{x:Static axogc:NumericUpDownBase.GotoMinimumCommand}">
                                <RepeatButton.Visibility>
                                    <Binding Path="IsGotoMinimumAndMaximumVisible" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </RepeatButton.Visibility>
                                <Path
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="Black">
                                    <Path.Data>
                                        <Geometry>M 0 0 L 4 4 L 0 4 L 0 5 L 8 5 L 8 4 L 4 4 L 8 0 Z</Geometry>
                                    </Path.Data>
                                </Path>
                            </RepeatButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************** Style for the images in ToolbarItems, if the items are disabled  -->
    <Style x:Key="{x:Static axogaddin:ToolBarService.ImageStyleKey}" TargetType="{x:Type Image}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                <Setter Property="Opacity" Value="0.30" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Colors for DropDownButton and SplitButton  -->
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}" Color="#FF0A246A" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}" Color="#FFB6BDD2" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type local:SplitButton}, PressedBackground}" Color="#FF8592B5" />

    <!--  Style and Template for DropDownButton  -->
    <Style TargetType="{x:Type local:DropDownButton}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Control.Padding" Value="2,2,2,2" />
        <Setter Property="Border.BorderThickness" Value="1,1,1,1" />
        <Setter Property="Panel.Background" Value="Transparent" />
        <Setter Property="Border.BorderBrush" Value="Transparent" />
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center" />
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate xmlns:s="clr-namespace:System;assembly=mscorlib" TargetType="local:DropDownButton">
                    <Border
                        Name="OuterBorder"
                        Background="{TemplateBinding Panel.Background}"
                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                        SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter
                                Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                Content="{TemplateBinding ContentControl.Content}"
                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            <Path
                                Width="7"
                                Height="3.5"
                                Margin="0,2,2,2"
                                Data="M0,0 L1,0 0.5,1 z"
                                Fill="{TemplateBinding TextElement.Foreground}"
                                Stretch="Fill" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}}" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}}" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="local:DropDownButton.IsDropDownMenuOpen" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="OuterBorder" Property="Border.Padding" Value="0,0,0,1" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Style and Template for SplitButton  -->
    <Style TargetType="{x:Type local:SplitButton}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Control.Padding" Value="2,2,2,2" />
        <Setter Property="Border.BorderThickness" Value="1,1,1,1" />
        <Setter Property="Panel.Background" Value="Transparent" />
        <Setter Property="Border.BorderBrush" Value="Transparent" />
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center" />
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate xmlns:s="clr-namespace:System;assembly=mscorlib" TargetType="local:SplitButton">
                    <Border
                        Name="OuterBorder"
                        Background="{TemplateBinding Panel.Background}"
                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                        SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter
                                Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                Content="{TemplateBinding ContentControl.Content}"
                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            <Border
                                Name="PART_DropDownArrow"
                                BorderBrush="{Binding ElementName=OuterBorder, Path=BorderBrush}"
                                BorderThickness="1,0,0,0"
                                SnapsToDevicePixels="True">
                                <Path
                                    Width="7"
                                    Height="3.5"
                                    Margin="2"
                                    Data="M0,0 L1,0 0.5,1 z"
                                    Fill="{TemplateBinding TextElement.Foreground}"
                                    Stretch="Fill" />
                            </Border>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}}" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                            <Setter TargetName="PART_DropDownArrow" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}}" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                            <Setter TargetName="PART_DropDownArrow" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBackground}}" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type local:DropDownButton}, ActiveBorder}}" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="{DynamicResource {ComponentResourceKey {x:Type local:SplitButton}, PressedBackground}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="local:SplitButton.IsDropDownMenuOpen" Value="True">
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <Setter TargetName="PART_DropDownArrow" Property="Border.BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="OuterBorder" Property="Border.Padding" Value="0,0,0,1" />
                            <Setter TargetName="OuterBorder" Property="Panel.Background" Value="Transparent" />
                            <Setter TargetName="PART_DropDownArrow" Property="Panel.Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SortableGridViewColumn. Displays an up arrow or down arrow in the column header when the grid is sorted using that column.  -->
    <local:ColumnSortDirectionToVisibilityConverter x:Key="ColumnSortDirectionToVisibilityConverter" />
    <DataTemplate x:Key="{ComponentResourceKey {x:Type local:SortableGridViewColumn}, ColumnHeaderTemplate}">
        <StackPanel Orientation="Horizontal">
            <TextBlock HorizontalAlignment="Center" Text="{Binding}" />
            <Path
                x:Name="upArrow"
                Data="M 5,10 L 15,10 L 10,5 L 5,10"
                Fill="Gray"
                StrokeThickness="1"
                Visibility="{Binding Path=Column.SortDirection, ConverterParameter={x:Static local:ColumnSortDirection.Ascending}, RelativeSource={RelativeSource AncestorType={x:Type GridViewColumnHeader}}, Converter={StaticResource ColumnSortDirectionToVisibilityConverter}}" />
            <Path
                x:Name="downArrow"
                Data="M 5,5 L 10,10 L 15,5 L 5,5"
                Fill="Gray"
                StrokeThickness="1"
                Visibility="{Binding Path=Column.SortDirection, ConverterParameter={x:Static local:ColumnSortDirection.Descending}, RelativeSource={RelativeSource AncestorType={x:Type GridViewColumnHeader}}, Converter={StaticResource ColumnSortDirectionToVisibilityConverter}}" />
        </StackPanel>
    </DataTemplate>

    <!--  This style replaces the default ListBoxItem template with one that highlights the focused item instead of the selected item  -->
    <Style x:Key="{x:Static local:GlobalStyles.ListBoxItemFocusHighlightStyleKey}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This style replaces the default ListViewItem template with one that highlights the focused item instead of the selected items  -->
    <Style x:Key="{x:Static local:GlobalStyles.ListViewItemFocusHighlightStyleKey}" TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border
                        Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <GridViewRowPresenter Columns="{TemplateBinding GridView.ColumnCollection}" Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
