
<topic id="9FC35E359A7716A00086ED0EDC2BFB10" revisionNumber="1">

<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

<introduction>

<para>
Previous section: <link xlink:href="A922639CFDCBCB105FEDED63C79330AA">The script dialog box</link></para>
<autoOutline />
<markup><hr/></markup>

<para>
The worksheet scripts of the current worksheet is opened by choosing
Worksheet→Worksheet script from the main menu. A dialog box
described before opens.
</para>

<para>
When you expand the ScriptHeader of the worksheet script, you will see
the following code:
</para>

<para>
<markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#9DBC4443FE85CC10055F2B6D9338D965"><img src="../media/9DBC4443FE85CC10055F2B6D9338D965.png" width="567"></img></a></markup>
</para>

<para>
Users with some skills in C# know that lines 2-7 are using statements,
bringing some namespaces into easy access. You can add additional
namespaces here. Unskilled users should leave those lines alone.
</para>

<para>
Interesting lines are line 13, 15, 16, and 17. They show, which local
variables you can use for accessing your table:
</para>

<list class="bullet">

<listItem>

<para>
‘mytable’ (line 13) : the data table for which this script
is executed. Usually, this is the worksheet with which this script
is associated; but if you call this script from other worksheet
scripts, it is usually the table of the calling worksheet script.
</para>
</listItem>

<listItem>

<para>
‘reporter’ (line13): a variable used for long-running scripts to
report the progress of the script execution. If your script runs
shortly (less than some seconds), you can safely ignore
this variable. You can even ignore it for long-running scripts, but
then you will have no clue about the progress your script is making.
</para>
</listItem>

<listItem>

<para>
‘col’ (line 15): is the collection of data columns of the table
‘mytable’
</para>
</listItem>

<listItem>

<para>
‘pcol’ (line 16): is the collection of property columns of the table
‘mytable’
</para>
</listItem>

<listItem>

<para>
‘table’ (line 17): is the collection of all tables in the current
project
</para>
</listItem>
</list>

<para>
As you can see from the above list, you not only have access to your
‘own’ table, but to all tables in the project (via variable ‘table’)! In
fact, by the static variable ‘Current’ (which is permanent in all
scripts, but is not shown in the figure above), you have access to all
data of your current project plus all classes of Altaxo itself. Thus you
are able to write very powerful scripts, or on the other hand, you can
mess everything up. It’s up to you!
</para>

<para>
I’ve almost forgotten one very very useful feature: the code completion
support! When you begin to type, you will see a dialog box with
suggestions, applicable for the current context. In the figure below, I
typed in ‘col.’. This popup appears after I typed in the dot:
</para>

<para>
<markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#48AF9DC1A40E495A8934BEC23FA2EEC8"><img src="../media/48AF9DC1A40E495A8934BEC23FA2EEC8.png" width="567"></img></a></markup>
</para>

<para>
Here, you can see all the methods and properties of the ‘col’ variable
(remember that ‘col’ was the collection of data columns of the table
‘mytable’). Here, I selected the add method, and in the explanation
balloon to the right of the popup it is said that the Add methods has 4
overloads (i.e. there are in fact four different Add methods, each one
with a different parameter set), and that the first overload simply
takes a DataColumn as argument. Is also explains what the Add method is
doing. If you want to use the ‘Add’ method, simply press the Tab key,
and Add will be included in your script. In this way, you can write
scripts even with long method names in short time. If you don’t want to
use the ‘Add’ method, just press the first char of your method name of
choice, and the dialog box will show only those methods, whose name
starts with the character you typed in.
</para>

<para>
But let’s see some examples. If not stated otherwise, all examples refer
to the script text between the lines
</para>

<code>
// ----- add your script below this line -----
</code>

<para>
and
</para>

<code>
// ----- add your script above this line -----
</code>
</introduction>

<section address="E670E9245379E806CA0CAE0411238701">
<title>Example 1: Fill a column with calculated values
</title>
<content>

<para>
In this example we want to have a data column, in which each value is
the square of the row number.
</para>

<code>
    for(int i=0;i&lt;10;i++)
        {
        col[&quot;A&quot;][i] = i*i;
        }
</code>

<para>
In the first line a new integer variable ‘i’ is created, which starts at
0 and must be less than 10 (thus the last value is 9). In every loop, it
is incremented by one (‘i++’).
</para>

<para>
The third line is more interesting. By using col[&quot;A&quot;], you access a
data column with the name “A” that is hopefully contained in your table
(don’t care, if it isn’t, you will get an error at the time of execution
of the script).
</para>

<para>
By stating col[&quot;A&quot;][i], you are accessing the row with the index i
in the column with name &quot;A&quot;. Please remember that indexing in C# always
starts with 0. Thus the cell in the first row of column &quot;A&quot; is accessed
with
</para>

<code>
col[&quot;A&quot;][0]
</code>

<para>
By stating
</para>

<code>
col[&quot;A&quot;][i] = i*i;
</code>

<para>
you set the i<superscript>th</superscript> row of column &quot;A&quot; with a value, which is i times i.
</para>

<para>
That’s it! But why not use
</para>

<code>
for(int i=0;i&lt;col.RowCount;i++) 
</code>

<para>
which is the default statement when you create a new worksheet script?
That’s because col.RowCount specifies the number of rows of the whole
worksheet (one more than the index of the last data row that contains
any value). And because our worksheet was empty at the beginning,
col.RowCount initially is 0 (zero)! This would mean your loop is not
executed at all, and no values are filled in your data column!
</para>

<para>
In addition to <legacyBold>specify a column by its name</legacyBold>, you can also
<legacyBold>specify</legacyBold> it <legacyBold>by</legacyBold> its <legacyBold>position</legacyBold> in the worksheet. For instance,
if column ‘A’ is the first column of your worksheet, the following
statements are equivalent:
</para>

<list class="bullet">

<listItem>

<para>
<codeInline>col[&quot;A&quot;]</codeInline>
</para>
</listItem>

<listItem>

<para>
<codeInline>col[0]</codeInline>
</para>
</listItem>
</list>

<para>
Again, the first column of the worksheet is specified by index 0 (not
1).
</para>
</content>
</section>

<section address="F04E12E705412A07BE60CA4C7585F2D7">
<title>Example 2: Calculate column values from other columns
</title>
<content>

<para>
Suppose you have already two columns, for instance col[&quot;A&quot;] and
col[&quot;B&quot;]. You want to have a new column with is the difference of the
square root of the first column and the 3<superscript>rd</superscript> power of the second
columns (or whatever fancy mathematical functions you want to use).
</para>

<para>
At first you have to create your new column by choosing
Worksheet→Add new data column from the main menu.
</para>

<para>
There are two possibilities to do the calculation using a worksheet
script:
</para>

<list class="bullet">

<listItem>

<para>
Calculate the values for every row in the worksheet using a loop (as
in the previous example)
</para>
</listItem>

<listItem>

<para>
Use column mathematics
</para>
</listItem>
</list>

<para>
For the example, the values in our new column should be the square root
of the values in the first column minus the 3<superscript>rd</superscript> power of the values in
the second column:
</para>

<para>
<legacyItalic>Solution 1</legacyItalic> (using a for loop)
</para>

<code>
    for(int i=0;i&lt;col.RowCount;i++)
        {
        col[&quot;C&quot;][i] = Sqrt(col[&quot;A&quot;][i]) – Pow3(col[&quot;B&quot;][i]);
        }
</code>

<para>
<legacyItalic>Solution 2</legacyItalic> (using functions on whole columns):
</para>

<code>
col[&quot;C&quot;] = Sqrt(col[&quot;A&quot;]) – Pow3(col[&quot;B&quot;]);
</code>

<para>
Here, the <codeInline>Sqrt()</codeInline> and <codeInline>Pow3()</codeInline> functions are defined in the script
environment, taking whole columns as arguments. Each of this functions
executes the function for each element in the column.
</para>

<para>
The above code line is equivalent to:
</para>

<code>
col[&quot;C&quot;] = Map(Sqrt, col[&quot;A&quot;]) - Map(Pow3, col[&quot;B&quot;]);
</code>

<para>
The function <codeInline>Map()</codeInline> takes a function as the first argument (in our case
Sqrt), and applies this function to all elements in the column given as
the second argument. The <codeInline>Map()</codeInline> function is useful if you need to apply a
function which is not defined in the script environment to each element
of a column.
</para>

<para>
Of course, in our case <codeInline>Sqrt</codeInline> is defined in the environment to take a
whole column as argument. On the other hand, as an example, the <codeInline>Erf()</codeInline>
function is not defined in the script environment. It is defined in
<codeInline>Altaxo.Calc.ErrorFunction</codeInline>. If you want to calculate each element in
column C as <codeInline>Erf()</codeInline> of each element of column A, you can use
</para>

<code>
col[&quot;C&quot;] = Map(ErrorFunction.Erf, col[&quot;A&quot;]);
</code>

<para>
The map function is defined for multiple elements, too. Thus the example
above with square root and 3<superscript>rd</superscript> power can be written as:
</para>

<code>
col[&quot;C&quot;] = Map((x,y)=&gt;Sqrt(x) - Pow3(y), col[&quot;A&quot;], col[&quot;B&quot;]);
</code>
</content>
</section>
<markup><hr/></markup>
<section>

<content>

<para>
Next section: <link xlink:href="942E3813AA2CE7361340941CE02C3EAE">2D-Graphs</link></para>
</content>
</section>
</developerConceptualDocument>
</topic>
