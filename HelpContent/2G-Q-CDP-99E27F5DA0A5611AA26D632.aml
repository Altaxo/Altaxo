
<topic id="99E27F5DA0A5611AA26D632399925C2D" revisionNumber="1">

<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

<introduction>

<para>
Previous section: <link xlink:href="11C32B9CA36BD740F55DCE1F9C3EB223">Create a line plot, a scatter plot, or a line-scatter plot</link></para>
<autoOutline />
<markup><hr/></markup>

<para>
A density plot is something similar to a 3D-plot. Unlike a 3D-plot, the z-axis is not shown as height, but is coded as color values.
</para>
</introduction>

<section address="44BF4EF6CF73D9D62E39C6EEE9254318">
<title>Create some data (or use your own)
</title>
<content>

<para>
Since it is difficult to get data for a nice density plot, we create them by a
worksheet script.
</para>

<para>
The classical example for this is to show the function
</para>
<markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#53760F9C1C3FF858336DB77CA124D3C2"><img src="../media/53760F9C1C3FF858336DB77CA124D3C2.png" width="153" height="42"></img></a></markup>

<para>
Create an empty worksheet, and then open the worksheet script dialog by choosing from the main menu  <codeInline>Worksheet → Worksheet script</codeInline>. Enter the following script text (you can copy it from here):
</para>

<code>
            for (int i = 0; i &lt; 64; ++i) // index of columns
            {
                var currentColumn = col.EnsureExistence(&quot;F&quot; + i.ToString(), typeof(DoubleColumn), ColumnKind.V, 0);
                double y = (i - 32)/2.0;
            	for (int j = 0; j &lt; 64; ++j) // index of rows
                {
                    double x = (j - 32)/2.0;
                    double f = Sin(Sqrt(x * x + y * y)) / Sqrt(x * x + y * y);
                    currentColumn[j] = f;
                }
            }
</code>

<para>
Press the <codeInline>OK</codeInline> button of the script dialog to get the script executed.
It creates 64 columns, named F0 .. F63, and fills the table cells with values according to the function above, using 64 rows. Essentially, the result is a matrix of 64 columns x 64 rows.
</para>
</content>
</section>

<section address="A9F6B39FDD33710958E9669B40678B6C">
<title>Plot the data as density plot
</title>
<content>

<para>
Now, press <codeInline>CTRL-A</codeInline> in order to get all columns of the worksheet selected, and then choose from the main menu <codeInline>Plot → Density plot</codeInline>.
</para>

<para>
The result should look like this:
</para>

<para>
<markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#1C4AD0DF2D0579780AD463587CA79B0D"><img src="../media/1C4AD0DF2D0579780AD463587CA79B0D.png" width="567"></img></a></markup>
</para>
</content>
</section>

<section address="BAA6B18A056764F47B412C9384529017">
<title>Improved example
</title>
<content>

<para>
Because of the simplicity of the above example, some important things are missing here. The most obvious is that our x and y axis values range from 0 to 64 (borders of the image), but the x and y we calculate in the script range from -16..16. In fact, we have never stored the x- and y-values!
</para>

<para>
An improved version of the script above is this:
</para>

<code>
            col.RemoveColumnsAll();
            pcol.RemoveColumnsAll();
            var yCol = pcol.EnsureExistence(&quot;Y-values&quot;, typeof(DoubleColumn), ColumnKind.Y, 0);
            var xCol = col.EnsureExistence(&quot;X-values&quot;, typeof(DoubleColumn), ColumnKind.X, 0);
            for (int i = 0; i &lt; 64; ++i) // index of columns
            {
                var currentColumn = col.EnsureExistence(&quot;F&quot; + i.ToString(), typeof(DoubleColumn), ColumnKind.V, 0);
                double y = (i - 32) / 2.0;
                yCol[col.GetColumnNumber(currentColumn)] = y;
                for (int j = 0; j &lt; 64; ++j) // index of rows
                {
                    double x = (j - 32) / 2.0;
                    double radius = Sqrt(x * x + y * y);
                    double f = radius == 0 ? 1 : Sin(radius) / radius;
                    xCol[j] = x;
                    currentColumn[j] = f;
                }
            }
</code>

<para>
In the first two code lines, we remove all existing data columns and property columns. Then, in the next two code lines, we create a property column <codeInline>yCol</codeInline> named <codeInline>Y-values</codeInline> and a data column <codeInline>xCol</codeInline> named <codeInline>X-values</codeInline>, which store the respective y and x values. The assignment of the x values to  <codeInline>xCol</codeInline> is straightforward (<codeInline>xCol[j] = x;</codeInline>). The assigment of the y values to the property column yCol by <codeInline>yCol[col.GetColumnNumber(currentColumn)] = y; </codeInline> is a little involved, since we have to find the right index first (in fact, it would be <codeInline>i+1</codeInline>, with the added 1 because we have an additional column <codeInline>X-values</codeInline> now at the beginning of the worksheet), but here I wanted to demonstrate the clean way to do it.
</para>

<para>
The resulting worksheet should look like this:
</para>

<para>
<mediaLinkInline><image xlink:href="6B74DE9C4450D027BDFA52CF6A27BC45"></image></mediaLinkInline>
</para>

<para>
In the worksheet above, I have already selected all data columns, including the column <codeInline>X-values</codeInline>, using <codeInline>CTRL-A</codeInline>, and then, while still holding the <codeInline>CTRL</codeInline> key, I clicked onto the property column header of the <codeInline>Y-values</codeInline> property column (that is the cell with the <codeInline>Y-values</codeInline> text in it) in order to select it, too.
</para>

<para>
Now again, use from the main menu <codeInline>Plot → Density plot</codeInline> to get the density plot, show in the following graph:
</para>

<para>
<markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#5428A70EB7DE7D4A7E4035D00BBFAC50"><img src="../media/5428A70EB7DE7D4A7E4035D00BBFAC50.png" width="567"></img></a></markup>
</para>

<para>
Now, the range of the x values is as expected from -16 to 16, and the range of the y-values is the same. Also, the white dot in the middle has disappeared, since the condition, that the radius <markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#9207B800D09B8E80B11931CA84598B3B"><img src="../media/9207B800D09B8E80B11931CA84598B3B.png" width="88" height="20" align="bottom"></img></a></markup>  is zero, has been treated properly by setting <markup><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#722C7CB6CC53FCD78C677A226E38F8AE"><img src="../media/722C7CB6CC53FCD78C677A226E38F8AE.png" width="35" height="14" align="middle"></img></a></markup> then.
</para>
</content>
</section>
<markup><hr/></markup>
<section>

<content>

<para>
Next section: <link xlink:href="F3F39DE287E6F866C4CE91FCB7269D42">Concepts</link></para>
</content>
</section>
</developerConceptualDocument>
</topic>
